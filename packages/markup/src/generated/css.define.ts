// GENERATED BY @squirt/generator
import { Factory } from "../factory"

const colorNames = [
  "aliceblue",
  "antiquewhite",
  "aqua",
  "aquamarine",
  "azure",
  "beige",
  "bisque",
  "black",
  "blanchedalmond",
  "blue",
  "blueviolet",
  "brown",
  "burlywood",
  "cadetblue",
  "chartreuse",
  "chocolate",
  "coral",
  "cornflowerblue",
  "cornsilk",
  "crimson",
  "cyan",
  "darkblue",
  "darkcyan",
  "darkgoldenrod",
  "darkgray",
  "darkgreen",
  "darkgrey",
  "darkkhaki",
  "darkmagenta",
  "darkolivegreen",
  "darkorange",
  "darkorchid",
  "darkred",
  "darksalmon",
  "darkseagreen",
  "darkslateblue",
  "darkslategray",
  "darkslategrey",
  "darkturquoise",
  "darkviolet",
  "deeppink",
  "deepskyblue",
  "dimgray",
  "dimgrey",
  "dodgerblue",
  "firebrick",
  "floralwhite",
  "forestgreen",
  "fuchsia",
  "gainsboro",
  "ghostwhite",
  "gold",
  "goldenrod",
  "gray",
  "green",
  "greenyellow",
  "grey",
  "honeydew",
  "hotpink",
  "indianred",
  "indigo",
  "ivory",
  "khaki",
  "lavender",
  "lavenderblush",
  "lawngreen",
  "lemonchiffon",
  "lightblue",
  "lightcoral",
  "lightcyan",
  "lightgoldenrodyellow",
  "lightgray",
  "lightgreen",
  "lightgrey",
  "lightpink",
  "lightsalmon",
  "lightseagreen",
  "lightskyblue",
  "lightslategray",
  "lightslategrey",
  "lightsteelblue",
  "lightyellow",
  "lime",
  "limegreen",
  "linen",
  "magenta",
  "maroon",
  "mediumaquamarine",
  "mediumblue",
  "mediumorchid",
  "mediumpurple",
  "mediumseagreen",
  "mediumslateblue",
  "mediumspringgreen",
  "mediumturquoise",
  "mediumvioletred",
  "midnightblue",
  "mintcream",
  "mistyrose",
  "moccasin",
  "navajowhite",
  "navy",
  "oldlace",
  "olive",
  "olivedrab",
  "orange",
  "orangered",
  "orchid",
  "palegoldenrod",
  "palegreen",
  "paleturquoise",
  "palevioletred",
  "papayawhip",
  "peachpuff",
  "peru",
  "pink",
  "plum",
  "powderblue",
  "purple",
  "rebeccapurple",
  "red",
  "rosybrown",
  "royalblue",
  "saddlebrown",
  "salmon",
  "sandybrown",
  "seagreen",
  "seashell",
  "sienna",
  "silver",
  "skyblue",
  "slateblue",
  "slategray",
  "slategrey",
  "snow",
  "springgreen",
  "steelblue",
  "tan",
  "teal",
  "thistle",
  "tomato",
  "turquoise",
  "violet",
  "wheat",
  "white",
  "whitesmoke",
  "yellow",
  "yellowgreen",
  "transparent",
  "currentcolor",
]

export default function defineCssGlobals() {
  Object.defineProperty(globalThis, "$counterStyle", { value: Factory.atRule("counter-style") })
  Object.defineProperty(globalThis, "$charset", { value: Factory.atRule("charset") })
  Object.defineProperty(globalThis, "$media", { value: Factory.atRule("media") })
  Object.defineProperty(globalThis, "$supports", { value: Factory.atRule("supports") })
  Object.defineProperty(globalThis, "$import", { value: Factory.atRule("import") })
  Object.defineProperty(globalThis, "$layer", { value: Factory.atRule("layer") })
  Object.defineProperty(globalThis, "$when", { value: Factory.atRule("when") })
  Object.defineProperty(globalThis, "$else", { value: Factory.atRule("else") })
  Object.defineProperty(globalThis, "$container", { value: Factory.atRule("container") })
  Object.defineProperty(globalThis, "$keyframes", { value: Factory.atRule("keyframes") })
  Object.defineProperty(globalThis, "$positionFallback", { value: Factory.atRule("position-fallback") })
  Object.defineProperty(globalThis, "$try", { value: Factory.atRule("try") })
  Object.defineProperty(globalThis, "$fontFace", { value: Factory.atRule("font-face") })
  Object.defineProperty(globalThis, "$webkitKeyframes", { value: Factory.atRule("-webkit-keyframes") })
  Object.defineProperty(globalThis, "$customMedia", { value: Factory.atRule("custom-media") })
  Object.defineProperty(globalThis, "$property", { value: Factory.atRule("property") })
  Object.defineProperty(globalThis, "$colorProfile", { value: Factory.atRule("color-profile") })
  Object.defineProperty(globalThis, "$page", { value: Factory.atRule("page") })
  Object.defineProperty(globalThis, "$topLeftCorner", { value: Factory.atRule("top-left-corner") })
  Object.defineProperty(globalThis, "$topLeft", { value: Factory.atRule("top-left") })
  Object.defineProperty(globalThis, "$topCenter", { value: Factory.atRule("top-center") })
  Object.defineProperty(globalThis, "$topRight", { value: Factory.atRule("top-right") })
  Object.defineProperty(globalThis, "$topRightCorner", { value: Factory.atRule("top-right-corner") })
  Object.defineProperty(globalThis, "$bottomLeftCorner", { value: Factory.atRule("bottom-left-corner") })
  Object.defineProperty(globalThis, "$bottomLeft", { value: Factory.atRule("bottom-left") })
  Object.defineProperty(globalThis, "$bottomCenter", { value: Factory.atRule("bottom-center") })
  Object.defineProperty(globalThis, "$bottomRight", { value: Factory.atRule("bottom-right") })
  Object.defineProperty(globalThis, "$bottomRightCorner", { value: Factory.atRule("bottom-right-corner") })
  Object.defineProperty(globalThis, "$leftTop", { value: Factory.atRule("left-top") })
  Object.defineProperty(globalThis, "$leftMiddle", { value: Factory.atRule("left-middle") })
  Object.defineProperty(globalThis, "$leftBottom", { value: Factory.atRule("left-bottom") })
  Object.defineProperty(globalThis, "$rightTop", { value: Factory.atRule("right-top") })
  Object.defineProperty(globalThis, "$rightMiddle", { value: Factory.atRule("right-middle") })
  Object.defineProperty(globalThis, "$rightBottom", { value: Factory.atRule("right-bottom") })
  Object.defineProperty(globalThis, "$viewport", { value: Factory.atRule("viewport") })
  Object.defineProperty(globalThis, "$fontFeatureValues", { value: Factory.atRule("font-feature-values") })
  Object.defineProperty(globalThis, "$fontPaletteValues", { value: Factory.atRule("font-palette-values") })
  Object.defineProperty(globalThis, "$scope", { value: Factory.atRule("scope") })
  Object.defineProperty(globalThis, "$customSelector", { value: Factory.atRule("custom-selector") })
  Object.defineProperty(globalThis, "appleColorFilter", { value: Factory.property("-apple-color-filter")})
  Object.defineProperty(globalThis, "appleDashboardRegion", { value: Factory.property("-apple-dashboard-region")})
  Object.defineProperty(globalThis, "applePayButtonStyle", { value: Factory.property("-apple-pay-button-style")})
  Object.defineProperty(globalThis, "applePayButtonType", { value: Factory.property("-apple-pay-button-type")})
  Object.defineProperty(globalThis, "appleTrailingWord", { value: Factory.property("-apple-trailing-word")})
  Object.defineProperty(globalThis, "internalTextAutosizingStatus", { value: Factory.property("-internal-text-autosizing-status")})
  Object.defineProperty(globalThis, "mozAnimation", { value: Factory.property("-moz-animation")})
  Object.defineProperty(globalThis, "mozAnimationDelay", { value: Factory.property("-moz-animation-delay")})
  Object.defineProperty(globalThis, "mozAnimationDirection", { value: Factory.property("-moz-animation-direction")})
  Object.defineProperty(globalThis, "mozAnimationDuration", { value: Factory.property("-moz-animation-duration")})
  Object.defineProperty(globalThis, "mozAnimationFillMode", { value: Factory.property("-moz-animation-fill-mode")})
  Object.defineProperty(globalThis, "mozAnimationIterationCount", { value: Factory.property("-moz-animation-iteration-count")})
  Object.defineProperty(globalThis, "mozAnimationName", { value: Factory.property("-moz-animation-name")})
  Object.defineProperty(globalThis, "mozAnimationPlayState", { value: Factory.property("-moz-animation-play-state")})
  Object.defineProperty(globalThis, "mozAnimationTimingFunction", { value: Factory.property("-moz-animation-timing-function")})
  Object.defineProperty(globalThis, "mozAppearance", { value: Factory.property("-moz-appearance")})
  Object.defineProperty(globalThis, "mozBackfaceVisibility", { value: Factory.property("-moz-backface-visibility")})
  Object.defineProperty(globalThis, "mozBackgroundClip", { value: Factory.property("-moz-background-clip")})
  Object.defineProperty(globalThis, "mozBackgroundInlinePolicy", { value: Factory.property("-moz-background-inline-policy")})
  Object.defineProperty(globalThis, "mozBackgroundOrigin", { value: Factory.property("-moz-background-origin")})
  Object.defineProperty(globalThis, "mozBackgroundSize", { value: Factory.property("-moz-background-size")})
  Object.defineProperty(globalThis, "mozBinding", { value: Factory.property("-moz-binding")})
  Object.defineProperty(globalThis, "mozBorderBottomColors", { value: Factory.property("-moz-border-bottom-colors")})
  Object.defineProperty(globalThis, "mozBorderEnd", { value: Factory.property("-moz-border-end")})
  Object.defineProperty(globalThis, "mozBorderEndColor", { value: Factory.property("-moz-border-end-color")})
  Object.defineProperty(globalThis, "mozBorderEndStyle", { value: Factory.property("-moz-border-end-style")})
  Object.defineProperty(globalThis, "mozBorderEndWidth", { value: Factory.property("-moz-border-end-width")})
  Object.defineProperty(globalThis, "mozBorderImage", { value: Factory.property("-moz-border-image")})
  Object.defineProperty(globalThis, "mozBorderLeftColors", { value: Factory.property("-moz-border-left-colors")})
  Object.defineProperty(globalThis, "mozBorderRadius", { value: Factory.property("-moz-border-radius")})
  Object.defineProperty(globalThis, "mozBorderRadiusBottomleft", { value: Factory.property("-moz-border-radius-bottomleft")})
  Object.defineProperty(globalThis, "mozBorderRadiusBottomright", { value: Factory.property("-moz-border-radius-bottomright")})
  Object.defineProperty(globalThis, "mozBorderRadiusTopleft", { value: Factory.property("-moz-border-radius-topleft")})
  Object.defineProperty(globalThis, "mozBorderRadiusTopright", { value: Factory.property("-moz-border-radius-topright")})
  Object.defineProperty(globalThis, "mozBorderRightColors", { value: Factory.property("-moz-border-right-colors")})
  Object.defineProperty(globalThis, "mozBorderStart", { value: Factory.property("-moz-border-start")})
  Object.defineProperty(globalThis, "mozBorderStartColor", { value: Factory.property("-moz-border-start-color")})
  Object.defineProperty(globalThis, "mozBorderStartStyle", { value: Factory.property("-moz-border-start-style")})
  Object.defineProperty(globalThis, "mozBorderStartWidth", { value: Factory.property("-moz-border-start-width")})
  Object.defineProperty(globalThis, "mozBorderTopColors", { value: Factory.property("-moz-border-top-colors")})
  Object.defineProperty(globalThis, "mozBoxAlign", { value: Factory.property("-moz-box-align")})
  Object.defineProperty(globalThis, "mozBoxDirection", { value: Factory.property("-moz-box-direction")})
  Object.defineProperty(globalThis, "mozBoxFlex", { value: Factory.property("-moz-box-flex")})
  Object.defineProperty(globalThis, "mozBoxOrdinalGroup", { value: Factory.property("-moz-box-ordinal-group")})
  Object.defineProperty(globalThis, "mozBoxOrient", { value: Factory.property("-moz-box-orient")})
  Object.defineProperty(globalThis, "mozBoxPack", { value: Factory.property("-moz-box-pack")})
  Object.defineProperty(globalThis, "mozBoxShadow", { value: Factory.property("-moz-box-shadow")})
  Object.defineProperty(globalThis, "mozBoxSizing", { value: Factory.property("-moz-box-sizing")})
  Object.defineProperty(globalThis, "mozColumnCount", { value: Factory.property("-moz-column-count")})
  Object.defineProperty(globalThis, "mozColumnFill", { value: Factory.property("-moz-column-fill")})
  Object.defineProperty(globalThis, "mozColumnGap", { value: Factory.property("-moz-column-gap")})
  Object.defineProperty(globalThis, "mozColumnRule", { value: Factory.property("-moz-column-rule")})
  Object.defineProperty(globalThis, "mozColumnRuleColor", { value: Factory.property("-moz-column-rule-color")})
  Object.defineProperty(globalThis, "mozColumnRuleStyle", { value: Factory.property("-moz-column-rule-style")})
  Object.defineProperty(globalThis, "mozColumnRuleWidth", { value: Factory.property("-moz-column-rule-width")})
  Object.defineProperty(globalThis, "mozColumnSpan", { value: Factory.property("-moz-column-span")})
  Object.defineProperty(globalThis, "mozColumnWidth", { value: Factory.property("-moz-column-width")})
  Object.defineProperty(globalThis, "mozColumns", { value: Factory.property("-moz-columns")})
  Object.defineProperty(globalThis, "mozFloatEdge", { value: Factory.property("-moz-float-edge")})
  Object.defineProperty(globalThis, "mozFontFeatureSettings", { value: Factory.property("-moz-font-feature-settings")})
  Object.defineProperty(globalThis, "mozFontLanguageOverride", { value: Factory.property("-moz-font-language-override")})
  Object.defineProperty(globalThis, "mozForceBrokenImageIcon", { value: Factory.property("-moz-force-broken-image-icon")})
  Object.defineProperty(globalThis, "mozHyphens", { value: Factory.property("-moz-hyphens")})
  Object.defineProperty(globalThis, "mozImageRegion", { value: Factory.property("-moz-image-region")})
  Object.defineProperty(globalThis, "mozMarginEnd", { value: Factory.property("-moz-margin-end")})
  Object.defineProperty(globalThis, "mozMarginStart", { value: Factory.property("-moz-margin-start")})
  Object.defineProperty(globalThis, "mozOpacity", { value: Factory.property("-moz-opacity")})
  Object.defineProperty(globalThis, "mozOrient", { value: Factory.property("-moz-orient")})
  Object.defineProperty(globalThis, "mozOsxFontSmoothing", { value: Factory.property("-moz-osx-font-smoothing")})
  Object.defineProperty(globalThis, "mozOutline", { value: Factory.property("-moz-outline")})
  Object.defineProperty(globalThis, "mozOutlineColor", { value: Factory.property("-moz-outline-color")})
  Object.defineProperty(globalThis, "mozOutlineOffset", { value: Factory.property("-moz-outline-offset")})
  Object.defineProperty(globalThis, "mozOutlineRadius", { value: Factory.property("-moz-outline-radius")})
  Object.defineProperty(globalThis, "mozOutlineRadiusBottomleft", { value: Factory.property("-moz-outline-radius-bottomleft")})
  Object.defineProperty(globalThis, "mozOutlineRadiusBottomright", { value: Factory.property("-moz-outline-radius-bottomright")})
  Object.defineProperty(globalThis, "mozOutlineRadiusTopleft", { value: Factory.property("-moz-outline-radius-topleft")})
  Object.defineProperty(globalThis, "mozOutlineRadiusTopright", { value: Factory.property("-moz-outline-radius-topright")})
  Object.defineProperty(globalThis, "mozOutlineStyle", { value: Factory.property("-moz-outline-style")})
  Object.defineProperty(globalThis, "mozOutlineWidth", { value: Factory.property("-moz-outline-width")})
  Object.defineProperty(globalThis, "mozPaddingEnd", { value: Factory.property("-moz-padding-end")})
  Object.defineProperty(globalThis, "mozPaddingStart", { value: Factory.property("-moz-padding-start")})
  Object.defineProperty(globalThis, "mozPerspective", { value: Factory.property("-moz-perspective")})
  Object.defineProperty(globalThis, "mozPerspectiveOrigin", { value: Factory.property("-moz-perspective-origin")})
  Object.defineProperty(globalThis, "mozStackSizing", { value: Factory.property("-moz-stack-sizing")})
  Object.defineProperty(globalThis, "mozTabSize", { value: Factory.property("-moz-tab-size")})
  Object.defineProperty(globalThis, "mozTextAlignLast", { value: Factory.property("-moz-text-align-last")})
  Object.defineProperty(globalThis, "mozTextBlink", { value: Factory.property("-moz-text-blink")})
  Object.defineProperty(globalThis, "mozTextDecorationColor", { value: Factory.property("-moz-text-decoration-color")})
  Object.defineProperty(globalThis, "mozTextDecorationLine", { value: Factory.property("-moz-text-decoration-line")})
  Object.defineProperty(globalThis, "mozTextDecorationStyle", { value: Factory.property("-moz-text-decoration-style")})
  Object.defineProperty(globalThis, "mozTextSizeAdjust", { value: Factory.property("-moz-text-size-adjust")})
  Object.defineProperty(globalThis, "mozTransform", { value: Factory.property("-moz-transform")})
  Object.defineProperty(globalThis, "mozTransformOrigin", { value: Factory.property("-moz-transform-origin")})
  Object.defineProperty(globalThis, "mozTransformStyle", { value: Factory.property("-moz-transform-style")})
  Object.defineProperty(globalThis, "mozTransition", { value: Factory.property("-moz-transition")})
  Object.defineProperty(globalThis, "mozTransitionDelay", { value: Factory.property("-moz-transition-delay")})
  Object.defineProperty(globalThis, "mozTransitionDuration", { value: Factory.property("-moz-transition-duration")})
  Object.defineProperty(globalThis, "mozTransitionProperty", { value: Factory.property("-moz-transition-property")})
  Object.defineProperty(globalThis, "mozTransitionTimingFunction", { value: Factory.property("-moz-transition-timing-function")})
  Object.defineProperty(globalThis, "mozUserFocus", { value: Factory.property("-moz-user-focus")})
  Object.defineProperty(globalThis, "mozUserInput", { value: Factory.property("-moz-user-input")})
  Object.defineProperty(globalThis, "mozUserModify", { value: Factory.property("-moz-user-modify")})
  Object.defineProperty(globalThis, "mozUserSelect", { value: Factory.property("-moz-user-select")})
  Object.defineProperty(globalThis, "mozWindowDragging", { value: Factory.property("-moz-window-dragging")})
  Object.defineProperty(globalThis, "mozWindowShadow", { value: Factory.property("-moz-window-shadow")})
  Object.defineProperty(globalThis, "msAnimation", { value: Factory.property("-ms-animation")})
  Object.defineProperty(globalThis, "msAnimationDelay", { value: Factory.property("-ms-animation-delay")})
  Object.defineProperty(globalThis, "msAnimationDirection", { value: Factory.property("-ms-animation-direction")})
  Object.defineProperty(globalThis, "msAnimationDuration", { value: Factory.property("-ms-animation-duration")})
  Object.defineProperty(globalThis, "msAnimationFillMode", { value: Factory.property("-ms-animation-fill-mode")})
  Object.defineProperty(globalThis, "msAnimationIterationCount", { value: Factory.property("-ms-animation-iteration-count")})
  Object.defineProperty(globalThis, "msAnimationName", { value: Factory.property("-ms-animation-name")})
  Object.defineProperty(globalThis, "msAnimationPlayState", { value: Factory.property("-ms-animation-play-state")})
  Object.defineProperty(globalThis, "msAnimationTimingFunction", { value: Factory.property("-ms-animation-timing-function")})
  Object.defineProperty(globalThis, "msBackfaceVisibility", { value: Factory.property("-ms-backface-visibility")})
  Object.defineProperty(globalThis, "msBlockProgression", { value: Factory.property("-ms-block-progression")})
  Object.defineProperty(globalThis, "msContentZoomChaining", { value: Factory.property("-ms-content-zoom-chaining")})
  Object.defineProperty(globalThis, "msContentZoomLimit", { value: Factory.property("-ms-content-zoom-limit")})
  Object.defineProperty(globalThis, "msContentZoomLimitMax", { value: Factory.property("-ms-content-zoom-limit-max")})
  Object.defineProperty(globalThis, "msContentZoomLimitMin", { value: Factory.property("-ms-content-zoom-limit-min")})
  Object.defineProperty(globalThis, "msContentZoomSnap", { value: Factory.property("-ms-content-zoom-snap")})
  Object.defineProperty(globalThis, "msContentZoomSnapPoints", { value: Factory.property("-ms-content-zoom-snap-points")})
  Object.defineProperty(globalThis, "msContentZoomSnapType", { value: Factory.property("-ms-content-zoom-snap-type")})
  Object.defineProperty(globalThis, "msContentZooming", { value: Factory.property("-ms-content-zooming")})
  Object.defineProperty(globalThis, "msFilter", { value: Factory.property("-ms-filter")})
  Object.defineProperty(globalThis, "msFlex", { value: Factory.property("-ms-flex")})
  Object.defineProperty(globalThis, "msFlexAlign", { value: Factory.property("-ms-flex-align")})
  Object.defineProperty(globalThis, "msFlexDirection", { value: Factory.property("-ms-flex-direction")})
  Object.defineProperty(globalThis, "msFlexFlow", { value: Factory.property("-ms-flex-flow")})
  Object.defineProperty(globalThis, "msFlexItemAlign", { value: Factory.property("-ms-flex-item-align")})
  Object.defineProperty(globalThis, "msFlexLinePack", { value: Factory.property("-ms-flex-line-pack")})
  Object.defineProperty(globalThis, "msFlexNegative", { value: Factory.property("-ms-flex-negative")})
  Object.defineProperty(globalThis, "msFlexOrder", { value: Factory.property("-ms-flex-order")})
  Object.defineProperty(globalThis, "msFlexPack", { value: Factory.property("-ms-flex-pack")})
  Object.defineProperty(globalThis, "msFlexPositive", { value: Factory.property("-ms-flex-positive")})
  Object.defineProperty(globalThis, "msFlexPreferredSize", { value: Factory.property("-ms-flex-preferred-size")})
  Object.defineProperty(globalThis, "msFlexWrap", { value: Factory.property("-ms-flex-wrap")})
  Object.defineProperty(globalThis, "msFlowFrom", { value: Factory.property("-ms-flow-from")})
  Object.defineProperty(globalThis, "msFlowInto", { value: Factory.property("-ms-flow-into")})
  Object.defineProperty(globalThis, "msFontFeatureSettings", { value: Factory.property("-ms-font-feature-settings")})
  Object.defineProperty(globalThis, "msGridColumn", { value: Factory.property("-ms-grid-column")})
  Object.defineProperty(globalThis, "msGridColumnAlign", { value: Factory.property("-ms-grid-column-align")})
  Object.defineProperty(globalThis, "msGridColumnSpan", { value: Factory.property("-ms-grid-column-span")})
  Object.defineProperty(globalThis, "msGridColumns", { value: Factory.property("-ms-grid-columns")})
  Object.defineProperty(globalThis, "msGridRow", { value: Factory.property("-ms-grid-row")})
  Object.defineProperty(globalThis, "msGridRowAlign", { value: Factory.property("-ms-grid-row-align")})
  Object.defineProperty(globalThis, "msGridRowSpan", { value: Factory.property("-ms-grid-row-span")})
  Object.defineProperty(globalThis, "msGridRows", { value: Factory.property("-ms-grid-rows")})
  Object.defineProperty(globalThis, "msHighContrastAdjust", { value: Factory.property("-ms-high-contrast-adjust")})
  Object.defineProperty(globalThis, "msHyphenateLimitChars", { value: Factory.property("-ms-hyphenate-limit-chars")})
  Object.defineProperty(globalThis, "msHyphenateLimitLines", { value: Factory.property("-ms-hyphenate-limit-lines")})
  Object.defineProperty(globalThis, "msHyphenateLimitZone", { value: Factory.property("-ms-hyphenate-limit-zone")})
  Object.defineProperty(globalThis, "msHyphens", { value: Factory.property("-ms-hyphens")})
  Object.defineProperty(globalThis, "msImeAlign", { value: Factory.property("-ms-ime-align")})
  Object.defineProperty(globalThis, "msInterpolationMode", { value: Factory.property("-ms-interpolation-mode")})
  Object.defineProperty(globalThis, "msOverflowStyle", { value: Factory.property("-ms-overflow-style")})
  Object.defineProperty(globalThis, "msPerspective", { value: Factory.property("-ms-perspective")})
  Object.defineProperty(globalThis, "msPerspectiveOrigin", { value: Factory.property("-ms-perspective-origin")})
  Object.defineProperty(globalThis, "msScrollChaining", { value: Factory.property("-ms-scroll-chaining")})
  Object.defineProperty(globalThis, "msScrollLimit", { value: Factory.property("-ms-scroll-limit")})
  Object.defineProperty(globalThis, "msScrollLimitXMax", { value: Factory.property("-ms-scroll-limit-x-max")})
  Object.defineProperty(globalThis, "msScrollLimitXMin", { value: Factory.property("-ms-scroll-limit-x-min")})
  Object.defineProperty(globalThis, "msScrollLimitYMax", { value: Factory.property("-ms-scroll-limit-y-max")})
  Object.defineProperty(globalThis, "msScrollLimitYMin", { value: Factory.property("-ms-scroll-limit-y-min")})
  Object.defineProperty(globalThis, "msScrollRails", { value: Factory.property("-ms-scroll-rails")})
  Object.defineProperty(globalThis, "msScrollSnapPointsX", { value: Factory.property("-ms-scroll-snap-points-x")})
  Object.defineProperty(globalThis, "msScrollSnapPointsY", { value: Factory.property("-ms-scroll-snap-points-y")})
  Object.defineProperty(globalThis, "msScrollSnapType", { value: Factory.property("-ms-scroll-snap-type")})
  Object.defineProperty(globalThis, "msScrollSnapX", { value: Factory.property("-ms-scroll-snap-x")})
  Object.defineProperty(globalThis, "msScrollSnapY", { value: Factory.property("-ms-scroll-snap-y")})
  Object.defineProperty(globalThis, "msScrollTranslation", { value: Factory.property("-ms-scroll-translation")})
  Object.defineProperty(globalThis, "msTextCombineHorizontal", { value: Factory.property("-ms-text-combine-horizontal")})
  Object.defineProperty(globalThis, "msTextSizeAdjust", { value: Factory.property("-ms-text-size-adjust")})
  Object.defineProperty(globalThis, "msTouchAction", { value: Factory.property("-ms-touch-action")})
  Object.defineProperty(globalThis, "msTouchSelect", { value: Factory.property("-ms-touch-select")})
  Object.defineProperty(globalThis, "msTransform", { value: Factory.property("-ms-transform")})
  Object.defineProperty(globalThis, "msTransformOrigin", { value: Factory.property("-ms-transform-origin")})
  Object.defineProperty(globalThis, "msTransformStyle", { value: Factory.property("-ms-transform-style")})
  Object.defineProperty(globalThis, "msTransition", { value: Factory.property("-ms-transition")})
  Object.defineProperty(globalThis, "msTransitionDelay", { value: Factory.property("-ms-transition-delay")})
  Object.defineProperty(globalThis, "msTransitionDuration", { value: Factory.property("-ms-transition-duration")})
  Object.defineProperty(globalThis, "msTransitionProperty", { value: Factory.property("-ms-transition-property")})
  Object.defineProperty(globalThis, "msTransitionTimingFunction", { value: Factory.property("-ms-transition-timing-function")})
  Object.defineProperty(globalThis, "msUserSelect", { value: Factory.property("-ms-user-select")})
  Object.defineProperty(globalThis, "msWrapFlow", { value: Factory.property("-ms-wrap-flow")})
  Object.defineProperty(globalThis, "msWrapMargin", { value: Factory.property("-ms-wrap-margin")})
  Object.defineProperty(globalThis, "msWrapThrough", { value: Factory.property("-ms-wrap-through")})
  Object.defineProperty(globalThis, "oBorderImage", { value: Factory.property("-o-border-image")})
  Object.defineProperty(globalThis, "oLink", { value: Factory.property("-o-link")})
  Object.defineProperty(globalThis, "oLinkSource", { value: Factory.property("-o-link-source")})
  Object.defineProperty(globalThis, "oObjectFit", { value: Factory.property("-o-object-fit")})
  Object.defineProperty(globalThis, "oObjectPosition", { value: Factory.property("-o-object-position")})
  Object.defineProperty(globalThis, "oTabSize", { value: Factory.property("-o-tab-size")})
  Object.defineProperty(globalThis, "oTableBaseline", { value: Factory.property("-o-table-baseline")})
  Object.defineProperty(globalThis, "oTransform", { value: Factory.property("-o-transform")})
  Object.defineProperty(globalThis, "oTransformOrigin", { value: Factory.property("-o-transform-origin")})
  Object.defineProperty(globalThis, "oTransition", { value: Factory.property("-o-transition")})
  Object.defineProperty(globalThis, "oTransitionDelay", { value: Factory.property("-o-transition-delay")})
  Object.defineProperty(globalThis, "oTransitionDuration", { value: Factory.property("-o-transition-duration")})
  Object.defineProperty(globalThis, "oTransitionProperty", { value: Factory.property("-o-transition-property")})
  Object.defineProperty(globalThis, "oTransitionTimingFunction", { value: Factory.property("-o-transition-timing-function")})
  Object.defineProperty(globalThis, "wapAccesskey", { value: Factory.property("-wap-accesskey")})
  Object.defineProperty(globalThis, "wapInputFormat", { value: Factory.property("-wap-input-format")})
  Object.defineProperty(globalThis, "wapInputRequired", { value: Factory.property("-wap-input-required")})
  Object.defineProperty(globalThis, "wapMarqueeDir", { value: Factory.property("-wap-marquee-dir")})
  Object.defineProperty(globalThis, "wapMarqueeLoop", { value: Factory.property("-wap-marquee-loop")})
  Object.defineProperty(globalThis, "wapMarqueeSpeed", { value: Factory.property("-wap-marquee-speed")})
  Object.defineProperty(globalThis, "wapMarqueeStyle", { value: Factory.property("-wap-marquee-style")})
  Object.defineProperty(globalThis, "webkitAlignContent", { value: Factory.property("-webkit-align-content")})
  Object.defineProperty(globalThis, "webkitAlignItems", { value: Factory.property("-webkit-align-items")})
  Object.defineProperty(globalThis, "webkitAlignSelf", { value: Factory.property("-webkit-align-self")})
  Object.defineProperty(globalThis, "webkitAlt", { value: Factory.property("-webkit-alt")})
  Object.defineProperty(globalThis, "webkitAnimation", { value: Factory.property("-webkit-animation")})
  Object.defineProperty(globalThis, "webkitAnimationDelay", { value: Factory.property("-webkit-animation-delay")})
  Object.defineProperty(globalThis, "webkitAnimationDirection", { value: Factory.property("-webkit-animation-direction")})
  Object.defineProperty(globalThis, "webkitAnimationDuration", { value: Factory.property("-webkit-animation-duration")})
  Object.defineProperty(globalThis, "webkitAnimationFillMode", { value: Factory.property("-webkit-animation-fill-mode")})
  Object.defineProperty(globalThis, "webkitAnimationIterationCount", { value: Factory.property("-webkit-animation-iteration-count")})
  Object.defineProperty(globalThis, "webkitAnimationName", { value: Factory.property("-webkit-animation-name")})
  Object.defineProperty(globalThis, "webkitAnimationPlayState", { value: Factory.property("-webkit-animation-play-state")})
  Object.defineProperty(globalThis, "webkitAnimationTimingFunction", { value: Factory.property("-webkit-animation-timing-function")})
  Object.defineProperty(globalThis, "webkitAnimationTrigger", { value: Factory.property("-webkit-animation-trigger")})
  Object.defineProperty(globalThis, "webkitAppRegion", { value: Factory.property("-webkit-app-region")})
  Object.defineProperty(globalThis, "webkitAppearance", { value: Factory.property("-webkit-appearance")})
  Object.defineProperty(globalThis, "webkitAspectRatio", { value: Factory.property("-webkit-aspect-ratio")})
  Object.defineProperty(globalThis, "webkitBackdropFilter", { value: Factory.property("-webkit-backdrop-filter")})
  Object.defineProperty(globalThis, "webkitBackfaceVisibility", { value: Factory.property("-webkit-backface-visibility")})
  Object.defineProperty(globalThis, "webkitBackground", { value: Factory.property("-webkit-background")})
  Object.defineProperty(globalThis, "webkitBackgroundAttachment", { value: Factory.property("-webkit-background-attachment")})
  Object.defineProperty(globalThis, "webkitBackgroundClip", { value: Factory.property("-webkit-background-clip")})
  Object.defineProperty(globalThis, "webkitBackgroundColor", { value: Factory.property("-webkit-background-color")})
  Object.defineProperty(globalThis, "webkitBackgroundComposite", { value: Factory.property("-webkit-background-composite")})
  Object.defineProperty(globalThis, "webkitBackgroundImage", { value: Factory.property("-webkit-background-image")})
  Object.defineProperty(globalThis, "webkitBackgroundOrigin", { value: Factory.property("-webkit-background-origin")})
  Object.defineProperty(globalThis, "webkitBackgroundPosition", { value: Factory.property("-webkit-background-position")})
  Object.defineProperty(globalThis, "webkitBackgroundPositionX", { value: Factory.property("-webkit-background-position-x")})
  Object.defineProperty(globalThis, "webkitBackgroundPositionY", { value: Factory.property("-webkit-background-position-y")})
  Object.defineProperty(globalThis, "webkitBackgroundRepeat", { value: Factory.property("-webkit-background-repeat")})
  Object.defineProperty(globalThis, "webkitBackgroundSize", { value: Factory.property("-webkit-background-size")})
  Object.defineProperty(globalThis, "webkitBorderAfter", { value: Factory.property("-webkit-border-after")})
  Object.defineProperty(globalThis, "webkitBorderAfterColor", { value: Factory.property("-webkit-border-after-color")})
  Object.defineProperty(globalThis, "webkitBorderAfterStyle", { value: Factory.property("-webkit-border-after-style")})
  Object.defineProperty(globalThis, "webkitBorderAfterWidth", { value: Factory.property("-webkit-border-after-width")})
  Object.defineProperty(globalThis, "webkitBorderBefore", { value: Factory.property("-webkit-border-before")})
  Object.defineProperty(globalThis, "webkitBorderBeforeColor", { value: Factory.property("-webkit-border-before-color")})
  Object.defineProperty(globalThis, "webkitBorderBeforeStyle", { value: Factory.property("-webkit-border-before-style")})
  Object.defineProperty(globalThis, "webkitBorderBeforeWidth", { value: Factory.property("-webkit-border-before-width")})
  Object.defineProperty(globalThis, "webkitBorderBottomLeftRadius", { value: Factory.property("-webkit-border-bottom-left-radius")})
  Object.defineProperty(globalThis, "webkitBorderBottomRightRadius", { value: Factory.property("-webkit-border-bottom-right-radius")})
  Object.defineProperty(globalThis, "webkitBorderEnd", { value: Factory.property("-webkit-border-end")})
  Object.defineProperty(globalThis, "webkitBorderEndColor", { value: Factory.property("-webkit-border-end-color")})
  Object.defineProperty(globalThis, "webkitBorderEndStyle", { value: Factory.property("-webkit-border-end-style")})
  Object.defineProperty(globalThis, "webkitBorderEndWidth", { value: Factory.property("-webkit-border-end-width")})
  Object.defineProperty(globalThis, "webkitBorderFit", { value: Factory.property("-webkit-border-fit")})
  Object.defineProperty(globalThis, "webkitBorderHorizontalSpacing", { value: Factory.property("-webkit-border-horizontal-spacing")})
  Object.defineProperty(globalThis, "webkitBorderImage", { value: Factory.property("-webkit-border-image")})
  Object.defineProperty(globalThis, "webkitBorderImageOutset", { value: Factory.property("-webkit-border-image-outset")})
  Object.defineProperty(globalThis, "webkitBorderImageRepeat", { value: Factory.property("-webkit-border-image-repeat")})
  Object.defineProperty(globalThis, "webkitBorderImageSlice", { value: Factory.property("-webkit-border-image-slice")})
  Object.defineProperty(globalThis, "webkitBorderImageSource", { value: Factory.property("-webkit-border-image-source")})
  Object.defineProperty(globalThis, "webkitBorderImageWidth", { value: Factory.property("-webkit-border-image-width")})
  Object.defineProperty(globalThis, "webkitBorderRadius", { value: Factory.property("-webkit-border-radius")})
  Object.defineProperty(globalThis, "webkitBorderStart", { value: Factory.property("-webkit-border-start")})
  Object.defineProperty(globalThis, "webkitBorderStartColor", { value: Factory.property("-webkit-border-start-color")})
  Object.defineProperty(globalThis, "webkitBorderStartStyle", { value: Factory.property("-webkit-border-start-style")})
  Object.defineProperty(globalThis, "webkitBorderStartWidth", { value: Factory.property("-webkit-border-start-width")})
  Object.defineProperty(globalThis, "webkitBorderTopLeftRadius", { value: Factory.property("-webkit-border-top-left-radius")})
  Object.defineProperty(globalThis, "webkitBorderTopRightRadius", { value: Factory.property("-webkit-border-top-right-radius")})
  Object.defineProperty(globalThis, "webkitBorderVerticalSpacing", { value: Factory.property("-webkit-border-vertical-spacing")})
  Object.defineProperty(globalThis, "webkitBoxAlign", { value: Factory.property("-webkit-box-align")})
  Object.defineProperty(globalThis, "webkitBoxDecorationBreak", { value: Factory.property("-webkit-box-decoration-break")})
  Object.defineProperty(globalThis, "webkitBoxDirection", { value: Factory.property("-webkit-box-direction")})
  Object.defineProperty(globalThis, "webkitBoxFlex", { value: Factory.property("-webkit-box-flex")})
  Object.defineProperty(globalThis, "webkitBoxFlexGroup", { value: Factory.property("-webkit-box-flex-group")})
  Object.defineProperty(globalThis, "webkitBoxLines", { value: Factory.property("-webkit-box-lines")})
  Object.defineProperty(globalThis, "webkitBoxOrdinalGroup", { value: Factory.property("-webkit-box-ordinal-group")})
  Object.defineProperty(globalThis, "webkitBoxOrient", { value: Factory.property("-webkit-box-orient")})
  Object.defineProperty(globalThis, "webkitBoxPack", { value: Factory.property("-webkit-box-pack")})
  Object.defineProperty(globalThis, "webkitBoxReflect", { value: Factory.property("-webkit-box-reflect")})
  Object.defineProperty(globalThis, "webkitBoxShadow", { value: Factory.property("-webkit-box-shadow")})
  Object.defineProperty(globalThis, "webkitBoxSizing", { value: Factory.property("-webkit-box-sizing")})
  Object.defineProperty(globalThis, "webkitClipPath", { value: Factory.property("-webkit-clip-path")})
  Object.defineProperty(globalThis, "webkitColorCorrection", { value: Factory.property("-webkit-color-correction")})
  Object.defineProperty(globalThis, "webkitColumnAxis", { value: Factory.property("-webkit-column-axis")})
  Object.defineProperty(globalThis, "webkitColumnBreakAfter", { value: Factory.property("-webkit-column-break-after")})
  Object.defineProperty(globalThis, "webkitColumnBreakBefore", { value: Factory.property("-webkit-column-break-before")})
  Object.defineProperty(globalThis, "webkitColumnBreakInside", { value: Factory.property("-webkit-column-break-inside")})
  Object.defineProperty(globalThis, "webkitColumnCount", { value: Factory.property("-webkit-column-count")})
  Object.defineProperty(globalThis, "webkitColumnFill", { value: Factory.property("-webkit-column-fill")})
  Object.defineProperty(globalThis, "webkitColumnGap", { value: Factory.property("-webkit-column-gap")})
  Object.defineProperty(globalThis, "webkitColumnProgression", { value: Factory.property("-webkit-column-progression")})
  Object.defineProperty(globalThis, "webkitColumnRule", { value: Factory.property("-webkit-column-rule")})
  Object.defineProperty(globalThis, "webkitColumnRuleColor", { value: Factory.property("-webkit-column-rule-color")})
  Object.defineProperty(globalThis, "webkitColumnRuleStyle", { value: Factory.property("-webkit-column-rule-style")})
  Object.defineProperty(globalThis, "webkitColumnRuleWidth", { value: Factory.property("-webkit-column-rule-width")})
  Object.defineProperty(globalThis, "webkitColumnSpan", { value: Factory.property("-webkit-column-span")})
  Object.defineProperty(globalThis, "webkitColumnWidth", { value: Factory.property("-webkit-column-width")})
  Object.defineProperty(globalThis, "webkitColumns", { value: Factory.property("-webkit-columns")})
  Object.defineProperty(globalThis, "webkitCompositionFillColor", { value: Factory.property("-webkit-composition-fill-color")})
  Object.defineProperty(globalThis, "webkitCompositionFrameColor", { value: Factory.property("-webkit-composition-frame-color")})
  Object.defineProperty(globalThis, "webkitCursorVisibility", { value: Factory.property("-webkit-cursor-visibility")})
  Object.defineProperty(globalThis, "webkitDashboardRegion", { value: Factory.property("-webkit-dashboard-region")})
  Object.defineProperty(globalThis, "webkitFilter", { value: Factory.property("-webkit-filter")})
  Object.defineProperty(globalThis, "webkitFlex", { value: Factory.property("-webkit-flex")})
  Object.defineProperty(globalThis, "webkitFlexAlign", { value: Factory.property("-webkit-flex-align")})
  Object.defineProperty(globalThis, "webkitFlexBasis", { value: Factory.property("-webkit-flex-basis")})
  Object.defineProperty(globalThis, "webkitFlexDirection", { value: Factory.property("-webkit-flex-direction")})
  Object.defineProperty(globalThis, "webkitFlexFlow", { value: Factory.property("-webkit-flex-flow")})
  Object.defineProperty(globalThis, "webkitFlexGrow", { value: Factory.property("-webkit-flex-grow")})
  Object.defineProperty(globalThis, "webkitFlexItemAlign", { value: Factory.property("-webkit-flex-item-align")})
  Object.defineProperty(globalThis, "webkitFlexLinePack", { value: Factory.property("-webkit-flex-line-pack")})
  Object.defineProperty(globalThis, "webkitFlexOrder", { value: Factory.property("-webkit-flex-order")})
  Object.defineProperty(globalThis, "webkitFlexPack", { value: Factory.property("-webkit-flex-pack")})
  Object.defineProperty(globalThis, "webkitFlexShrink", { value: Factory.property("-webkit-flex-shrink")})
  Object.defineProperty(globalThis, "webkitFlexWrap", { value: Factory.property("-webkit-flex-wrap")})
  Object.defineProperty(globalThis, "webkitFlowFrom", { value: Factory.property("-webkit-flow-from")})
  Object.defineProperty(globalThis, "webkitFlowInto", { value: Factory.property("-webkit-flow-into")})
  Object.defineProperty(globalThis, "webkitFontFeatureSettings", { value: Factory.property("-webkit-font-feature-settings")})
  Object.defineProperty(globalThis, "webkitFontKerning", { value: Factory.property("-webkit-font-kerning")})
  Object.defineProperty(globalThis, "webkitFontSizeDelta", { value: Factory.property("-webkit-font-size-delta")})
  Object.defineProperty(globalThis, "webkitFontSmoothing", { value: Factory.property("-webkit-font-smoothing")})
  Object.defineProperty(globalThis, "webkitFontVariantLigatures", { value: Factory.property("-webkit-font-variant-ligatures")})
  Object.defineProperty(globalThis, "webkitGridAfter", { value: Factory.property("-webkit-grid-after")})
  Object.defineProperty(globalThis, "webkitGridAutoColumns", { value: Factory.property("-webkit-grid-auto-columns")})
  Object.defineProperty(globalThis, "webkitGridAutoFlow", { value: Factory.property("-webkit-grid-auto-flow")})
  Object.defineProperty(globalThis, "webkitGridAutoRows", { value: Factory.property("-webkit-grid-auto-rows")})
  Object.defineProperty(globalThis, "webkitGridBefore", { value: Factory.property("-webkit-grid-before")})
  Object.defineProperty(globalThis, "webkitGridColumn", { value: Factory.property("-webkit-grid-column")})
  Object.defineProperty(globalThis, "webkitGridColumns", { value: Factory.property("-webkit-grid-columns")})
  Object.defineProperty(globalThis, "webkitGridEnd", { value: Factory.property("-webkit-grid-end")})
  Object.defineProperty(globalThis, "webkitGridRow", { value: Factory.property("-webkit-grid-row")})
  Object.defineProperty(globalThis, "webkitGridRows", { value: Factory.property("-webkit-grid-rows")})
  Object.defineProperty(globalThis, "webkitGridStart", { value: Factory.property("-webkit-grid-start")})
  Object.defineProperty(globalThis, "webkitHighlight", { value: Factory.property("-webkit-highlight")})
  Object.defineProperty(globalThis, "webkitHyphenateCharacter", { value: Factory.property("-webkit-hyphenate-character")})
  Object.defineProperty(globalThis, "webkitHyphenateLimitAfter", { value: Factory.property("-webkit-hyphenate-limit-after")})
  Object.defineProperty(globalThis, "webkitHyphenateLimitBefore", { value: Factory.property("-webkit-hyphenate-limit-before")})
  Object.defineProperty(globalThis, "webkitHyphenateLimitLines", { value: Factory.property("-webkit-hyphenate-limit-lines")})
  Object.defineProperty(globalThis, "webkitHyphens", { value: Factory.property("-webkit-hyphens")})
  Object.defineProperty(globalThis, "webkitInitialLetter", { value: Factory.property("-webkit-initial-letter")})
  Object.defineProperty(globalThis, "webkitJustifyContent", { value: Factory.property("-webkit-justify-content")})
  Object.defineProperty(globalThis, "webkitJustifyItems", { value: Factory.property("-webkit-justify-items")})
  Object.defineProperty(globalThis, "webkitJustifySelf", { value: Factory.property("-webkit-justify-self")})
  Object.defineProperty(globalThis, "webkitLineAlign", { value: Factory.property("-webkit-line-align")})
  Object.defineProperty(globalThis, "webkitLineBoxContain", { value: Factory.property("-webkit-line-box-contain")})
  Object.defineProperty(globalThis, "webkitLineBreak", { value: Factory.property("-webkit-line-break")})
  Object.defineProperty(globalThis, "webkitLineClamp", { value: Factory.property("-webkit-line-clamp")})
  Object.defineProperty((globalThis as any).webkitLineClamp, "none", { value: Factory.propertyValue("-webkit-line-clamp", "none") })
  Object.defineProperty(globalThis, "webkitLineGrid", { value: Factory.property("-webkit-line-grid")})
  Object.defineProperty(globalThis, "webkitLineGridSnap", { value: Factory.property("-webkit-line-grid-snap")})
  Object.defineProperty(globalThis, "webkitLineSnap", { value: Factory.property("-webkit-line-snap")})
  Object.defineProperty(globalThis, "webkitLocale", { value: Factory.property("-webkit-locale")})
  Object.defineProperty(globalThis, "webkitLogicalHeight", { value: Factory.property("-webkit-logical-height")})
  Object.defineProperty(globalThis, "webkitLogicalWidth", { value: Factory.property("-webkit-logical-width")})
  Object.defineProperty(globalThis, "webkitMarginAfter", { value: Factory.property("-webkit-margin-after")})
  Object.defineProperty(globalThis, "webkitMarginAfterCollapse", { value: Factory.property("-webkit-margin-after-collapse")})
  Object.defineProperty(globalThis, "webkitMarginBefore", { value: Factory.property("-webkit-margin-before")})
  Object.defineProperty(globalThis, "webkitMarginBeforeCollapse", { value: Factory.property("-webkit-margin-before-collapse")})
  Object.defineProperty(globalThis, "webkitMarginBottomCollapse", { value: Factory.property("-webkit-margin-bottom-collapse")})
  Object.defineProperty(globalThis, "webkitMarginCollapse", { value: Factory.property("-webkit-margin-collapse")})
  Object.defineProperty(globalThis, "webkitMarginEnd", { value: Factory.property("-webkit-margin-end")})
  Object.defineProperty(globalThis, "webkitMarginStart", { value: Factory.property("-webkit-margin-start")})
  Object.defineProperty(globalThis, "webkitMarginTopCollapse", { value: Factory.property("-webkit-margin-top-collapse")})
  Object.defineProperty(globalThis, "webkitMarquee", { value: Factory.property("-webkit-marquee")})
  Object.defineProperty(globalThis, "webkitMarqueeDirection", { value: Factory.property("-webkit-marquee-direction")})
  Object.defineProperty(globalThis, "webkitMarqueeIncrement", { value: Factory.property("-webkit-marquee-increment")})
  Object.defineProperty(globalThis, "webkitMarqueeRepetition", { value: Factory.property("-webkit-marquee-repetition")})
  Object.defineProperty(globalThis, "webkitMarqueeSpeed", { value: Factory.property("-webkit-marquee-speed")})
  Object.defineProperty(globalThis, "webkitMarqueeStyle", { value: Factory.property("-webkit-marquee-style")})
  Object.defineProperty(globalThis, "webkitMask", { value: Factory.property("-webkit-mask")})
  Object.defineProperty(globalThis, "webkitMaskAttachment", { value: Factory.property("-webkit-mask-attachment")})
  Object.defineProperty(globalThis, "webkitMaskBoxImage", { value: Factory.property("-webkit-mask-box-image")})
  Object.defineProperty(globalThis, "webkitMaskBoxImageOutset", { value: Factory.property("-webkit-mask-box-image-outset")})
  Object.defineProperty(globalThis, "webkitMaskBoxImageRepeat", { value: Factory.property("-webkit-mask-box-image-repeat")})
  Object.defineProperty(globalThis, "webkitMaskBoxImageSlice", { value: Factory.property("-webkit-mask-box-image-slice")})
  Object.defineProperty(globalThis, "webkitMaskBoxImageSource", { value: Factory.property("-webkit-mask-box-image-source")})
  Object.defineProperty(globalThis, "webkitMaskBoxImageWidth", { value: Factory.property("-webkit-mask-box-image-width")})
  Object.defineProperty(globalThis, "webkitMaskClip", { value: Factory.property("-webkit-mask-clip")})
  Object.defineProperty(globalThis, "webkitMaskComposite", { value: Factory.property("-webkit-mask-composite")})
  Object.defineProperty(globalThis, "webkitMaskImage", { value: Factory.property("-webkit-mask-image")})
  Object.defineProperty(globalThis, "webkitMaskOrigin", { value: Factory.property("-webkit-mask-origin")})
  Object.defineProperty(globalThis, "webkitMaskPosition", { value: Factory.property("-webkit-mask-position")})
  Object.defineProperty(globalThis, "webkitMaskPositionX", { value: Factory.property("-webkit-mask-position-x")})
  Object.defineProperty(globalThis, "webkitMaskPositionY", { value: Factory.property("-webkit-mask-position-y")})
  Object.defineProperty(globalThis, "webkitMaskRepeat", { value: Factory.property("-webkit-mask-repeat")})
  Object.defineProperty(globalThis, "webkitMaskRepeatX", { value: Factory.property("-webkit-mask-repeat-x")})
  Object.defineProperty(globalThis, "webkitMaskRepeatY", { value: Factory.property("-webkit-mask-repeat-y")})
  Object.defineProperty(globalThis, "webkitMaskSize", { value: Factory.property("-webkit-mask-size")})
  Object.defineProperty(globalThis, "webkitMaskSourceType", { value: Factory.property("-webkit-mask-source-type")})
  Object.defineProperty(globalThis, "webkitMatchNearestMailBlockquoteColor", { value: Factory.property("-webkit-match-nearest-mail-blockquote-color")})
  Object.defineProperty(globalThis, "webkitMaxLogicalHeight", { value: Factory.property("-webkit-max-logical-height")})
  Object.defineProperty(globalThis, "webkitMaxLogicalWidth", { value: Factory.property("-webkit-max-logical-width")})
  Object.defineProperty(globalThis, "webkitMinLogicalHeight", { value: Factory.property("-webkit-min-logical-height")})
  Object.defineProperty(globalThis, "webkitMinLogicalWidth", { value: Factory.property("-webkit-min-logical-width")})
  Object.defineProperty(globalThis, "webkitNbspMode", { value: Factory.property("-webkit-nbsp-mode")})
  Object.defineProperty(globalThis, "webkitOpacity", { value: Factory.property("-webkit-opacity")})
  Object.defineProperty(globalThis, "webkitOrder", { value: Factory.property("-webkit-order")})
  Object.defineProperty(globalThis, "webkitOverflowScrolling", { value: Factory.property("-webkit-overflow-scrolling")})
  Object.defineProperty(globalThis, "webkitPaddingAfter", { value: Factory.property("-webkit-padding-after")})
  Object.defineProperty(globalThis, "webkitPaddingBefore", { value: Factory.property("-webkit-padding-before")})
  Object.defineProperty(globalThis, "webkitPaddingEnd", { value: Factory.property("-webkit-padding-end")})
  Object.defineProperty(globalThis, "webkitPaddingStart", { value: Factory.property("-webkit-padding-start")})
  Object.defineProperty(globalThis, "webkitPerspective", { value: Factory.property("-webkit-perspective")})
  Object.defineProperty(globalThis, "webkitPerspectiveOrigin", { value: Factory.property("-webkit-perspective-origin")})
  Object.defineProperty(globalThis, "webkitPerspectiveOriginX", { value: Factory.property("-webkit-perspective-origin-x")})
  Object.defineProperty(globalThis, "webkitPerspectiveOriginY", { value: Factory.property("-webkit-perspective-origin-y")})
  Object.defineProperty(globalThis, "webkitPrintColorAdjust", { value: Factory.property("-webkit-print-color-adjust")})
  Object.defineProperty(globalThis, "webkitRegionBreakAfter", { value: Factory.property("-webkit-region-break-after")})
  Object.defineProperty(globalThis, "webkitRegionBreakBefore", { value: Factory.property("-webkit-region-break-before")})
  Object.defineProperty(globalThis, "webkitRegionBreakInside", { value: Factory.property("-webkit-region-break-inside")})
  Object.defineProperty(globalThis, "webkitRegionFragment", { value: Factory.property("-webkit-region-fragment")})
  Object.defineProperty(globalThis, "webkitRegionOverflow", { value: Factory.property("-webkit-region-overflow")})
  Object.defineProperty(globalThis, "webkitRtlOrdering", { value: Factory.property("-webkit-rtl-ordering")})
  Object.defineProperty(globalThis, "webkitRubyPosition", { value: Factory.property("-webkit-ruby-position")})
  Object.defineProperty(globalThis, "webkitScrollSnapCoordinate", { value: Factory.property("-webkit-scroll-snap-coordinate")})
  Object.defineProperty(globalThis, "webkitScrollSnapDestination", { value: Factory.property("-webkit-scroll-snap-destination")})
  Object.defineProperty(globalThis, "webkitScrollSnapPointsX", { value: Factory.property("-webkit-scroll-snap-points-x")})
  Object.defineProperty(globalThis, "webkitScrollSnapPointsY", { value: Factory.property("-webkit-scroll-snap-points-y")})
  Object.defineProperty(globalThis, "webkitScrollSnapType", { value: Factory.property("-webkit-scroll-snap-type")})
  Object.defineProperty(globalThis, "webkitShapeImageThreshold", { value: Factory.property("-webkit-shape-image-threshold")})
  Object.defineProperty(globalThis, "webkitShapeInside", { value: Factory.property("-webkit-shape-inside")})
  Object.defineProperty(globalThis, "webkitShapeMargin", { value: Factory.property("-webkit-shape-margin")})
  Object.defineProperty(globalThis, "webkitShapeOutside", { value: Factory.property("-webkit-shape-outside")})
  Object.defineProperty(globalThis, "webkitShapePadding", { value: Factory.property("-webkit-shape-padding")})
  Object.defineProperty(globalThis, "webkitSvgShadow", { value: Factory.property("-webkit-svg-shadow")})
  Object.defineProperty(globalThis, "webkitTapHighlightColor", { value: Factory.property("-webkit-tap-highlight-color")})
  Object.defineProperty(globalThis, "webkitTextCombine", { value: Factory.property("-webkit-text-combine")})
  Object.defineProperty(globalThis, "webkitTextDecoration", { value: Factory.property("-webkit-text-decoration")})
  Object.defineProperty(globalThis, "webkitTextDecorationColor", { value: Factory.property("-webkit-text-decoration-color")})
  Object.defineProperty(globalThis, "webkitTextDecorationLine", { value: Factory.property("-webkit-text-decoration-line")})
  Object.defineProperty(globalThis, "webkitTextDecorationSkip", { value: Factory.property("-webkit-text-decoration-skip")})
  Object.defineProperty(globalThis, "webkitTextDecorationStyle", { value: Factory.property("-webkit-text-decoration-style")})
  Object.defineProperty(globalThis, "webkitTextDecorationsInEffect", { value: Factory.property("-webkit-text-decorations-in-effect")})
  Object.defineProperty(globalThis, "webkitTextEmphasis", { value: Factory.property("-webkit-text-emphasis")})
  Object.defineProperty(globalThis, "webkitTextEmphasisColor", { value: Factory.property("-webkit-text-emphasis-color")})
  Object.defineProperty(globalThis, "webkitTextEmphasisPosition", { value: Factory.property("-webkit-text-emphasis-position")})
  Object.defineProperty(globalThis, "webkitTextEmphasisStyle", { value: Factory.property("-webkit-text-emphasis-style")})
  Object.defineProperty(globalThis, "webkitTextFillColor", { value: Factory.property("-webkit-text-fill-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).webkitTextFillColor, color, { value: Factory.propertyValue("-webkit-text-fill-color", color) })
  }
  Object.defineProperty(globalThis, "webkitTextOrientation", { value: Factory.property("-webkit-text-orientation")})
  Object.defineProperty(globalThis, "webkitTextSecurity", { value: Factory.property("-webkit-text-security")})
  Object.defineProperty(globalThis, "webkitTextSizeAdjust", { value: Factory.property("-webkit-text-size-adjust")})
  Object.defineProperty(globalThis, "webkitTextStroke", { value: Factory.property("-webkit-text-stroke")})
  Object.defineProperty((globalThis as any).webkitTextStroke, "thin", { value: Factory.propertyValue("-webkit-text-stroke", "thin") })
  Object.defineProperty((globalThis as any).webkitTextStroke, "medium", { value: Factory.propertyValue("-webkit-text-stroke", "medium") })
  Object.defineProperty((globalThis as any).webkitTextStroke, "thick", { value: Factory.propertyValue("-webkit-text-stroke", "thick") })
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).webkitTextStroke, color, { value: Factory.propertyValue("-webkit-text-stroke", color) })
  }
  Object.defineProperty(globalThis, "webkitTextStrokeColor", { value: Factory.property("-webkit-text-stroke-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).webkitTextStrokeColor, color, { value: Factory.propertyValue("-webkit-text-stroke-color", color) })
  }
  Object.defineProperty(globalThis, "webkitTextStrokeWidth", { value: Factory.property("-webkit-text-stroke-width")})
  Object.defineProperty((globalThis as any).webkitTextStrokeWidth, "thin", { value: Factory.propertyValue("-webkit-text-stroke-width", "thin") })
  Object.defineProperty((globalThis as any).webkitTextStrokeWidth, "medium", { value: Factory.propertyValue("-webkit-text-stroke-width", "medium") })
  Object.defineProperty((globalThis as any).webkitTextStrokeWidth, "thick", { value: Factory.propertyValue("-webkit-text-stroke-width", "thick") })
  Object.defineProperty(globalThis, "webkitTextUnderlinePosition", { value: Factory.property("-webkit-text-underline-position")})
  Object.defineProperty(globalThis, "webkitTextZoom", { value: Factory.property("-webkit-text-zoom")})
  Object.defineProperty(globalThis, "webkitTouchCallout", { value: Factory.property("-webkit-touch-callout")})
  Object.defineProperty(globalThis, "webkitTransform", { value: Factory.property("-webkit-transform")})
  Object.defineProperty(globalThis, "webkitTransformOrigin", { value: Factory.property("-webkit-transform-origin")})
  Object.defineProperty(globalThis, "webkitTransformOriginX", { value: Factory.property("-webkit-transform-origin-x")})
  Object.defineProperty(globalThis, "webkitTransformOriginY", { value: Factory.property("-webkit-transform-origin-y")})
  Object.defineProperty(globalThis, "webkitTransformOriginZ", { value: Factory.property("-webkit-transform-origin-z")})
  Object.defineProperty(globalThis, "webkitTransformStyle", { value: Factory.property("-webkit-transform-style")})
  Object.defineProperty(globalThis, "webkitTransition", { value: Factory.property("-webkit-transition")})
  Object.defineProperty(globalThis, "webkitTransitionDelay", { value: Factory.property("-webkit-transition-delay")})
  Object.defineProperty(globalThis, "webkitTransitionDuration", { value: Factory.property("-webkit-transition-duration")})
  Object.defineProperty(globalThis, "webkitTransitionProperty", { value: Factory.property("-webkit-transition-property")})
  Object.defineProperty(globalThis, "webkitTransitionTimingFunction", { value: Factory.property("-webkit-transition-timing-function")})
  Object.defineProperty(globalThis, "webkitUserDrag", { value: Factory.property("-webkit-user-drag")})
  Object.defineProperty(globalThis, "webkitUserModify", { value: Factory.property("-webkit-user-modify")})
  Object.defineProperty(globalThis, "webkitUserSelect", { value: Factory.property("-webkit-user-select")})
  Object.defineProperty(globalThis, "webkitWidgetRegion", { value: Factory.property("-webkit-widget-region")})
  Object.defineProperty(globalThis, "webkitWrap", { value: Factory.property("-webkit-wrap")})
  Object.defineProperty(globalThis, "webkitWrapFlow", { value: Factory.property("-webkit-wrap-flow")})
  Object.defineProperty(globalThis, "webkitWrapMargin", { value: Factory.property("-webkit-wrap-margin")})
  Object.defineProperty(globalThis, "webkitWrapPadding", { value: Factory.property("-webkit-wrap-padding")})
  Object.defineProperty(globalThis, "webkitWrapShapeInside", { value: Factory.property("-webkit-wrap-shape-inside")})
  Object.defineProperty(globalThis, "webkitWrapShapeOutside", { value: Factory.property("-webkit-wrap-shape-outside")})
  Object.defineProperty(globalThis, "webkitWrapThrough", { value: Factory.property("-webkit-wrap-through")})
  Object.defineProperty(globalThis, "webkitWritingMode", { value: Factory.property("-webkit-writing-mode")})
  Object.defineProperty(globalThis, "accelerator", { value: Factory.property("accelerator")})
  Object.defineProperty(globalThis, "accentColor", { value: Factory.property("accent-color")})
  Object.defineProperty((globalThis as any).accentColor, "auto", { value: Factory.propertyValue("accent-color", "auto") })
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).accentColor, color, { value: Factory.propertyValue("accent-color", color) })
  }
  Object.defineProperty(globalThis, "additiveSymbols", { value: Factory.property("additive-symbols")})
  Object.defineProperty(globalThis, "alignContent", { value: Factory.property("align-content")})
  Object.defineProperty((globalThis as any).alignContent, "normal", { value: Factory.propertyValue("align-content", "normal") })
  Object.defineProperty((globalThis as any).alignContent, "baseline", { value: Factory.propertyValue("align-content", "baseline") })
  Object.defineProperty((globalThis as any).alignContent, "first_baseline", { value: Factory.propertyValue("align-content", "first baseline") })
  Object.defineProperty((globalThis as any).alignContent, "last_baseline", { value: Factory.propertyValue("align-content", "last baseline") })
  Object.defineProperty((globalThis as any).alignContent, "spaceBetween", { value: Factory.propertyValue("align-content", "space-between") })
  Object.defineProperty((globalThis as any).alignContent, "spaceAround", { value: Factory.propertyValue("align-content", "space-around") })
  Object.defineProperty((globalThis as any).alignContent, "spaceEvenly", { value: Factory.propertyValue("align-content", "space-evenly") })
  Object.defineProperty((globalThis as any).alignContent, "stretch", { value: Factory.propertyValue("align-content", "stretch") })
  Object.defineProperty((globalThis as any).alignContent, "safe", { value: Factory.propertyValue("align-content", "safe") })
  Object.defineProperty((globalThis as any).alignContent, "unsafe", { value: Factory.propertyValue("align-content", "unsafe") })
  Object.defineProperty((globalThis as any).alignContent, "center", { value: Factory.propertyValue("align-content", "center") })
  Object.defineProperty((globalThis as any).alignContent, "start", { value: Factory.propertyValue("align-content", "start") })
  Object.defineProperty((globalThis as any).alignContent, "end", { value: Factory.propertyValue("align-content", "end") })
  Object.defineProperty((globalThis as any).alignContent, "flexStart", { value: Factory.propertyValue("align-content", "flex-start") })
  Object.defineProperty((globalThis as any).alignContent, "flexEnd", { value: Factory.propertyValue("align-content", "flex-end") })
  Object.defineProperty(globalThis, "alignItems", { value: Factory.property("align-items")})
  Object.defineProperty((globalThis as any).alignItems, "normal", { value: Factory.propertyValue("align-items", "normal") })
  Object.defineProperty((globalThis as any).alignItems, "stretch", { value: Factory.propertyValue("align-items", "stretch") })
  Object.defineProperty((globalThis as any).alignItems, "baseline", { value: Factory.propertyValue("align-items", "baseline") })
  Object.defineProperty((globalThis as any).alignItems, "first_baseline", { value: Factory.propertyValue("align-items", "first baseline") })
  Object.defineProperty((globalThis as any).alignItems, "last_baseline", { value: Factory.propertyValue("align-items", "last baseline") })
  Object.defineProperty((globalThis as any).alignItems, "safe", { value: Factory.propertyValue("align-items", "safe") })
  Object.defineProperty((globalThis as any).alignItems, "unsafe", { value: Factory.propertyValue("align-items", "unsafe") })
  Object.defineProperty((globalThis as any).alignItems, "center", { value: Factory.propertyValue("align-items", "center") })
  Object.defineProperty((globalThis as any).alignItems, "start", { value: Factory.propertyValue("align-items", "start") })
  Object.defineProperty((globalThis as any).alignItems, "end", { value: Factory.propertyValue("align-items", "end") })
  Object.defineProperty((globalThis as any).alignItems, "selfStart", { value: Factory.propertyValue("align-items", "self-start") })
  Object.defineProperty((globalThis as any).alignItems, "selfEnd", { value: Factory.propertyValue("align-items", "self-end") })
  Object.defineProperty((globalThis as any).alignItems, "flexStart", { value: Factory.propertyValue("align-items", "flex-start") })
  Object.defineProperty((globalThis as any).alignItems, "flexEnd", { value: Factory.propertyValue("align-items", "flex-end") })
  Object.defineProperty(globalThis, "alignSelf", { value: Factory.property("align-self")})
  Object.defineProperty((globalThis as any).alignSelf, "auto", { value: Factory.propertyValue("align-self", "auto") })
  Object.defineProperty((globalThis as any).alignSelf, "normal", { value: Factory.propertyValue("align-self", "normal") })
  Object.defineProperty((globalThis as any).alignSelf, "stretch", { value: Factory.propertyValue("align-self", "stretch") })
  Object.defineProperty((globalThis as any).alignSelf, "baseline", { value: Factory.propertyValue("align-self", "baseline") })
  Object.defineProperty((globalThis as any).alignSelf, "first_baseline", { value: Factory.propertyValue("align-self", "first baseline") })
  Object.defineProperty((globalThis as any).alignSelf, "last_baseline", { value: Factory.propertyValue("align-self", "last baseline") })
  Object.defineProperty((globalThis as any).alignSelf, "safe", { value: Factory.propertyValue("align-self", "safe") })
  Object.defineProperty((globalThis as any).alignSelf, "unsafe", { value: Factory.propertyValue("align-self", "unsafe") })
  Object.defineProperty((globalThis as any).alignSelf, "center", { value: Factory.propertyValue("align-self", "center") })
  Object.defineProperty((globalThis as any).alignSelf, "start", { value: Factory.propertyValue("align-self", "start") })
  Object.defineProperty((globalThis as any).alignSelf, "end", { value: Factory.propertyValue("align-self", "end") })
  Object.defineProperty((globalThis as any).alignSelf, "selfStart", { value: Factory.propertyValue("align-self", "self-start") })
  Object.defineProperty((globalThis as any).alignSelf, "selfEnd", { value: Factory.propertyValue("align-self", "self-end") })
  Object.defineProperty((globalThis as any).alignSelf, "flexStart", { value: Factory.propertyValue("align-self", "flex-start") })
  Object.defineProperty((globalThis as any).alignSelf, "flexEnd", { value: Factory.propertyValue("align-self", "flex-end") })
  Object.defineProperty(globalThis, "alignTracks", { value: Factory.property("align-tracks")})
  Object.defineProperty((globalThis as any).alignTracks, "normal", { value: Factory.propertyValue("align-tracks", "normal") })
  Object.defineProperty((globalThis as any).alignTracks, "baseline", { value: Factory.propertyValue("align-tracks", "baseline") })
  Object.defineProperty((globalThis as any).alignTracks, "first_baseline", { value: Factory.propertyValue("align-tracks", "first baseline") })
  Object.defineProperty((globalThis as any).alignTracks, "last_baseline", { value: Factory.propertyValue("align-tracks", "last baseline") })
  Object.defineProperty((globalThis as any).alignTracks, "spaceBetween", { value: Factory.propertyValue("align-tracks", "space-between") })
  Object.defineProperty((globalThis as any).alignTracks, "spaceAround", { value: Factory.propertyValue("align-tracks", "space-around") })
  Object.defineProperty((globalThis as any).alignTracks, "spaceEvenly", { value: Factory.propertyValue("align-tracks", "space-evenly") })
  Object.defineProperty((globalThis as any).alignTracks, "stretch", { value: Factory.propertyValue("align-tracks", "stretch") })
  Object.defineProperty((globalThis as any).alignTracks, "safe", { value: Factory.propertyValue("align-tracks", "safe") })
  Object.defineProperty((globalThis as any).alignTracks, "unsafe", { value: Factory.propertyValue("align-tracks", "unsafe") })
  Object.defineProperty((globalThis as any).alignTracks, "center", { value: Factory.propertyValue("align-tracks", "center") })
  Object.defineProperty((globalThis as any).alignTracks, "start", { value: Factory.propertyValue("align-tracks", "start") })
  Object.defineProperty((globalThis as any).alignTracks, "end", { value: Factory.propertyValue("align-tracks", "end") })
  Object.defineProperty((globalThis as any).alignTracks, "flexStart", { value: Factory.propertyValue("align-tracks", "flex-start") })
  Object.defineProperty((globalThis as any).alignTracks, "flexEnd", { value: Factory.propertyValue("align-tracks", "flex-end") })
  Object.defineProperty(globalThis, "alignmentBaseline", { value: Factory.property("alignment-baseline")})
  Object.defineProperty((globalThis as any).alignmentBaseline, "baseline", { value: Factory.propertyValue("alignment-baseline", "baseline") })
  Object.defineProperty((globalThis as any).alignmentBaseline, "textBottom", { value: Factory.propertyValue("alignment-baseline", "text-bottom") })
  Object.defineProperty((globalThis as any).alignmentBaseline, "alphabetic", { value: Factory.propertyValue("alignment-baseline", "alphabetic") })
  Object.defineProperty((globalThis as any).alignmentBaseline, "ideographic", { value: Factory.propertyValue("alignment-baseline", "ideographic") })
  Object.defineProperty((globalThis as any).alignmentBaseline, "middle", { value: Factory.propertyValue("alignment-baseline", "middle") })
  Object.defineProperty((globalThis as any).alignmentBaseline, "central", { value: Factory.propertyValue("alignment-baseline", "central") })
  Object.defineProperty((globalThis as any).alignmentBaseline, "mathematical", { value: Factory.propertyValue("alignment-baseline", "mathematical") })
  Object.defineProperty((globalThis as any).alignmentBaseline, "textTop", { value: Factory.propertyValue("alignment-baseline", "text-top") })
  Object.defineProperty((globalThis as any).alignmentBaseline, "textBeforeEdge", { value: Factory.propertyValue("alignment-baseline", "text-before-edge") })
  Object.defineProperty((globalThis as any).alignmentBaseline, "textAfterEdge", { value: Factory.propertyValue("alignment-baseline", "text-after-edge") })
  Object.defineProperty(globalThis, "all", { value: Factory.property("all")})
  Object.defineProperty((globalThis as any).all, "initial", { value: Factory.propertyValue("all", "initial") })
  Object.defineProperty((globalThis as any).all, "inherit", { value: Factory.propertyValue("all", "inherit") })
  Object.defineProperty((globalThis as any).all, "unset", { value: Factory.propertyValue("all", "unset") })
  Object.defineProperty((globalThis as any).all, "revert", { value: Factory.propertyValue("all", "revert") })
  Object.defineProperty((globalThis as any).all, "revertLayer", { value: Factory.propertyValue("all", "revert-layer") })
  Object.defineProperty(globalThis, "alt", { value: Factory.property("alt")})
  Object.defineProperty(globalThis, "anchorDefault", { value: Factory.property("anchor-default")})
  Object.defineProperty(globalThis, "anchorName", { value: Factory.property("anchor-name")})
  Object.defineProperty((globalThis as any).anchorName, "none", { value: Factory.propertyValue("anchor-name", "none") })
  Object.defineProperty(globalThis, "anchorScroll", { value: Factory.property("anchor-scroll")})
  Object.defineProperty((globalThis as any).anchorScroll, "none", { value: Factory.propertyValue("anchor-scroll", "none") })
  Object.defineProperty((globalThis as any).anchorScroll, "_default", { value: Factory.propertyValue("anchor-scroll", "default") })
  Object.defineProperty(globalThis, "animation", { value: Factory.property("animation")})
  Object.defineProperty(globalThis, "animationComposition", { value: Factory.property("animation-composition")})
  Object.defineProperty(globalThis, "animationDelay", { value: Factory.property("animation-delay")})
  Object.defineProperty(globalThis, "animationDelayEnd", { value: Factory.property("animation-delay-end")})
  Object.defineProperty(globalThis, "animationDelayStart", { value: Factory.property("animation-delay-start")})
  Object.defineProperty(globalThis, "animationDirection", { value: Factory.property("animation-direction")})
  Object.defineProperty((globalThis as any).animationDirection, "normal", { value: Factory.propertyValue("animation-direction", "normal") })
  Object.defineProperty((globalThis as any).animationDirection, "reverse", { value: Factory.propertyValue("animation-direction", "reverse") })
  Object.defineProperty((globalThis as any).animationDirection, "alternate", { value: Factory.propertyValue("animation-direction", "alternate") })
  Object.defineProperty((globalThis as any).animationDirection, "alternateReverse", { value: Factory.propertyValue("animation-direction", "alternate-reverse") })
  Object.defineProperty(globalThis, "animationDuration", { value: Factory.property("animation-duration")})
  Object.defineProperty(globalThis, "animationFillMode", { value: Factory.property("animation-fill-mode")})
  Object.defineProperty((globalThis as any).animationFillMode, "none", { value: Factory.propertyValue("animation-fill-mode", "none") })
  Object.defineProperty((globalThis as any).animationFillMode, "forwards", { value: Factory.propertyValue("animation-fill-mode", "forwards") })
  Object.defineProperty((globalThis as any).animationFillMode, "backwards", { value: Factory.propertyValue("animation-fill-mode", "backwards") })
  Object.defineProperty((globalThis as any).animationFillMode, "both", { value: Factory.propertyValue("animation-fill-mode", "both") })
  Object.defineProperty(globalThis, "animationIterationCount", { value: Factory.property("animation-iteration-count")})
  Object.defineProperty((globalThis as any).animationIterationCount, "infinite", { value: Factory.propertyValue("animation-iteration-count", "infinite") })
  Object.defineProperty(globalThis, "animationName", { value: Factory.property("animation-name")})
  Object.defineProperty((globalThis as any).animationName, "none", { value: Factory.propertyValue("animation-name", "none") })
  Object.defineProperty(globalThis, "animationPlayState", { value: Factory.property("animation-play-state")})
  Object.defineProperty((globalThis as any).animationPlayState, "running", { value: Factory.propertyValue("animation-play-state", "running") })
  Object.defineProperty((globalThis as any).animationPlayState, "paused", { value: Factory.propertyValue("animation-play-state", "paused") })
  Object.defineProperty(globalThis, "animationRange", { value: Factory.property("animation-range")})
  Object.defineProperty(globalThis, "animationRangeEnd", { value: Factory.property("animation-range-end")})
  Object.defineProperty((globalThis as any).animationRangeEnd, "normal", { value: Factory.propertyValue("animation-range-end", "normal") })
  Object.defineProperty(globalThis, "animationRangeStart", { value: Factory.property("animation-range-start")})
  Object.defineProperty((globalThis as any).animationRangeStart, "normal", { value: Factory.propertyValue("animation-range-start", "normal") })
  Object.defineProperty(globalThis, "animationTimeline", { value: Factory.property("animation-timeline")})
  Object.defineProperty((globalThis as any).animationTimeline, "auto", { value: Factory.propertyValue("animation-timeline", "auto") })
  Object.defineProperty((globalThis as any).animationTimeline, "none", { value: Factory.propertyValue("animation-timeline", "none") })
  Object.defineProperty(globalThis, "animationTimingFunction", { value: Factory.property("animation-timing-function")})
  Object.defineProperty((globalThis as any).animationTimingFunction, "linear", { value: Factory.propertyValue("animation-timing-function", "linear") })
  Object.defineProperty(globalThis, "appRegion", { value: Factory.property("app-region")})
  Object.defineProperty(globalThis, "appearance", { value: Factory.property("appearance")})
  Object.defineProperty((globalThis as any).appearance, "none", { value: Factory.propertyValue("appearance", "none") })
  Object.defineProperty((globalThis as any).appearance, "auto", { value: Factory.propertyValue("appearance", "auto") })
  Object.defineProperty((globalThis as any).appearance, "searchfield", { value: Factory.propertyValue("appearance", "searchfield") })
  Object.defineProperty((globalThis as any).appearance, "textarea", { value: Factory.propertyValue("appearance", "textarea") })
  Object.defineProperty((globalThis as any).appearance, "pushButton", { value: Factory.propertyValue("appearance", "push-button") })
  Object.defineProperty((globalThis as any).appearance, "sliderHorizontal", { value: Factory.propertyValue("appearance", "slider-horizontal") })
  Object.defineProperty((globalThis as any).appearance, "checkbox", { value: Factory.propertyValue("appearance", "checkbox") })
  Object.defineProperty((globalThis as any).appearance, "radio", { value: Factory.propertyValue("appearance", "radio") })
  Object.defineProperty((globalThis as any).appearance, "squareButton", { value: Factory.propertyValue("appearance", "square-button") })
  Object.defineProperty((globalThis as any).appearance, "menulist", { value: Factory.propertyValue("appearance", "menulist") })
  Object.defineProperty((globalThis as any).appearance, "listbox", { value: Factory.propertyValue("appearance", "listbox") })
  Object.defineProperty((globalThis as any).appearance, "meter", { value: Factory.propertyValue("appearance", "meter") })
  Object.defineProperty((globalThis as any).appearance, "progressBar", { value: Factory.propertyValue("appearance", "progress-bar") })
  Object.defineProperty((globalThis as any).appearance, "button", { value: Factory.propertyValue("appearance", "button") })
  Object.defineProperty((globalThis as any).appearance, "textfield", { value: Factory.propertyValue("appearance", "textfield") })
  Object.defineProperty((globalThis as any).appearance, "menulistButton", { value: Factory.propertyValue("appearance", "menulist-button") })
  Object.defineProperty(globalThis, "ascentOverride", { value: Factory.property("ascent-override")})
  Object.defineProperty(globalThis, "aspectRatio", { value: Factory.property("aspect-ratio")})
  Object.defineProperty((globalThis as any).aspectRatio, "auto", { value: Factory.propertyValue("aspect-ratio", "auto") })
  Object.defineProperty(globalThis, "audioLevel", { value: Factory.property("audio-level")})
  Object.defineProperty(globalThis, "azimuth", { value: Factory.property("azimuth")})
  Object.defineProperty(globalThis, "backdropFilter", { value: Factory.property("backdrop-filter")})
  Object.defineProperty((globalThis as any).backdropFilter, "none", { value: Factory.propertyValue("backdrop-filter", "none") })
  Object.defineProperty(globalThis, "backfaceVisibility", { value: Factory.property("backface-visibility")})
  Object.defineProperty((globalThis as any).backfaceVisibility, "visible", { value: Factory.propertyValue("backface-visibility", "visible") })
  Object.defineProperty((globalThis as any).backfaceVisibility, "hidden", { value: Factory.propertyValue("backface-visibility", "hidden") })
  Object.defineProperty(globalThis, "background", { value: Factory.property("background")})
  Object.defineProperty(globalThis, "backgroundAttachment", { value: Factory.property("background-attachment")})
  Object.defineProperty((globalThis as any).backgroundAttachment, "fixed", { value: Factory.propertyValue("background-attachment", "fixed") })
  Object.defineProperty((globalThis as any).backgroundAttachment, "local", { value: Factory.propertyValue("background-attachment", "local") })
  Object.defineProperty((globalThis as any).backgroundAttachment, "scroll", { value: Factory.propertyValue("background-attachment", "scroll") })
  Object.defineProperty(globalThis, "backgroundBlendMode", { value: Factory.property("background-blend-mode")})
  Object.defineProperty(globalThis, "backgroundClip", { value: Factory.property("background-clip")})
  Object.defineProperty((globalThis as any).backgroundClip, "borderBox", { value: Factory.propertyValue("background-clip", "border-box") })
  Object.defineProperty((globalThis as any).backgroundClip, "paddingBox", { value: Factory.propertyValue("background-clip", "padding-box") })
  Object.defineProperty((globalThis as any).backgroundClip, "contentBox", { value: Factory.propertyValue("background-clip", "content-box") })
  Object.defineProperty((globalThis as any).backgroundClip, "text", { value: Factory.propertyValue("background-clip", "text") })
  Object.defineProperty((globalThis as any).backgroundClip, "border", { value: Factory.propertyValue("background-clip", "border") })
  Object.defineProperty(globalThis, "backgroundColor", { value: Factory.property("background-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).backgroundColor, color, { value: Factory.propertyValue("background-color", color) })
  }
  Object.defineProperty(globalThis, "backgroundImage", { value: Factory.property("background-image")})
  Object.defineProperty((globalThis as any).backgroundImage, "none", { value: Factory.propertyValue("background-image", "none") })
  Object.defineProperty(globalThis, "backgroundOrigin", { value: Factory.property("background-origin")})
  Object.defineProperty((globalThis as any).backgroundOrigin, "paddingBox", { value: Factory.propertyValue("background-origin", "padding-box") })
  Object.defineProperty((globalThis as any).backgroundOrigin, "borderBox", { value: Factory.propertyValue("background-origin", "border-box") })
  Object.defineProperty((globalThis as any).backgroundOrigin, "contentBox", { value: Factory.propertyValue("background-origin", "content-box") })
  Object.defineProperty(globalThis, "backgroundPosition", { value: Factory.property("background-position")})
  Object.defineProperty((globalThis as any).backgroundPosition, "top", { value: Factory.propertyValue("background-position", "top") })
  Object.defineProperty((globalThis as any).backgroundPosition, "right", { value: Factory.propertyValue("background-position", "right") })
  Object.defineProperty((globalThis as any).backgroundPosition, "bottom", { value: Factory.propertyValue("background-position", "bottom") })
  Object.defineProperty((globalThis as any).backgroundPosition, "left", { value: Factory.propertyValue("background-position", "left") })
  Object.defineProperty((globalThis as any).backgroundPosition, "center", { value: Factory.propertyValue("background-position", "center") })
  Object.defineProperty(globalThis, "backgroundPositionBlock", { value: Factory.property("background-position-block")})
  Object.defineProperty((globalThis as any).backgroundPositionBlock, "center", { value: Factory.propertyValue("background-position-block", "center") })
  Object.defineProperty((globalThis as any).backgroundPositionBlock, "start", { value: Factory.propertyValue("background-position-block", "start") })
  Object.defineProperty((globalThis as any).backgroundPositionBlock, "end", { value: Factory.propertyValue("background-position-block", "end") })
  Object.defineProperty(globalThis, "backgroundPositionInline", { value: Factory.property("background-position-inline")})
  Object.defineProperty((globalThis as any).backgroundPositionInline, "center", { value: Factory.propertyValue("background-position-inline", "center") })
  Object.defineProperty((globalThis as any).backgroundPositionInline, "start", { value: Factory.propertyValue("background-position-inline", "start") })
  Object.defineProperty((globalThis as any).backgroundPositionInline, "end", { value: Factory.propertyValue("background-position-inline", "end") })
  Object.defineProperty(globalThis, "backgroundPositionX", { value: Factory.property("background-position-x")})
  Object.defineProperty((globalThis as any).backgroundPositionX, "center", { value: Factory.propertyValue("background-position-x", "center") })
  Object.defineProperty((globalThis as any).backgroundPositionX, "left", { value: Factory.propertyValue("background-position-x", "left") })
  Object.defineProperty((globalThis as any).backgroundPositionX, "right", { value: Factory.propertyValue("background-position-x", "right") })
  Object.defineProperty((globalThis as any).backgroundPositionX, "xStart", { value: Factory.propertyValue("background-position-x", "x-start") })
  Object.defineProperty((globalThis as any).backgroundPositionX, "xEnd", { value: Factory.propertyValue("background-position-x", "x-end") })
  Object.defineProperty(globalThis, "backgroundPositionY", { value: Factory.property("background-position-y")})
  Object.defineProperty((globalThis as any).backgroundPositionY, "center", { value: Factory.propertyValue("background-position-y", "center") })
  Object.defineProperty((globalThis as any).backgroundPositionY, "top", { value: Factory.propertyValue("background-position-y", "top") })
  Object.defineProperty((globalThis as any).backgroundPositionY, "bottom", { value: Factory.propertyValue("background-position-y", "bottom") })
  Object.defineProperty((globalThis as any).backgroundPositionY, "yStart", { value: Factory.propertyValue("background-position-y", "y-start") })
  Object.defineProperty((globalThis as any).backgroundPositionY, "yEnd", { value: Factory.propertyValue("background-position-y", "y-end") })
  Object.defineProperty(globalThis, "backgroundRepeat", { value: Factory.property("background-repeat")})
  Object.defineProperty((globalThis as any).backgroundRepeat, "repeatX", { value: Factory.propertyValue("background-repeat", "repeat-x") })
  Object.defineProperty((globalThis as any).backgroundRepeat, "repeatY", { value: Factory.propertyValue("background-repeat", "repeat-y") })
  Object.defineProperty((globalThis as any).backgroundRepeat, "repeat", { value: Factory.propertyValue("background-repeat", "repeat") })
  Object.defineProperty((globalThis as any).backgroundRepeat, "space", { value: Factory.propertyValue("background-repeat", "space") })
  Object.defineProperty((globalThis as any).backgroundRepeat, "round", { value: Factory.propertyValue("background-repeat", "round") })
  Object.defineProperty((globalThis as any).backgroundRepeat, "noRepeat", { value: Factory.propertyValue("background-repeat", "no-repeat") })
  Object.defineProperty(globalThis, "backgroundRepeatX", { value: Factory.property("background-repeat-x")})
  Object.defineProperty(globalThis, "backgroundRepeatY", { value: Factory.property("background-repeat-y")})
  Object.defineProperty(globalThis, "backgroundSize", { value: Factory.property("background-size")})
  Object.defineProperty((globalThis as any).backgroundSize, "contain", { value: Factory.propertyValue("background-size", "contain") })
  Object.defineProperty((globalThis as any).backgroundSize, "cover", { value: Factory.propertyValue("background-size", "cover") })
  Object.defineProperty((globalThis as any).backgroundSize, "auto", { value: Factory.propertyValue("background-size", "auto") })
  Object.defineProperty(globalThis, "basePalette", { value: Factory.property("base-palette")})
  Object.defineProperty(globalThis, "baselineShift", { value: Factory.property("baseline-shift")})
  Object.defineProperty((globalThis as any).baselineShift, "sub", { value: Factory.propertyValue("baseline-shift", "sub") })
  Object.defineProperty((globalThis as any).baselineShift, "_super", { value: Factory.propertyValue("baseline-shift", "super") })
  Object.defineProperty((globalThis as any).baselineShift, "top", { value: Factory.propertyValue("baseline-shift", "top") })
  Object.defineProperty((globalThis as any).baselineShift, "center", { value: Factory.propertyValue("baseline-shift", "center") })
  Object.defineProperty((globalThis as any).baselineShift, "bottom", { value: Factory.propertyValue("baseline-shift", "bottom") })
  Object.defineProperty((globalThis as any).baselineShift, "baseline", { value: Factory.propertyValue("baseline-shift", "baseline") })
  Object.defineProperty(globalThis, "baselineSource", { value: Factory.property("baseline-source")})
  Object.defineProperty((globalThis as any).baselineSource, "auto", { value: Factory.propertyValue("baseline-source", "auto") })
  Object.defineProperty((globalThis as any).baselineSource, "first", { value: Factory.propertyValue("baseline-source", "first") })
  Object.defineProperty((globalThis as any).baselineSource, "last", { value: Factory.propertyValue("baseline-source", "last") })
  Object.defineProperty(globalThis, "behavior", { value: Factory.property("behavior")})
  Object.defineProperty(globalThis, "blockEllipsis", { value: Factory.property("block-ellipsis")})
  Object.defineProperty((globalThis as any).blockEllipsis, "none", { value: Factory.propertyValue("block-ellipsis", "none") })
  Object.defineProperty((globalThis as any).blockEllipsis, "auto", { value: Factory.propertyValue("block-ellipsis", "auto") })
  Object.defineProperty(globalThis, "blockSize", { value: Factory.property("block-size")})
  Object.defineProperty((globalThis as any).blockSize, "stretch", { value: Factory.propertyValue("block-size", "stretch") })
  Object.defineProperty((globalThis as any).blockSize, "fitContent", { value: Factory.propertyValue("block-size", "fit-content") })
  Object.defineProperty((globalThis as any).blockSize, "contain", { value: Factory.propertyValue("block-size", "contain") })
  Object.defineProperty(globalThis, "blockStep", { value: Factory.property("block-step")})
  Object.defineProperty(globalThis, "blockStepAlign", { value: Factory.property("block-step-align")})
  Object.defineProperty((globalThis as any).blockStepAlign, "auto", { value: Factory.propertyValue("block-step-align", "auto") })
  Object.defineProperty((globalThis as any).blockStepAlign, "center", { value: Factory.propertyValue("block-step-align", "center") })
  Object.defineProperty((globalThis as any).blockStepAlign, "start", { value: Factory.propertyValue("block-step-align", "start") })
  Object.defineProperty((globalThis as any).blockStepAlign, "end", { value: Factory.propertyValue("block-step-align", "end") })
  Object.defineProperty((globalThis as any).blockStepAlign, "up", { value: Factory.propertyValue("block-step-align", "up") })
  Object.defineProperty((globalThis as any).blockStepAlign, "down", { value: Factory.propertyValue("block-step-align", "down") })
  Object.defineProperty((globalThis as any).blockStepAlign, "nearest", { value: Factory.propertyValue("block-step-align", "nearest") })
  Object.defineProperty(globalThis, "blockStepInsert", { value: Factory.property("block-step-insert")})
  Object.defineProperty((globalThis as any).blockStepInsert, "margin", { value: Factory.propertyValue("block-step-insert", "margin") })
  Object.defineProperty((globalThis as any).blockStepInsert, "padding", { value: Factory.propertyValue("block-step-insert", "padding") })
  Object.defineProperty(globalThis, "blockStepRound", { value: Factory.property("block-step-round")})
  Object.defineProperty((globalThis as any).blockStepRound, "up", { value: Factory.propertyValue("block-step-round", "up") })
  Object.defineProperty((globalThis as any).blockStepRound, "down", { value: Factory.propertyValue("block-step-round", "down") })
  Object.defineProperty((globalThis as any).blockStepRound, "nearest", { value: Factory.propertyValue("block-step-round", "nearest") })
  Object.defineProperty(globalThis, "blockStepSize", { value: Factory.property("block-step-size")})
  Object.defineProperty((globalThis as any).blockStepSize, "none", { value: Factory.propertyValue("block-step-size", "none") })
  Object.defineProperty(globalThis, "bookmarkLabel", { value: Factory.property("bookmark-label")})
  Object.defineProperty(globalThis, "bookmarkLevel", { value: Factory.property("bookmark-level")})
  Object.defineProperty((globalThis as any).bookmarkLevel, "none", { value: Factory.propertyValue("bookmark-level", "none") })
  Object.defineProperty(globalThis, "bookmarkState", { value: Factory.property("bookmark-state")})
  Object.defineProperty((globalThis as any).bookmarkState, "open", { value: Factory.propertyValue("bookmark-state", "open") })
  Object.defineProperty((globalThis as any).bookmarkState, "closed", { value: Factory.propertyValue("bookmark-state", "closed") })
  Object.defineProperty(globalThis, "border", { value: Factory.property("border")})
  Object.defineProperty((globalThis as any).border, "thin", { value: Factory.propertyValue("border", "thin") })
  Object.defineProperty((globalThis as any).border, "medium", { value: Factory.propertyValue("border", "medium") })
  Object.defineProperty((globalThis as any).border, "thick", { value: Factory.propertyValue("border", "thick") })
  Object.defineProperty((globalThis as any).border, "none", { value: Factory.propertyValue("border", "none") })
  Object.defineProperty((globalThis as any).border, "hidden", { value: Factory.propertyValue("border", "hidden") })
  Object.defineProperty((globalThis as any).border, "dotted", { value: Factory.propertyValue("border", "dotted") })
  Object.defineProperty((globalThis as any).border, "dashed", { value: Factory.propertyValue("border", "dashed") })
  Object.defineProperty((globalThis as any).border, "solid", { value: Factory.propertyValue("border", "solid") })
  Object.defineProperty((globalThis as any).border, "double", { value: Factory.propertyValue("border", "double") })
  Object.defineProperty((globalThis as any).border, "groove", { value: Factory.propertyValue("border", "groove") })
  Object.defineProperty((globalThis as any).border, "ridge", { value: Factory.propertyValue("border", "ridge") })
  Object.defineProperty((globalThis as any).border, "inset", { value: Factory.propertyValue("border", "inset") })
  Object.defineProperty((globalThis as any).border, "outset", { value: Factory.propertyValue("border", "outset") })
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).border, color, { value: Factory.propertyValue("border", color) })
  }
  Object.defineProperty(globalThis, "borderBlock", { value: Factory.property("border-block")})
  Object.defineProperty(globalThis, "borderBlockColor", { value: Factory.property("border-block-color")})
  Object.defineProperty(globalThis, "borderBlockEnd", { value: Factory.property("border-block-end")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).borderBlockEnd, color, { value: Factory.propertyValue("border-block-end", color) })
  }
  Object.defineProperty(globalThis, "borderBlockEndColor", { value: Factory.property("border-block-end-color")})
  Object.defineProperty(globalThis, "borderBlockEndRadius", { value: Factory.property("border-block-end-radius")})
  Object.defineProperty(globalThis, "borderBlockEndStyle", { value: Factory.property("border-block-end-style")})
  Object.defineProperty(globalThis, "borderBlockEndWidth", { value: Factory.property("border-block-end-width")})
  Object.defineProperty(globalThis, "borderBlockStart", { value: Factory.property("border-block-start")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).borderBlockStart, color, { value: Factory.propertyValue("border-block-start", color) })
  }
  Object.defineProperty(globalThis, "borderBlockStartColor", { value: Factory.property("border-block-start-color")})
  Object.defineProperty(globalThis, "borderBlockStartRadius", { value: Factory.property("border-block-start-radius")})
  Object.defineProperty(globalThis, "borderBlockStartStyle", { value: Factory.property("border-block-start-style")})
  Object.defineProperty(globalThis, "borderBlockStartWidth", { value: Factory.property("border-block-start-width")})
  Object.defineProperty(globalThis, "borderBlockStyle", { value: Factory.property("border-block-style")})
  Object.defineProperty(globalThis, "borderBlockWidth", { value: Factory.property("border-block-width")})
  Object.defineProperty(globalThis, "borderBottom", { value: Factory.property("border-bottom")})
  Object.defineProperty((globalThis as any).borderBottom, "thin", { value: Factory.propertyValue("border-bottom", "thin") })
  Object.defineProperty((globalThis as any).borderBottom, "medium", { value: Factory.propertyValue("border-bottom", "medium") })
  Object.defineProperty((globalThis as any).borderBottom, "thick", { value: Factory.propertyValue("border-bottom", "thick") })
  Object.defineProperty((globalThis as any).borderBottom, "none", { value: Factory.propertyValue("border-bottom", "none") })
  Object.defineProperty((globalThis as any).borderBottom, "hidden", { value: Factory.propertyValue("border-bottom", "hidden") })
  Object.defineProperty((globalThis as any).borderBottom, "dotted", { value: Factory.propertyValue("border-bottom", "dotted") })
  Object.defineProperty((globalThis as any).borderBottom, "dashed", { value: Factory.propertyValue("border-bottom", "dashed") })
  Object.defineProperty((globalThis as any).borderBottom, "solid", { value: Factory.propertyValue("border-bottom", "solid") })
  Object.defineProperty((globalThis as any).borderBottom, "double", { value: Factory.propertyValue("border-bottom", "double") })
  Object.defineProperty((globalThis as any).borderBottom, "groove", { value: Factory.propertyValue("border-bottom", "groove") })
  Object.defineProperty((globalThis as any).borderBottom, "ridge", { value: Factory.propertyValue("border-bottom", "ridge") })
  Object.defineProperty((globalThis as any).borderBottom, "inset", { value: Factory.propertyValue("border-bottom", "inset") })
  Object.defineProperty((globalThis as any).borderBottom, "outset", { value: Factory.propertyValue("border-bottom", "outset") })
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).borderBottom, color, { value: Factory.propertyValue("border-bottom", color) })
  }
  Object.defineProperty(globalThis, "borderBottomColor", { value: Factory.property("border-bottom-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).borderBottomColor, color, { value: Factory.propertyValue("border-bottom-color", color) })
  }
  Object.defineProperty(globalThis, "borderBottomLeftRadius", { value: Factory.property("border-bottom-left-radius")})
  Object.defineProperty(globalThis, "borderBottomRadius", { value: Factory.property("border-bottom-radius")})
  Object.defineProperty(globalThis, "borderBottomRightRadius", { value: Factory.property("border-bottom-right-radius")})
  Object.defineProperty(globalThis, "borderBottomStyle", { value: Factory.property("border-bottom-style")})
  Object.defineProperty((globalThis as any).borderBottomStyle, "none", { value: Factory.propertyValue("border-bottom-style", "none") })
  Object.defineProperty((globalThis as any).borderBottomStyle, "hidden", { value: Factory.propertyValue("border-bottom-style", "hidden") })
  Object.defineProperty((globalThis as any).borderBottomStyle, "dotted", { value: Factory.propertyValue("border-bottom-style", "dotted") })
  Object.defineProperty((globalThis as any).borderBottomStyle, "dashed", { value: Factory.propertyValue("border-bottom-style", "dashed") })
  Object.defineProperty((globalThis as any).borderBottomStyle, "solid", { value: Factory.propertyValue("border-bottom-style", "solid") })
  Object.defineProperty((globalThis as any).borderBottomStyle, "double", { value: Factory.propertyValue("border-bottom-style", "double") })
  Object.defineProperty((globalThis as any).borderBottomStyle, "groove", { value: Factory.propertyValue("border-bottom-style", "groove") })
  Object.defineProperty((globalThis as any).borderBottomStyle, "ridge", { value: Factory.propertyValue("border-bottom-style", "ridge") })
  Object.defineProperty((globalThis as any).borderBottomStyle, "inset", { value: Factory.propertyValue("border-bottom-style", "inset") })
  Object.defineProperty((globalThis as any).borderBottomStyle, "outset", { value: Factory.propertyValue("border-bottom-style", "outset") })
  Object.defineProperty(globalThis, "borderBottomWidth", { value: Factory.property("border-bottom-width")})
  Object.defineProperty((globalThis as any).borderBottomWidth, "thin", { value: Factory.propertyValue("border-bottom-width", "thin") })
  Object.defineProperty((globalThis as any).borderBottomWidth, "medium", { value: Factory.propertyValue("border-bottom-width", "medium") })
  Object.defineProperty((globalThis as any).borderBottomWidth, "thick", { value: Factory.propertyValue("border-bottom-width", "thick") })
  Object.defineProperty(globalThis, "borderBoundary", { value: Factory.property("border-boundary")})
  Object.defineProperty((globalThis as any).borderBoundary, "none", { value: Factory.propertyValue("border-boundary", "none") })
  Object.defineProperty((globalThis as any).borderBoundary, "parent", { value: Factory.propertyValue("border-boundary", "parent") })
  Object.defineProperty((globalThis as any).borderBoundary, "display", { value: Factory.propertyValue("border-boundary", "display") })
  Object.defineProperty(globalThis, "borderClip", { value: Factory.property("border-clip")})
  Object.defineProperty((globalThis as any).borderClip, "normal", { value: Factory.propertyValue("border-clip", "normal") })
  Object.defineProperty((globalThis as any).borderClip, "fr", { value: Factory.propertyValue("border-clip", "fr") })
  Object.defineProperty(globalThis, "borderClipBottom", { value: Factory.property("border-clip-bottom")})
  Object.defineProperty((globalThis as any).borderClipBottom, "normal", { value: Factory.propertyValue("border-clip-bottom", "normal") })
  Object.defineProperty((globalThis as any).borderClipBottom, "fr", { value: Factory.propertyValue("border-clip-bottom", "fr") })
  Object.defineProperty(globalThis, "borderClipLeft", { value: Factory.property("border-clip-left")})
  Object.defineProperty((globalThis as any).borderClipLeft, "normal", { value: Factory.propertyValue("border-clip-left", "normal") })
  Object.defineProperty((globalThis as any).borderClipLeft, "fr", { value: Factory.propertyValue("border-clip-left", "fr") })
  Object.defineProperty(globalThis, "borderClipRight", { value: Factory.property("border-clip-right")})
  Object.defineProperty((globalThis as any).borderClipRight, "normal", { value: Factory.propertyValue("border-clip-right", "normal") })
  Object.defineProperty((globalThis as any).borderClipRight, "fr", { value: Factory.propertyValue("border-clip-right", "fr") })
  Object.defineProperty(globalThis, "borderClipTop", { value: Factory.property("border-clip-top")})
  Object.defineProperty((globalThis as any).borderClipTop, "normal", { value: Factory.propertyValue("border-clip-top", "normal") })
  Object.defineProperty((globalThis as any).borderClipTop, "fr", { value: Factory.propertyValue("border-clip-top", "fr") })
  Object.defineProperty(globalThis, "borderCollapse", { value: Factory.property("border-collapse")})
  Object.defineProperty((globalThis as any).borderCollapse, "separate", { value: Factory.propertyValue("border-collapse", "separate") })
  Object.defineProperty((globalThis as any).borderCollapse, "collapse", { value: Factory.propertyValue("border-collapse", "collapse") })
  Object.defineProperty(globalThis, "borderColor", { value: Factory.property("border-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).borderColor, color, { value: Factory.propertyValue("border-color", color) })
  }
  Object.defineProperty(globalThis, "borderEndEndRadius", { value: Factory.property("border-end-end-radius")})
  Object.defineProperty(globalThis, "borderEndStartRadius", { value: Factory.property("border-end-start-radius")})
  Object.defineProperty(globalThis, "borderImage", { value: Factory.property("border-image")})
  Object.defineProperty(globalThis, "borderImageOutset", { value: Factory.property("border-image-outset")})
  Object.defineProperty(globalThis, "borderImageRepeat", { value: Factory.property("border-image-repeat")})
  Object.defineProperty((globalThis as any).borderImageRepeat, "stretch", { value: Factory.propertyValue("border-image-repeat", "stretch") })
  Object.defineProperty((globalThis as any).borderImageRepeat, "repeat", { value: Factory.propertyValue("border-image-repeat", "repeat") })
  Object.defineProperty((globalThis as any).borderImageRepeat, "round", { value: Factory.propertyValue("border-image-repeat", "round") })
  Object.defineProperty((globalThis as any).borderImageRepeat, "space", { value: Factory.propertyValue("border-image-repeat", "space") })
  Object.defineProperty(globalThis, "borderImageSlice", { value: Factory.property("border-image-slice")})
  Object.defineProperty((globalThis as any).borderImageSlice, "fill", { value: Factory.propertyValue("border-image-slice", "fill") })
  Object.defineProperty(globalThis, "borderImageSource", { value: Factory.property("border-image-source")})
  Object.defineProperty((globalThis as any).borderImageSource, "none", { value: Factory.propertyValue("border-image-source", "none") })
  Object.defineProperty(globalThis, "borderImageWidth", { value: Factory.property("border-image-width")})
  Object.defineProperty((globalThis as any).borderImageWidth, "auto", { value: Factory.propertyValue("border-image-width", "auto") })
  Object.defineProperty(globalThis, "borderInline", { value: Factory.property("border-inline")})
  Object.defineProperty(globalThis, "borderInlineColor", { value: Factory.property("border-inline-color")})
  Object.defineProperty(globalThis, "borderInlineEnd", { value: Factory.property("border-inline-end")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).borderInlineEnd, color, { value: Factory.propertyValue("border-inline-end", color) })
  }
  Object.defineProperty(globalThis, "borderInlineEndColor", { value: Factory.property("border-inline-end-color")})
  Object.defineProperty(globalThis, "borderInlineEndRadius", { value: Factory.property("border-inline-end-radius")})
  Object.defineProperty(globalThis, "borderInlineEndStyle", { value: Factory.property("border-inline-end-style")})
  Object.defineProperty(globalThis, "borderInlineEndWidth", { value: Factory.property("border-inline-end-width")})
  Object.defineProperty(globalThis, "borderInlineStart", { value: Factory.property("border-inline-start")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).borderInlineStart, color, { value: Factory.propertyValue("border-inline-start", color) })
  }
  Object.defineProperty(globalThis, "borderInlineStartColor", { value: Factory.property("border-inline-start-color")})
  Object.defineProperty(globalThis, "borderInlineStartRadius", { value: Factory.property("border-inline-start-radius")})
  Object.defineProperty(globalThis, "borderInlineStartStyle", { value: Factory.property("border-inline-start-style")})
  Object.defineProperty(globalThis, "borderInlineStartWidth", { value: Factory.property("border-inline-start-width")})
  Object.defineProperty(globalThis, "borderInlineStyle", { value: Factory.property("border-inline-style")})
  Object.defineProperty(globalThis, "borderInlineWidth", { value: Factory.property("border-inline-width")})
  Object.defineProperty(globalThis, "borderLeft", { value: Factory.property("border-left")})
  Object.defineProperty((globalThis as any).borderLeft, "thin", { value: Factory.propertyValue("border-left", "thin") })
  Object.defineProperty((globalThis as any).borderLeft, "medium", { value: Factory.propertyValue("border-left", "medium") })
  Object.defineProperty((globalThis as any).borderLeft, "thick", { value: Factory.propertyValue("border-left", "thick") })
  Object.defineProperty((globalThis as any).borderLeft, "none", { value: Factory.propertyValue("border-left", "none") })
  Object.defineProperty((globalThis as any).borderLeft, "hidden", { value: Factory.propertyValue("border-left", "hidden") })
  Object.defineProperty((globalThis as any).borderLeft, "dotted", { value: Factory.propertyValue("border-left", "dotted") })
  Object.defineProperty((globalThis as any).borderLeft, "dashed", { value: Factory.propertyValue("border-left", "dashed") })
  Object.defineProperty((globalThis as any).borderLeft, "solid", { value: Factory.propertyValue("border-left", "solid") })
  Object.defineProperty((globalThis as any).borderLeft, "double", { value: Factory.propertyValue("border-left", "double") })
  Object.defineProperty((globalThis as any).borderLeft, "groove", { value: Factory.propertyValue("border-left", "groove") })
  Object.defineProperty((globalThis as any).borderLeft, "ridge", { value: Factory.propertyValue("border-left", "ridge") })
  Object.defineProperty((globalThis as any).borderLeft, "inset", { value: Factory.propertyValue("border-left", "inset") })
  Object.defineProperty((globalThis as any).borderLeft, "outset", { value: Factory.propertyValue("border-left", "outset") })
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).borderLeft, color, { value: Factory.propertyValue("border-left", color) })
  }
  Object.defineProperty(globalThis, "borderLeftColor", { value: Factory.property("border-left-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).borderLeftColor, color, { value: Factory.propertyValue("border-left-color", color) })
  }
  Object.defineProperty(globalThis, "borderLeftRadius", { value: Factory.property("border-left-radius")})
  Object.defineProperty(globalThis, "borderLeftStyle", { value: Factory.property("border-left-style")})
  Object.defineProperty((globalThis as any).borderLeftStyle, "none", { value: Factory.propertyValue("border-left-style", "none") })
  Object.defineProperty((globalThis as any).borderLeftStyle, "hidden", { value: Factory.propertyValue("border-left-style", "hidden") })
  Object.defineProperty((globalThis as any).borderLeftStyle, "dotted", { value: Factory.propertyValue("border-left-style", "dotted") })
  Object.defineProperty((globalThis as any).borderLeftStyle, "dashed", { value: Factory.propertyValue("border-left-style", "dashed") })
  Object.defineProperty((globalThis as any).borderLeftStyle, "solid", { value: Factory.propertyValue("border-left-style", "solid") })
  Object.defineProperty((globalThis as any).borderLeftStyle, "double", { value: Factory.propertyValue("border-left-style", "double") })
  Object.defineProperty((globalThis as any).borderLeftStyle, "groove", { value: Factory.propertyValue("border-left-style", "groove") })
  Object.defineProperty((globalThis as any).borderLeftStyle, "ridge", { value: Factory.propertyValue("border-left-style", "ridge") })
  Object.defineProperty((globalThis as any).borderLeftStyle, "inset", { value: Factory.propertyValue("border-left-style", "inset") })
  Object.defineProperty((globalThis as any).borderLeftStyle, "outset", { value: Factory.propertyValue("border-left-style", "outset") })
  Object.defineProperty(globalThis, "borderLeftWidth", { value: Factory.property("border-left-width")})
  Object.defineProperty((globalThis as any).borderLeftWidth, "thin", { value: Factory.propertyValue("border-left-width", "thin") })
  Object.defineProperty((globalThis as any).borderLeftWidth, "medium", { value: Factory.propertyValue("border-left-width", "medium") })
  Object.defineProperty((globalThis as any).borderLeftWidth, "thick", { value: Factory.propertyValue("border-left-width", "thick") })
  Object.defineProperty(globalThis, "borderLimit", { value: Factory.property("border-limit")})
  Object.defineProperty((globalThis as any).borderLimit, "all", { value: Factory.propertyValue("border-limit", "all") })
  Object.defineProperty((globalThis as any).borderLimit, "sides", { value: Factory.propertyValue("border-limit", "sides") })
  Object.defineProperty((globalThis as any).borderLimit, "corners", { value: Factory.propertyValue("border-limit", "corners") })
  Object.defineProperty((globalThis as any).borderLimit, "top", { value: Factory.propertyValue("border-limit", "top") })
  Object.defineProperty((globalThis as any).borderLimit, "right", { value: Factory.propertyValue("border-limit", "right") })
  Object.defineProperty((globalThis as any).borderLimit, "bottom", { value: Factory.propertyValue("border-limit", "bottom") })
  Object.defineProperty((globalThis as any).borderLimit, "left", { value: Factory.propertyValue("border-limit", "left") })
  Object.defineProperty(globalThis, "borderRadius", { value: Factory.property("border-radius")})
  Object.defineProperty(globalThis, "borderRight", { value: Factory.property("border-right")})
  Object.defineProperty((globalThis as any).borderRight, "thin", { value: Factory.propertyValue("border-right", "thin") })
  Object.defineProperty((globalThis as any).borderRight, "medium", { value: Factory.propertyValue("border-right", "medium") })
  Object.defineProperty((globalThis as any).borderRight, "thick", { value: Factory.propertyValue("border-right", "thick") })
  Object.defineProperty((globalThis as any).borderRight, "none", { value: Factory.propertyValue("border-right", "none") })
  Object.defineProperty((globalThis as any).borderRight, "hidden", { value: Factory.propertyValue("border-right", "hidden") })
  Object.defineProperty((globalThis as any).borderRight, "dotted", { value: Factory.propertyValue("border-right", "dotted") })
  Object.defineProperty((globalThis as any).borderRight, "dashed", { value: Factory.propertyValue("border-right", "dashed") })
  Object.defineProperty((globalThis as any).borderRight, "solid", { value: Factory.propertyValue("border-right", "solid") })
  Object.defineProperty((globalThis as any).borderRight, "double", { value: Factory.propertyValue("border-right", "double") })
  Object.defineProperty((globalThis as any).borderRight, "groove", { value: Factory.propertyValue("border-right", "groove") })
  Object.defineProperty((globalThis as any).borderRight, "ridge", { value: Factory.propertyValue("border-right", "ridge") })
  Object.defineProperty((globalThis as any).borderRight, "inset", { value: Factory.propertyValue("border-right", "inset") })
  Object.defineProperty((globalThis as any).borderRight, "outset", { value: Factory.propertyValue("border-right", "outset") })
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).borderRight, color, { value: Factory.propertyValue("border-right", color) })
  }
  Object.defineProperty(globalThis, "borderRightColor", { value: Factory.property("border-right-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).borderRightColor, color, { value: Factory.propertyValue("border-right-color", color) })
  }
  Object.defineProperty(globalThis, "borderRightRadius", { value: Factory.property("border-right-radius")})
  Object.defineProperty(globalThis, "borderRightStyle", { value: Factory.property("border-right-style")})
  Object.defineProperty((globalThis as any).borderRightStyle, "none", { value: Factory.propertyValue("border-right-style", "none") })
  Object.defineProperty((globalThis as any).borderRightStyle, "hidden", { value: Factory.propertyValue("border-right-style", "hidden") })
  Object.defineProperty((globalThis as any).borderRightStyle, "dotted", { value: Factory.propertyValue("border-right-style", "dotted") })
  Object.defineProperty((globalThis as any).borderRightStyle, "dashed", { value: Factory.propertyValue("border-right-style", "dashed") })
  Object.defineProperty((globalThis as any).borderRightStyle, "solid", { value: Factory.propertyValue("border-right-style", "solid") })
  Object.defineProperty((globalThis as any).borderRightStyle, "double", { value: Factory.propertyValue("border-right-style", "double") })
  Object.defineProperty((globalThis as any).borderRightStyle, "groove", { value: Factory.propertyValue("border-right-style", "groove") })
  Object.defineProperty((globalThis as any).borderRightStyle, "ridge", { value: Factory.propertyValue("border-right-style", "ridge") })
  Object.defineProperty((globalThis as any).borderRightStyle, "inset", { value: Factory.propertyValue("border-right-style", "inset") })
  Object.defineProperty((globalThis as any).borderRightStyle, "outset", { value: Factory.propertyValue("border-right-style", "outset") })
  Object.defineProperty(globalThis, "borderRightWidth", { value: Factory.property("border-right-width")})
  Object.defineProperty((globalThis as any).borderRightWidth, "thin", { value: Factory.propertyValue("border-right-width", "thin") })
  Object.defineProperty((globalThis as any).borderRightWidth, "medium", { value: Factory.propertyValue("border-right-width", "medium") })
  Object.defineProperty((globalThis as any).borderRightWidth, "thick", { value: Factory.propertyValue("border-right-width", "thick") })
  Object.defineProperty(globalThis, "borderSpacing", { value: Factory.property("border-spacing")})
  Object.defineProperty(globalThis, "borderStartEndRadius", { value: Factory.property("border-start-end-radius")})
  Object.defineProperty(globalThis, "borderStartStartRadius", { value: Factory.property("border-start-start-radius")})
  Object.defineProperty(globalThis, "borderStyle", { value: Factory.property("border-style")})
  Object.defineProperty((globalThis as any).borderStyle, "none", { value: Factory.propertyValue("border-style", "none") })
  Object.defineProperty((globalThis as any).borderStyle, "hidden", { value: Factory.propertyValue("border-style", "hidden") })
  Object.defineProperty((globalThis as any).borderStyle, "dotted", { value: Factory.propertyValue("border-style", "dotted") })
  Object.defineProperty((globalThis as any).borderStyle, "dashed", { value: Factory.propertyValue("border-style", "dashed") })
  Object.defineProperty((globalThis as any).borderStyle, "solid", { value: Factory.propertyValue("border-style", "solid") })
  Object.defineProperty((globalThis as any).borderStyle, "double", { value: Factory.propertyValue("border-style", "double") })
  Object.defineProperty((globalThis as any).borderStyle, "groove", { value: Factory.propertyValue("border-style", "groove") })
  Object.defineProperty((globalThis as any).borderStyle, "ridge", { value: Factory.propertyValue("border-style", "ridge") })
  Object.defineProperty((globalThis as any).borderStyle, "inset", { value: Factory.propertyValue("border-style", "inset") })
  Object.defineProperty((globalThis as any).borderStyle, "outset", { value: Factory.propertyValue("border-style", "outset") })
  Object.defineProperty(globalThis, "borderTop", { value: Factory.property("border-top")})
  Object.defineProperty((globalThis as any).borderTop, "thin", { value: Factory.propertyValue("border-top", "thin") })
  Object.defineProperty((globalThis as any).borderTop, "medium", { value: Factory.propertyValue("border-top", "medium") })
  Object.defineProperty((globalThis as any).borderTop, "thick", { value: Factory.propertyValue("border-top", "thick") })
  Object.defineProperty((globalThis as any).borderTop, "none", { value: Factory.propertyValue("border-top", "none") })
  Object.defineProperty((globalThis as any).borderTop, "hidden", { value: Factory.propertyValue("border-top", "hidden") })
  Object.defineProperty((globalThis as any).borderTop, "dotted", { value: Factory.propertyValue("border-top", "dotted") })
  Object.defineProperty((globalThis as any).borderTop, "dashed", { value: Factory.propertyValue("border-top", "dashed") })
  Object.defineProperty((globalThis as any).borderTop, "solid", { value: Factory.propertyValue("border-top", "solid") })
  Object.defineProperty((globalThis as any).borderTop, "double", { value: Factory.propertyValue("border-top", "double") })
  Object.defineProperty((globalThis as any).borderTop, "groove", { value: Factory.propertyValue("border-top", "groove") })
  Object.defineProperty((globalThis as any).borderTop, "ridge", { value: Factory.propertyValue("border-top", "ridge") })
  Object.defineProperty((globalThis as any).borderTop, "inset", { value: Factory.propertyValue("border-top", "inset") })
  Object.defineProperty((globalThis as any).borderTop, "outset", { value: Factory.propertyValue("border-top", "outset") })
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).borderTop, color, { value: Factory.propertyValue("border-top", color) })
  }
  Object.defineProperty(globalThis, "borderTopColor", { value: Factory.property("border-top-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).borderTopColor, color, { value: Factory.propertyValue("border-top-color", color) })
  }
  Object.defineProperty(globalThis, "borderTopLeftRadius", { value: Factory.property("border-top-left-radius")})
  Object.defineProperty(globalThis, "borderTopRadius", { value: Factory.property("border-top-radius")})
  Object.defineProperty(globalThis, "borderTopRightRadius", { value: Factory.property("border-top-right-radius")})
  Object.defineProperty(globalThis, "borderTopStyle", { value: Factory.property("border-top-style")})
  Object.defineProperty((globalThis as any).borderTopStyle, "none", { value: Factory.propertyValue("border-top-style", "none") })
  Object.defineProperty((globalThis as any).borderTopStyle, "hidden", { value: Factory.propertyValue("border-top-style", "hidden") })
  Object.defineProperty((globalThis as any).borderTopStyle, "dotted", { value: Factory.propertyValue("border-top-style", "dotted") })
  Object.defineProperty((globalThis as any).borderTopStyle, "dashed", { value: Factory.propertyValue("border-top-style", "dashed") })
  Object.defineProperty((globalThis as any).borderTopStyle, "solid", { value: Factory.propertyValue("border-top-style", "solid") })
  Object.defineProperty((globalThis as any).borderTopStyle, "double", { value: Factory.propertyValue("border-top-style", "double") })
  Object.defineProperty((globalThis as any).borderTopStyle, "groove", { value: Factory.propertyValue("border-top-style", "groove") })
  Object.defineProperty((globalThis as any).borderTopStyle, "ridge", { value: Factory.propertyValue("border-top-style", "ridge") })
  Object.defineProperty((globalThis as any).borderTopStyle, "inset", { value: Factory.propertyValue("border-top-style", "inset") })
  Object.defineProperty((globalThis as any).borderTopStyle, "outset", { value: Factory.propertyValue("border-top-style", "outset") })
  Object.defineProperty(globalThis, "borderTopWidth", { value: Factory.property("border-top-width")})
  Object.defineProperty((globalThis as any).borderTopWidth, "thin", { value: Factory.propertyValue("border-top-width", "thin") })
  Object.defineProperty((globalThis as any).borderTopWidth, "medium", { value: Factory.propertyValue("border-top-width", "medium") })
  Object.defineProperty((globalThis as any).borderTopWidth, "thick", { value: Factory.propertyValue("border-top-width", "thick") })
  Object.defineProperty(globalThis, "borderWidth", { value: Factory.property("border-width")})
  Object.defineProperty((globalThis as any).borderWidth, "thin", { value: Factory.propertyValue("border-width", "thin") })
  Object.defineProperty((globalThis as any).borderWidth, "medium", { value: Factory.propertyValue("border-width", "medium") })
  Object.defineProperty((globalThis as any).borderWidth, "thick", { value: Factory.propertyValue("border-width", "thick") })
  Object.defineProperty(globalThis, "bottom", { value: Factory.property("bottom")})
  Object.defineProperty((globalThis as any).bottom, "auto", { value: Factory.propertyValue("bottom", "auto") })
  Object.defineProperty(globalThis, "boxDecorationBreak", { value: Factory.property("box-decoration-break")})
  Object.defineProperty((globalThis as any).boxDecorationBreak, "slice", { value: Factory.propertyValue("box-decoration-break", "slice") })
  Object.defineProperty((globalThis as any).boxDecorationBreak, "clone", { value: Factory.propertyValue("box-decoration-break", "clone") })
  Object.defineProperty(globalThis, "boxShadow", { value: Factory.property("box-shadow")})
  Object.defineProperty((globalThis as any).boxShadow, "none", { value: Factory.propertyValue("box-shadow", "none") })
  Object.defineProperty((globalThis as any).boxShadow, "inset", { value: Factory.propertyValue("box-shadow", "inset") })
  Object.defineProperty(globalThis, "boxSizing", { value: Factory.property("box-sizing")})
  Object.defineProperty((globalThis as any).boxSizing, "contentBox", { value: Factory.propertyValue("box-sizing", "content-box") })
  Object.defineProperty((globalThis as any).boxSizing, "borderBox", { value: Factory.propertyValue("box-sizing", "border-box") })
  Object.defineProperty(globalThis, "boxSnap", { value: Factory.property("box-snap")})
  Object.defineProperty((globalThis as any).boxSnap, "none", { value: Factory.propertyValue("box-snap", "none") })
  Object.defineProperty((globalThis as any).boxSnap, "blockStart", { value: Factory.propertyValue("box-snap", "block-start") })
  Object.defineProperty((globalThis as any).boxSnap, "blockEnd", { value: Factory.propertyValue("box-snap", "block-end") })
  Object.defineProperty((globalThis as any).boxSnap, "center", { value: Factory.propertyValue("box-snap", "center") })
  Object.defineProperty((globalThis as any).boxSnap, "baseline", { value: Factory.propertyValue("box-snap", "baseline") })
  Object.defineProperty((globalThis as any).boxSnap, "lastBaseline", { value: Factory.propertyValue("box-snap", "last-baseline") })
  Object.defineProperty(globalThis, "breakAfter", { value: Factory.property("break-after")})
  Object.defineProperty((globalThis as any).breakAfter, "auto", { value: Factory.propertyValue("break-after", "auto") })
  Object.defineProperty((globalThis as any).breakAfter, "avoid", { value: Factory.propertyValue("break-after", "avoid") })
  Object.defineProperty((globalThis as any).breakAfter, "always", { value: Factory.propertyValue("break-after", "always") })
  Object.defineProperty((globalThis as any).breakAfter, "all", { value: Factory.propertyValue("break-after", "all") })
  Object.defineProperty((globalThis as any).breakAfter, "avoidPage", { value: Factory.propertyValue("break-after", "avoid-page") })
  Object.defineProperty((globalThis as any).breakAfter, "page", { value: Factory.propertyValue("break-after", "page") })
  Object.defineProperty((globalThis as any).breakAfter, "left", { value: Factory.propertyValue("break-after", "left") })
  Object.defineProperty((globalThis as any).breakAfter, "right", { value: Factory.propertyValue("break-after", "right") })
  Object.defineProperty((globalThis as any).breakAfter, "recto", { value: Factory.propertyValue("break-after", "recto") })
  Object.defineProperty((globalThis as any).breakAfter, "verso", { value: Factory.propertyValue("break-after", "verso") })
  Object.defineProperty((globalThis as any).breakAfter, "avoidColumn", { value: Factory.propertyValue("break-after", "avoid-column") })
  Object.defineProperty((globalThis as any).breakAfter, "column", { value: Factory.propertyValue("break-after", "column") })
  Object.defineProperty((globalThis as any).breakAfter, "avoidRegion", { value: Factory.propertyValue("break-after", "avoid-region") })
  Object.defineProperty((globalThis as any).breakAfter, "region", { value: Factory.propertyValue("break-after", "region") })
  Object.defineProperty(globalThis, "breakBefore", { value: Factory.property("break-before")})
  Object.defineProperty((globalThis as any).breakBefore, "auto", { value: Factory.propertyValue("break-before", "auto") })
  Object.defineProperty((globalThis as any).breakBefore, "avoid", { value: Factory.propertyValue("break-before", "avoid") })
  Object.defineProperty((globalThis as any).breakBefore, "always", { value: Factory.propertyValue("break-before", "always") })
  Object.defineProperty((globalThis as any).breakBefore, "all", { value: Factory.propertyValue("break-before", "all") })
  Object.defineProperty((globalThis as any).breakBefore, "avoidPage", { value: Factory.propertyValue("break-before", "avoid-page") })
  Object.defineProperty((globalThis as any).breakBefore, "page", { value: Factory.propertyValue("break-before", "page") })
  Object.defineProperty((globalThis as any).breakBefore, "left", { value: Factory.propertyValue("break-before", "left") })
  Object.defineProperty((globalThis as any).breakBefore, "right", { value: Factory.propertyValue("break-before", "right") })
  Object.defineProperty((globalThis as any).breakBefore, "recto", { value: Factory.propertyValue("break-before", "recto") })
  Object.defineProperty((globalThis as any).breakBefore, "verso", { value: Factory.propertyValue("break-before", "verso") })
  Object.defineProperty((globalThis as any).breakBefore, "avoidColumn", { value: Factory.propertyValue("break-before", "avoid-column") })
  Object.defineProperty((globalThis as any).breakBefore, "column", { value: Factory.propertyValue("break-before", "column") })
  Object.defineProperty((globalThis as any).breakBefore, "avoidRegion", { value: Factory.propertyValue("break-before", "avoid-region") })
  Object.defineProperty((globalThis as any).breakBefore, "region", { value: Factory.propertyValue("break-before", "region") })
  Object.defineProperty(globalThis, "breakInside", { value: Factory.property("break-inside")})
  Object.defineProperty((globalThis as any).breakInside, "auto", { value: Factory.propertyValue("break-inside", "auto") })
  Object.defineProperty((globalThis as any).breakInside, "avoid", { value: Factory.propertyValue("break-inside", "avoid") })
  Object.defineProperty((globalThis as any).breakInside, "avoidPage", { value: Factory.propertyValue("break-inside", "avoid-page") })
  Object.defineProperty((globalThis as any).breakInside, "avoidColumn", { value: Factory.propertyValue("break-inside", "avoid-column") })
  Object.defineProperty((globalThis as any).breakInside, "avoidRegion", { value: Factory.propertyValue("break-inside", "avoid-region") })
  Object.defineProperty(globalThis, "bufferedRendering", { value: Factory.property("buffered-rendering")})
  Object.defineProperty(globalThis, "captionSide", { value: Factory.property("caption-side")})
  Object.defineProperty((globalThis as any).captionSide, "top", { value: Factory.propertyValue("caption-side", "top") })
  Object.defineProperty((globalThis as any).captionSide, "bottom", { value: Factory.propertyValue("caption-side", "bottom") })
  Object.defineProperty(globalThis, "caret", { value: Factory.property("caret")})
  Object.defineProperty(globalThis, "caretColor", { value: Factory.property("caret-color")})
  Object.defineProperty((globalThis as any).caretColor, "auto", { value: Factory.propertyValue("caret-color", "auto") })
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).caretColor, color, { value: Factory.propertyValue("caret-color", color) })
  }
  Object.defineProperty(globalThis, "caretShape", { value: Factory.property("caret-shape")})
  Object.defineProperty((globalThis as any).caretShape, "auto", { value: Factory.propertyValue("caret-shape", "auto") })
  Object.defineProperty((globalThis as any).caretShape, "bar", { value: Factory.propertyValue("caret-shape", "bar") })
  Object.defineProperty((globalThis as any).caretShape, "block", { value: Factory.propertyValue("caret-shape", "block") })
  Object.defineProperty((globalThis as any).caretShape, "underscore", { value: Factory.propertyValue("caret-shape", "underscore") })
  Object.defineProperty(globalThis, "chains", { value: Factory.property("chains")})
  Object.defineProperty(globalThis, "clear", { value: Factory.property("clear")})
  Object.defineProperty((globalThis as any).clear, "inlineStart", { value: Factory.propertyValue("clear", "inline-start") })
  Object.defineProperty((globalThis as any).clear, "inlineEnd", { value: Factory.propertyValue("clear", "inline-end") })
  Object.defineProperty((globalThis as any).clear, "blockStart", { value: Factory.propertyValue("clear", "block-start") })
  Object.defineProperty((globalThis as any).clear, "blockEnd", { value: Factory.propertyValue("clear", "block-end") })
  Object.defineProperty((globalThis as any).clear, "left", { value: Factory.propertyValue("clear", "left") })
  Object.defineProperty((globalThis as any).clear, "right", { value: Factory.propertyValue("clear", "right") })
  Object.defineProperty((globalThis as any).clear, "top", { value: Factory.propertyValue("clear", "top") })
  Object.defineProperty((globalThis as any).clear, "bottom", { value: Factory.propertyValue("clear", "bottom") })
  Object.defineProperty((globalThis as any).clear, "none", { value: Factory.propertyValue("clear", "none") })
  Object.defineProperty((globalThis as any).clear, "bothInline", { value: Factory.propertyValue("clear", "both-inline") })
  Object.defineProperty((globalThis as any).clear, "bothBlock", { value: Factory.propertyValue("clear", "both-block") })
  Object.defineProperty((globalThis as any).clear, "both", { value: Factory.propertyValue("clear", "both") })
  Object.defineProperty((globalThis as any).clear, "all", { value: Factory.propertyValue("clear", "all") })
  Object.defineProperty(globalThis, "clip", { value: Factory.property("clip")})
  Object.defineProperty((globalThis as any).clip, "auto", { value: Factory.propertyValue("clip", "auto") })
  Object.defineProperty(globalThis, "clipPath", { value: Factory.property("clip-path")})
  Object.defineProperty((globalThis as any).clipPath, "none", { value: Factory.propertyValue("clip-path", "none") })
  Object.defineProperty((globalThis as any).clipPath, "fillBox", { value: Factory.propertyValue("clip-path", "fill-box") })
  Object.defineProperty((globalThis as any).clipPath, "strokeBox", { value: Factory.propertyValue("clip-path", "stroke-box") })
  Object.defineProperty((globalThis as any).clipPath, "viewBox", { value: Factory.propertyValue("clip-path", "view-box") })
  Object.defineProperty(globalThis, "clipRule", { value: Factory.property("clip-rule")})
  Object.defineProperty((globalThis as any).clipRule, "nonzero", { value: Factory.propertyValue("clip-rule", "nonzero") })
  Object.defineProperty((globalThis as any).clipRule, "evenodd", { value: Factory.propertyValue("clip-rule", "evenodd") })
  Object.defineProperty(globalThis, "color", { value: Factory.property("color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).color, color, { value: Factory.propertyValue("color", color) })
  }
  Object.defineProperty(globalThis, "colorAdjust", { value: Factory.property("color-adjust")})
  Object.defineProperty(globalThis, "colorInterpolation", { value: Factory.property("color-interpolation")})
  Object.defineProperty((globalThis as any).colorInterpolation, "auto", { value: Factory.propertyValue("color-interpolation", "auto") })
  Object.defineProperty((globalThis as any).colorInterpolation, "sRGB", { value: Factory.propertyValue("color-interpolation", "sRGB") })
  Object.defineProperty((globalThis as any).colorInterpolation, "linearRGB", { value: Factory.propertyValue("color-interpolation", "linearRGB") })
  Object.defineProperty(globalThis, "colorInterpolationFilters", { value: Factory.property("color-interpolation-filters")})
  Object.defineProperty((globalThis as any).colorInterpolationFilters, "auto", { value: Factory.propertyValue("color-interpolation-filters", "auto") })
  Object.defineProperty((globalThis as any).colorInterpolationFilters, "sRGB", { value: Factory.propertyValue("color-interpolation-filters", "sRGB") })
  Object.defineProperty((globalThis as any).colorInterpolationFilters, "linearRGB", { value: Factory.propertyValue("color-interpolation-filters", "linearRGB") })
  Object.defineProperty(globalThis, "colorProfile", { value: Factory.property("color-profile")})
  Object.defineProperty(globalThis, "colorRendering", { value: Factory.property("color-rendering")})
  Object.defineProperty(globalThis, "colorScheme", { value: Factory.property("color-scheme")})
  Object.defineProperty((globalThis as any).colorScheme, "normal", { value: Factory.propertyValue("color-scheme", "normal") })
  Object.defineProperty((globalThis as any).colorScheme, "light", { value: Factory.propertyValue("color-scheme", "light") })
  Object.defineProperty((globalThis as any).colorScheme, "dark", { value: Factory.propertyValue("color-scheme", "dark") })
  Object.defineProperty((globalThis as any).colorScheme, "only", { value: Factory.propertyValue("color-scheme", "only") })
  Object.defineProperty(globalThis, "columnCount", { value: Factory.property("column-count")})
  Object.defineProperty((globalThis as any).columnCount, "auto", { value: Factory.propertyValue("column-count", "auto") })
  Object.defineProperty(globalThis, "columnFill", { value: Factory.property("column-fill")})
  Object.defineProperty((globalThis as any).columnFill, "auto", { value: Factory.propertyValue("column-fill", "auto") })
  Object.defineProperty((globalThis as any).columnFill, "balance", { value: Factory.propertyValue("column-fill", "balance") })
  Object.defineProperty((globalThis as any).columnFill, "balanceAll", { value: Factory.propertyValue("column-fill", "balance-all") })
  Object.defineProperty(globalThis, "columnGap", { value: Factory.property("column-gap")})
  Object.defineProperty((globalThis as any).columnGap, "normal", { value: Factory.propertyValue("column-gap", "normal") })
  Object.defineProperty(globalThis, "columnProgression", { value: Factory.property("column-progression")})
  Object.defineProperty(globalThis, "columnRule", { value: Factory.property("column-rule")})
  Object.defineProperty(globalThis, "columnRuleColor", { value: Factory.property("column-rule-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).columnRuleColor, color, { value: Factory.propertyValue("column-rule-color", color) })
  }
  Object.defineProperty(globalThis, "columnRuleStyle", { value: Factory.property("column-rule-style")})
  Object.defineProperty((globalThis as any).columnRuleStyle, "none", { value: Factory.propertyValue("column-rule-style", "none") })
  Object.defineProperty((globalThis as any).columnRuleStyle, "hidden", { value: Factory.propertyValue("column-rule-style", "hidden") })
  Object.defineProperty((globalThis as any).columnRuleStyle, "dotted", { value: Factory.propertyValue("column-rule-style", "dotted") })
  Object.defineProperty((globalThis as any).columnRuleStyle, "dashed", { value: Factory.propertyValue("column-rule-style", "dashed") })
  Object.defineProperty((globalThis as any).columnRuleStyle, "solid", { value: Factory.propertyValue("column-rule-style", "solid") })
  Object.defineProperty((globalThis as any).columnRuleStyle, "double", { value: Factory.propertyValue("column-rule-style", "double") })
  Object.defineProperty((globalThis as any).columnRuleStyle, "groove", { value: Factory.propertyValue("column-rule-style", "groove") })
  Object.defineProperty((globalThis as any).columnRuleStyle, "ridge", { value: Factory.propertyValue("column-rule-style", "ridge") })
  Object.defineProperty((globalThis as any).columnRuleStyle, "inset", { value: Factory.propertyValue("column-rule-style", "inset") })
  Object.defineProperty((globalThis as any).columnRuleStyle, "outset", { value: Factory.propertyValue("column-rule-style", "outset") })
  Object.defineProperty(globalThis, "columnRuleWidth", { value: Factory.property("column-rule-width")})
  Object.defineProperty((globalThis as any).columnRuleWidth, "thin", { value: Factory.propertyValue("column-rule-width", "thin") })
  Object.defineProperty((globalThis as any).columnRuleWidth, "medium", { value: Factory.propertyValue("column-rule-width", "medium") })
  Object.defineProperty((globalThis as any).columnRuleWidth, "thick", { value: Factory.propertyValue("column-rule-width", "thick") })
  Object.defineProperty(globalThis, "columnSpan", { value: Factory.property("column-span")})
  Object.defineProperty((globalThis as any).columnSpan, "none", { value: Factory.propertyValue("column-span", "none") })
  Object.defineProperty((globalThis as any).columnSpan, "all", { value: Factory.propertyValue("column-span", "all") })
  Object.defineProperty((globalThis as any).columnSpan, "auto", { value: Factory.propertyValue("column-span", "auto") })
  Object.defineProperty(globalThis, "columnWidth", { value: Factory.property("column-width")})
  Object.defineProperty((globalThis as any).columnWidth, "minContent", { value: Factory.propertyValue("column-width", "min-content") })
  Object.defineProperty((globalThis as any).columnWidth, "maxContent", { value: Factory.propertyValue("column-width", "max-content") })
  Object.defineProperty((globalThis as any).columnWidth, "auto", { value: Factory.propertyValue("column-width", "auto") })
  Object.defineProperty(globalThis, "columns", { value: Factory.property("columns")})
  Object.defineProperty(globalThis, "contain", { value: Factory.property("contain")})
  Object.defineProperty((globalThis as any).contain, "none", { value: Factory.propertyValue("contain", "none") })
  Object.defineProperty((globalThis as any).contain, "strict", { value: Factory.propertyValue("contain", "strict") })
  Object.defineProperty((globalThis as any).contain, "content", { value: Factory.propertyValue("contain", "content") })
  Object.defineProperty((globalThis as any).contain, "size", { value: Factory.propertyValue("contain", "size") })
  Object.defineProperty((globalThis as any).contain, "layout", { value: Factory.propertyValue("contain", "layout") })
  Object.defineProperty((globalThis as any).contain, "style", { value: Factory.propertyValue("contain", "style") })
  Object.defineProperty((globalThis as any).contain, "paint", { value: Factory.propertyValue("contain", "paint") })
  Object.defineProperty((globalThis as any).contain, "inlineSize", { value: Factory.propertyValue("contain", "inline-size") })
  Object.defineProperty(globalThis, "containIntrinsicBlockSize", { value: Factory.property("contain-intrinsic-block-size")})
  Object.defineProperty((globalThis as any).containIntrinsicBlockSize, "none", { value: Factory.propertyValue("contain-intrinsic-block-size", "none") })
  Object.defineProperty((globalThis as any).containIntrinsicBlockSize, "auto", { value: Factory.propertyValue("contain-intrinsic-block-size", "auto") })
  Object.defineProperty(globalThis, "containIntrinsicHeight", { value: Factory.property("contain-intrinsic-height")})
  Object.defineProperty((globalThis as any).containIntrinsicHeight, "none", { value: Factory.propertyValue("contain-intrinsic-height", "none") })
  Object.defineProperty((globalThis as any).containIntrinsicHeight, "auto", { value: Factory.propertyValue("contain-intrinsic-height", "auto") })
  Object.defineProperty(globalThis, "containIntrinsicInlineSize", { value: Factory.property("contain-intrinsic-inline-size")})
  Object.defineProperty((globalThis as any).containIntrinsicInlineSize, "none", { value: Factory.propertyValue("contain-intrinsic-inline-size", "none") })
  Object.defineProperty((globalThis as any).containIntrinsicInlineSize, "auto", { value: Factory.propertyValue("contain-intrinsic-inline-size", "auto") })
  Object.defineProperty(globalThis, "containIntrinsicSize", { value: Factory.property("contain-intrinsic-size")})
  Object.defineProperty((globalThis as any).containIntrinsicSize, "none", { value: Factory.propertyValue("contain-intrinsic-size", "none") })
  Object.defineProperty((globalThis as any).containIntrinsicSize, "auto", { value: Factory.propertyValue("contain-intrinsic-size", "auto") })
  Object.defineProperty(globalThis, "containIntrinsicWidth", { value: Factory.property("contain-intrinsic-width")})
  Object.defineProperty((globalThis as any).containIntrinsicWidth, "none", { value: Factory.propertyValue("contain-intrinsic-width", "none") })
  Object.defineProperty((globalThis as any).containIntrinsicWidth, "auto", { value: Factory.propertyValue("contain-intrinsic-width", "auto") })
  Object.defineProperty(globalThis, "container", { value: Factory.property("container")})
  Object.defineProperty(globalThis, "containerName", { value: Factory.property("container-name")})
  Object.defineProperty((globalThis as any).containerName, "none", { value: Factory.propertyValue("container-name", "none") })
  Object.defineProperty(globalThis, "containerType", { value: Factory.property("container-type")})
  Object.defineProperty((globalThis as any).containerType, "normal", { value: Factory.propertyValue("container-type", "normal") })
  Object.defineProperty((globalThis as any).containerType, "size", { value: Factory.propertyValue("container-type", "size") })
  Object.defineProperty((globalThis as any).containerType, "inlineSize", { value: Factory.propertyValue("container-type", "inline-size") })
  Object.defineProperty(globalThis, "content", { value: Factory.property("content")})
  Object.defineProperty((globalThis as any).content, "normal", { value: Factory.propertyValue("content", "normal") })
  Object.defineProperty((globalThis as any).content, "none", { value: Factory.propertyValue("content", "none") })
  Object.defineProperty(globalThis, "contentVisibility", { value: Factory.property("content-visibility")})
  Object.defineProperty((globalThis as any).contentVisibility, "visible", { value: Factory.propertyValue("content-visibility", "visible") })
  Object.defineProperty((globalThis as any).contentVisibility, "auto", { value: Factory.propertyValue("content-visibility", "auto") })
  Object.defineProperty((globalThis as any).contentVisibility, "hidden", { value: Factory.propertyValue("content-visibility", "hidden") })
  Object.defineProperty(globalThis, "_continue", { value: Factory.property("continue")})
  Object.defineProperty((globalThis as any)._continue, "auto", { value: Factory.propertyValue("continue", "auto") })
  Object.defineProperty((globalThis as any)._continue, "discard", { value: Factory.propertyValue("continue", "discard") })
  Object.defineProperty((globalThis as any)._continue, "overflow", { value: Factory.propertyValue("continue", "overflow") })
  Object.defineProperty((globalThis as any)._continue, "paginate", { value: Factory.propertyValue("continue", "paginate") })
  Object.defineProperty((globalThis as any)._continue, "fragments", { value: Factory.propertyValue("continue", "fragments") })
  Object.defineProperty((globalThis as any)._continue, "webkitDiscard", { value: Factory.propertyValue("continue", "-webkit-discard") })
  Object.defineProperty(globalThis, "copyInto", { value: Factory.property("copy-into")})
  Object.defineProperty((globalThis as any).copyInto, "none", { value: Factory.propertyValue("copy-into", "none") })
  Object.defineProperty(globalThis, "cornerShape", { value: Factory.property("corner-shape")})
  Object.defineProperty((globalThis as any).cornerShape, "round", { value: Factory.propertyValue("corner-shape", "round") })
  Object.defineProperty((globalThis as any).cornerShape, "angle", { value: Factory.propertyValue("corner-shape", "angle") })
  Object.defineProperty(globalThis, "corners", { value: Factory.property("corners")})
  Object.defineProperty(globalThis, "counterIncrement", { value: Factory.property("counter-increment")})
  Object.defineProperty((globalThis as any).counterIncrement, "none", { value: Factory.propertyValue("counter-increment", "none") })
  Object.defineProperty((globalThis as any).counterIncrement, "listItem", { value: Factory.propertyValue("counter-increment", "list-item") })
  Object.defineProperty(globalThis, "counterReset", { value: Factory.property("counter-reset")})
  Object.defineProperty((globalThis as any).counterReset, "none", { value: Factory.propertyValue("counter-reset", "none") })
  Object.defineProperty((globalThis as any).counterReset, "listItem", { value: Factory.propertyValue("counter-reset", "list-item") })
  Object.defineProperty(globalThis, "counterSet", { value: Factory.property("counter-set")})
  Object.defineProperty((globalThis as any).counterSet, "none", { value: Factory.propertyValue("counter-set", "none") })
  Object.defineProperty((globalThis as any).counterSet, "listItem", { value: Factory.propertyValue("counter-set", "list-item") })
  Object.defineProperty(globalThis, "cue", { value: Factory.property("cue")})
  Object.defineProperty(globalThis, "cueAfter", { value: Factory.property("cue-after")})
  Object.defineProperty((globalThis as any).cueAfter, "none", { value: Factory.propertyValue("cue-after", "none") })
  Object.defineProperty(globalThis, "cueBefore", { value: Factory.property("cue-before")})
  Object.defineProperty((globalThis as any).cueBefore, "none", { value: Factory.propertyValue("cue-before", "none") })
  Object.defineProperty(globalThis, "cursor", { value: Factory.property("cursor")})
  Object.defineProperty((globalThis as any).cursor, "auto", { value: Factory.propertyValue("cursor", "auto") })
  Object.defineProperty((globalThis as any).cursor, "_default", { value: Factory.propertyValue("cursor", "default") })
  Object.defineProperty((globalThis as any).cursor, "none", { value: Factory.propertyValue("cursor", "none") })
  Object.defineProperty((globalThis as any).cursor, "contextMenu", { value: Factory.propertyValue("cursor", "context-menu") })
  Object.defineProperty((globalThis as any).cursor, "help", { value: Factory.propertyValue("cursor", "help") })
  Object.defineProperty((globalThis as any).cursor, "pointer", { value: Factory.propertyValue("cursor", "pointer") })
  Object.defineProperty((globalThis as any).cursor, "progress", { value: Factory.propertyValue("cursor", "progress") })
  Object.defineProperty((globalThis as any).cursor, "wait", { value: Factory.propertyValue("cursor", "wait") })
  Object.defineProperty((globalThis as any).cursor, "cell", { value: Factory.propertyValue("cursor", "cell") })
  Object.defineProperty((globalThis as any).cursor, "crosshair", { value: Factory.propertyValue("cursor", "crosshair") })
  Object.defineProperty((globalThis as any).cursor, "text", { value: Factory.propertyValue("cursor", "text") })
  Object.defineProperty((globalThis as any).cursor, "verticalText", { value: Factory.propertyValue("cursor", "vertical-text") })
  Object.defineProperty((globalThis as any).cursor, "alias", { value: Factory.propertyValue("cursor", "alias") })
  Object.defineProperty((globalThis as any).cursor, "copy", { value: Factory.propertyValue("cursor", "copy") })
  Object.defineProperty((globalThis as any).cursor, "move", { value: Factory.propertyValue("cursor", "move") })
  Object.defineProperty((globalThis as any).cursor, "noDrop", { value: Factory.propertyValue("cursor", "no-drop") })
  Object.defineProperty((globalThis as any).cursor, "notAllowed", { value: Factory.propertyValue("cursor", "not-allowed") })
  Object.defineProperty((globalThis as any).cursor, "grab", { value: Factory.propertyValue("cursor", "grab") })
  Object.defineProperty((globalThis as any).cursor, "grabbing", { value: Factory.propertyValue("cursor", "grabbing") })
  Object.defineProperty((globalThis as any).cursor, "eResize", { value: Factory.propertyValue("cursor", "e-resize") })
  Object.defineProperty((globalThis as any).cursor, "nResize", { value: Factory.propertyValue("cursor", "n-resize") })
  Object.defineProperty((globalThis as any).cursor, "neResize", { value: Factory.propertyValue("cursor", "ne-resize") })
  Object.defineProperty((globalThis as any).cursor, "nwResize", { value: Factory.propertyValue("cursor", "nw-resize") })
  Object.defineProperty((globalThis as any).cursor, "sResize", { value: Factory.propertyValue("cursor", "s-resize") })
  Object.defineProperty((globalThis as any).cursor, "seResize", { value: Factory.propertyValue("cursor", "se-resize") })
  Object.defineProperty((globalThis as any).cursor, "swResize", { value: Factory.propertyValue("cursor", "sw-resize") })
  Object.defineProperty((globalThis as any).cursor, "wResize", { value: Factory.propertyValue("cursor", "w-resize") })
  Object.defineProperty((globalThis as any).cursor, "ewResize", { value: Factory.propertyValue("cursor", "ew-resize") })
  Object.defineProperty((globalThis as any).cursor, "nsResize", { value: Factory.propertyValue("cursor", "ns-resize") })
  Object.defineProperty((globalThis as any).cursor, "neswResize", { value: Factory.propertyValue("cursor", "nesw-resize") })
  Object.defineProperty((globalThis as any).cursor, "nwseResize", { value: Factory.propertyValue("cursor", "nwse-resize") })
  Object.defineProperty((globalThis as any).cursor, "colResize", { value: Factory.propertyValue("cursor", "col-resize") })
  Object.defineProperty((globalThis as any).cursor, "rowResize", { value: Factory.propertyValue("cursor", "row-resize") })
  Object.defineProperty((globalThis as any).cursor, "allScroll", { value: Factory.propertyValue("cursor", "all-scroll") })
  Object.defineProperty((globalThis as any).cursor, "zoomIn", { value: Factory.propertyValue("cursor", "zoom-in") })
  Object.defineProperty((globalThis as any).cursor, "zoomOut", { value: Factory.propertyValue("cursor", "zoom-out") })
  Object.defineProperty(globalThis, "cx", { value: Factory.property("cx")})
  Object.defineProperty(globalThis, "cy", { value: Factory.property("cy")})
  Object.defineProperty(globalThis, "d", { value: Factory.property("d")})
  Object.defineProperty((globalThis as any).d, "none", { value: Factory.propertyValue("d", "none") })
  Object.defineProperty(globalThis, "descentOverride", { value: Factory.property("descent-override")})
  Object.defineProperty(globalThis, "direction", { value: Factory.property("direction")})
  Object.defineProperty((globalThis as any).direction, "ltr", { value: Factory.propertyValue("direction", "ltr") })
  Object.defineProperty((globalThis as any).direction, "rtl", { value: Factory.propertyValue("direction", "rtl") })
  Object.defineProperty(globalThis, "display", { value: Factory.property("display")})
  Object.defineProperty((globalThis as any).display, "block", { value: Factory.propertyValue("display", "block") })
  Object.defineProperty((globalThis as any).display, "inline", { value: Factory.propertyValue("display", "inline") })
  Object.defineProperty((globalThis as any).display, "runIn", { value: Factory.propertyValue("display", "run-in") })
  Object.defineProperty((globalThis as any).display, "flow", { value: Factory.propertyValue("display", "flow") })
  Object.defineProperty((globalThis as any).display, "flowRoot", { value: Factory.propertyValue("display", "flow-root") })
  Object.defineProperty((globalThis as any).display, "table", { value: Factory.propertyValue("display", "table") })
  Object.defineProperty((globalThis as any).display, "flex", { value: Factory.propertyValue("display", "flex") })
  Object.defineProperty((globalThis as any).display, "grid", { value: Factory.propertyValue("display", "grid") })
  Object.defineProperty((globalThis as any).display, "ruby", { value: Factory.propertyValue("display", "ruby") })
  Object.defineProperty((globalThis as any).display, "tableRowGroup", { value: Factory.propertyValue("display", "table-row-group") })
  Object.defineProperty((globalThis as any).display, "tableHeaderGroup", { value: Factory.propertyValue("display", "table-header-group") })
  Object.defineProperty((globalThis as any).display, "tableFooterGroup", { value: Factory.propertyValue("display", "table-footer-group") })
  Object.defineProperty((globalThis as any).display, "tableRow", { value: Factory.propertyValue("display", "table-row") })
  Object.defineProperty((globalThis as any).display, "tableCell", { value: Factory.propertyValue("display", "table-cell") })
  Object.defineProperty((globalThis as any).display, "tableColumnGroup", { value: Factory.propertyValue("display", "table-column-group") })
  Object.defineProperty((globalThis as any).display, "tableColumn", { value: Factory.propertyValue("display", "table-column") })
  Object.defineProperty((globalThis as any).display, "tableCaption", { value: Factory.propertyValue("display", "table-caption") })
  Object.defineProperty((globalThis as any).display, "rubyBase", { value: Factory.propertyValue("display", "ruby-base") })
  Object.defineProperty((globalThis as any).display, "rubyText", { value: Factory.propertyValue("display", "ruby-text") })
  Object.defineProperty((globalThis as any).display, "rubyBaseContainer", { value: Factory.propertyValue("display", "ruby-base-container") })
  Object.defineProperty((globalThis as any).display, "rubyTextContainer", { value: Factory.propertyValue("display", "ruby-text-container") })
  Object.defineProperty((globalThis as any).display, "contents", { value: Factory.propertyValue("display", "contents") })
  Object.defineProperty((globalThis as any).display, "none", { value: Factory.propertyValue("display", "none") })
  Object.defineProperty((globalThis as any).display, "inlineBlock", { value: Factory.propertyValue("display", "inline-block") })
  Object.defineProperty((globalThis as any).display, "inlineTable", { value: Factory.propertyValue("display", "inline-table") })
  Object.defineProperty((globalThis as any).display, "inlineFlex", { value: Factory.propertyValue("display", "inline-flex") })
  Object.defineProperty((globalThis as any).display, "inlineGrid", { value: Factory.propertyValue("display", "inline-grid") })
  Object.defineProperty((globalThis as any).display, "listItem", { value: Factory.propertyValue("display", "list-item") })
  Object.defineProperty(globalThis, "displayAlign", { value: Factory.property("display-align")})
  Object.defineProperty(globalThis, "dominantBaseline", { value: Factory.property("dominant-baseline")})
  Object.defineProperty((globalThis as any).dominantBaseline, "auto", { value: Factory.propertyValue("dominant-baseline", "auto") })
  Object.defineProperty((globalThis as any).dominantBaseline, "textBottom", { value: Factory.propertyValue("dominant-baseline", "text-bottom") })
  Object.defineProperty((globalThis as any).dominantBaseline, "alphabetic", { value: Factory.propertyValue("dominant-baseline", "alphabetic") })
  Object.defineProperty((globalThis as any).dominantBaseline, "ideographic", { value: Factory.propertyValue("dominant-baseline", "ideographic") })
  Object.defineProperty((globalThis as any).dominantBaseline, "middle", { value: Factory.propertyValue("dominant-baseline", "middle") })
  Object.defineProperty((globalThis as any).dominantBaseline, "central", { value: Factory.propertyValue("dominant-baseline", "central") })
  Object.defineProperty((globalThis as any).dominantBaseline, "mathematical", { value: Factory.propertyValue("dominant-baseline", "mathematical") })
  Object.defineProperty((globalThis as any).dominantBaseline, "hanging", { value: Factory.propertyValue("dominant-baseline", "hanging") })
  Object.defineProperty((globalThis as any).dominantBaseline, "textTop", { value: Factory.propertyValue("dominant-baseline", "text-top") })
  Object.defineProperty(globalThis, "elevation", { value: Factory.property("elevation")})
  Object.defineProperty(globalThis, "emptyCells", { value: Factory.property("empty-cells")})
  Object.defineProperty((globalThis as any).emptyCells, "show", { value: Factory.propertyValue("empty-cells", "show") })
  Object.defineProperty((globalThis as any).emptyCells, "hide", { value: Factory.propertyValue("empty-cells", "hide") })
  Object.defineProperty(globalThis, "enableBackground", { value: Factory.property("enable-background")})
  Object.defineProperty(globalThis, "epubCaptionSide", { value: Factory.property("epub-caption-side")})
  Object.defineProperty(globalThis, "epubHyphens", { value: Factory.property("epub-hyphens")})
  Object.defineProperty(globalThis, "epubTextCombine", { value: Factory.property("epub-text-combine")})
  Object.defineProperty(globalThis, "epubTextEmphasis", { value: Factory.property("epub-text-emphasis")})
  Object.defineProperty(globalThis, "epubTextEmphasisColor", { value: Factory.property("epub-text-emphasis-color")})
  Object.defineProperty(globalThis, "epubTextEmphasisStyle", { value: Factory.property("epub-text-emphasis-style")})
  Object.defineProperty(globalThis, "epubTextOrientation", { value: Factory.property("epub-text-orientation")})
  Object.defineProperty(globalThis, "epubTextTransform", { value: Factory.property("epub-text-transform")})
  Object.defineProperty(globalThis, "epubWordBreak", { value: Factory.property("epub-word-break")})
  Object.defineProperty(globalThis, "epubWritingMode", { value: Factory.property("epub-writing-mode")})
  Object.defineProperty(globalThis, "fallback", { value: Factory.property("fallback")})
  Object.defineProperty(globalThis, "fill", { value: Factory.property("fill")})
  Object.defineProperty((globalThis as any).fill, "none", { value: Factory.propertyValue("fill", "none") })
  Object.defineProperty(globalThis, "fillBreak", { value: Factory.property("fill-break")})
  Object.defineProperty((globalThis as any).fillBreak, "boundingBox", { value: Factory.propertyValue("fill-break", "bounding-box") })
  Object.defineProperty((globalThis as any).fillBreak, "slice", { value: Factory.propertyValue("fill-break", "slice") })
  Object.defineProperty((globalThis as any).fillBreak, "clone", { value: Factory.propertyValue("fill-break", "clone") })
  Object.defineProperty(globalThis, "fillColor", { value: Factory.property("fill-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).fillColor, color, { value: Factory.propertyValue("fill-color", color) })
  }
  Object.defineProperty(globalThis, "fillImage", { value: Factory.property("fill-image")})
  Object.defineProperty((globalThis as any).fillImage, "none", { value: Factory.propertyValue("fill-image", "none") })
  Object.defineProperty(globalThis, "fillOpacity", { value: Factory.property("fill-opacity")})
  Object.defineProperty(globalThis, "fillOrigin", { value: Factory.property("fill-origin")})
  Object.defineProperty((globalThis as any).fillOrigin, "matchParent", { value: Factory.propertyValue("fill-origin", "match-parent") })
  Object.defineProperty((globalThis as any).fillOrigin, "fillBox", { value: Factory.propertyValue("fill-origin", "fill-box") })
  Object.defineProperty((globalThis as any).fillOrigin, "strokeBox", { value: Factory.propertyValue("fill-origin", "stroke-box") })
  Object.defineProperty((globalThis as any).fillOrigin, "contentBox", { value: Factory.propertyValue("fill-origin", "content-box") })
  Object.defineProperty((globalThis as any).fillOrigin, "paddingBox", { value: Factory.propertyValue("fill-origin", "padding-box") })
  Object.defineProperty((globalThis as any).fillOrigin, "borderBox", { value: Factory.propertyValue("fill-origin", "border-box") })
  Object.defineProperty(globalThis, "fillPosition", { value: Factory.property("fill-position")})
  Object.defineProperty(globalThis, "fillRepeat", { value: Factory.property("fill-repeat")})
  Object.defineProperty(globalThis, "fillRule", { value: Factory.property("fill-rule")})
  Object.defineProperty((globalThis as any).fillRule, "nonzero", { value: Factory.propertyValue("fill-rule", "nonzero") })
  Object.defineProperty((globalThis as any).fillRule, "evenodd", { value: Factory.propertyValue("fill-rule", "evenodd") })
  Object.defineProperty(globalThis, "fillSize", { value: Factory.property("fill-size")})
  Object.defineProperty(globalThis, "filter", { value: Factory.property("filter")})
  Object.defineProperty((globalThis as any).filter, "none", { value: Factory.propertyValue("filter", "none") })
  Object.defineProperty(globalThis, "flex", { value: Factory.property("flex")})
  Object.defineProperty((globalThis as any).flex, "none", { value: Factory.propertyValue("flex", "none") })
  Object.defineProperty(globalThis, "flexBasis", { value: Factory.property("flex-basis")})
  Object.defineProperty((globalThis as any).flexBasis, "content", { value: Factory.propertyValue("flex-basis", "content") })
  Object.defineProperty((globalThis as any).flexBasis, "auto", { value: Factory.propertyValue("flex-basis", "auto") })
  Object.defineProperty(globalThis, "flexDirection", { value: Factory.property("flex-direction")})
  Object.defineProperty((globalThis as any).flexDirection, "row", { value: Factory.propertyValue("flex-direction", "row") })
  Object.defineProperty((globalThis as any).flexDirection, "rowReverse", { value: Factory.propertyValue("flex-direction", "row-reverse") })
  Object.defineProperty((globalThis as any).flexDirection, "column", { value: Factory.propertyValue("flex-direction", "column") })
  Object.defineProperty((globalThis as any).flexDirection, "columnReverse", { value: Factory.propertyValue("flex-direction", "column-reverse") })
  Object.defineProperty(globalThis, "flexFlow", { value: Factory.property("flex-flow")})
  Object.defineProperty(globalThis, "flexGrow", { value: Factory.property("flex-grow")})
  Object.defineProperty(globalThis, "flexShrink", { value: Factory.property("flex-shrink")})
  Object.defineProperty(globalThis, "flexWrap", { value: Factory.property("flex-wrap")})
  Object.defineProperty((globalThis as any).flexWrap, "nowrap", { value: Factory.propertyValue("flex-wrap", "nowrap") })
  Object.defineProperty((globalThis as any).flexWrap, "wrap", { value: Factory.propertyValue("flex-wrap", "wrap") })
  Object.defineProperty((globalThis as any).flexWrap, "wrapReverse", { value: Factory.propertyValue("flex-wrap", "wrap-reverse") })
  Object.defineProperty(globalThis, "float", { value: Factory.property("float")})
  Object.defineProperty((globalThis as any).float, "blockStart", { value: Factory.propertyValue("float", "block-start") })
  Object.defineProperty((globalThis as any).float, "blockEnd", { value: Factory.propertyValue("float", "block-end") })
  Object.defineProperty((globalThis as any).float, "inlineStart", { value: Factory.propertyValue("float", "inline-start") })
  Object.defineProperty((globalThis as any).float, "inlineEnd", { value: Factory.propertyValue("float", "inline-end") })
  Object.defineProperty((globalThis as any).float, "snapBlock", { value: Factory.propertyValue("float", "snap-block") })
  Object.defineProperty((globalThis as any).float, "snapInline", { value: Factory.propertyValue("float", "snap-inline") })
  Object.defineProperty((globalThis as any).float, "left", { value: Factory.propertyValue("float", "left") })
  Object.defineProperty((globalThis as any).float, "right", { value: Factory.propertyValue("float", "right") })
  Object.defineProperty((globalThis as any).float, "top", { value: Factory.propertyValue("float", "top") })
  Object.defineProperty((globalThis as any).float, "bottom", { value: Factory.propertyValue("float", "bottom") })
  Object.defineProperty((globalThis as any).float, "none", { value: Factory.propertyValue("float", "none") })
  Object.defineProperty((globalThis as any).float, "footnote", { value: Factory.propertyValue("float", "footnote") })
  Object.defineProperty(globalThis, "floatDefer", { value: Factory.property("float-defer")})
  Object.defineProperty((globalThis as any).floatDefer, "last", { value: Factory.propertyValue("float-defer", "last") })
  Object.defineProperty((globalThis as any).floatDefer, "none", { value: Factory.propertyValue("float-defer", "none") })
  Object.defineProperty(globalThis, "floatOffset", { value: Factory.property("float-offset")})
  Object.defineProperty(globalThis, "floatReference", { value: Factory.property("float-reference")})
  Object.defineProperty((globalThis as any).floatReference, "inline", { value: Factory.propertyValue("float-reference", "inline") })
  Object.defineProperty((globalThis as any).floatReference, "column", { value: Factory.propertyValue("float-reference", "column") })
  Object.defineProperty((globalThis as any).floatReference, "region", { value: Factory.propertyValue("float-reference", "region") })
  Object.defineProperty((globalThis as any).floatReference, "page", { value: Factory.propertyValue("float-reference", "page") })
  Object.defineProperty(globalThis, "floodColor", { value: Factory.property("flood-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).floodColor, color, { value: Factory.propertyValue("flood-color", color) })
  }
  Object.defineProperty(globalThis, "floodOpacity", { value: Factory.property("flood-opacity")})
  Object.defineProperty(globalThis, "flow", { value: Factory.property("flow")})
  Object.defineProperty(globalThis, "flowFrom", { value: Factory.property("flow-from")})
  Object.defineProperty((globalThis as any).flowFrom, "none", { value: Factory.propertyValue("flow-from", "none") })
  Object.defineProperty(globalThis, "flowInto", { value: Factory.property("flow-into")})
  Object.defineProperty((globalThis as any).flowInto, "none", { value: Factory.propertyValue("flow-into", "none") })
  Object.defineProperty((globalThis as any).flowInto, "element", { value: Factory.propertyValue("flow-into", "element") })
  Object.defineProperty((globalThis as any).flowInto, "content", { value: Factory.propertyValue("flow-into", "content") })
  Object.defineProperty(globalThis, "font", { value: Factory.property("font")})
  Object.defineProperty((globalThis as any).font, "caption", { value: Factory.propertyValue("font", "caption") })
  Object.defineProperty((globalThis as any).font, "icon", { value: Factory.propertyValue("font", "icon") })
  Object.defineProperty((globalThis as any).font, "menu", { value: Factory.propertyValue("font", "menu") })
  Object.defineProperty((globalThis as any).font, "messageBox", { value: Factory.propertyValue("font", "message-box") })
  Object.defineProperty((globalThis as any).font, "smallCaption", { value: Factory.propertyValue("font", "small-caption") })
  Object.defineProperty((globalThis as any).font, "statusBar", { value: Factory.propertyValue("font", "status-bar") })
  Object.defineProperty(globalThis, "fontDisplay", { value: Factory.property("font-display")})
  Object.defineProperty(globalThis, "fontFamily", { value: Factory.property("font-family")})
  Object.defineProperty((globalThis as any).fontFamily, "serif", { value: Factory.propertyValue("font-family", "serif") })
  Object.defineProperty((globalThis as any).fontFamily, "sansSerif", { value: Factory.propertyValue("font-family", "sans-serif") })
  Object.defineProperty((globalThis as any).fontFamily, "cursive", { value: Factory.propertyValue("font-family", "cursive") })
  Object.defineProperty((globalThis as any).fontFamily, "fantasy", { value: Factory.propertyValue("font-family", "fantasy") })
  Object.defineProperty((globalThis as any).fontFamily, "monospace", { value: Factory.propertyValue("font-family", "monospace") })
  Object.defineProperty((globalThis as any).fontFamily, "systemUi", { value: Factory.propertyValue("font-family", "system-ui") })
  Object.defineProperty((globalThis as any).fontFamily, "emoji", { value: Factory.propertyValue("font-family", "emoji") })
  Object.defineProperty((globalThis as any).fontFamily, "math", { value: Factory.propertyValue("font-family", "math") })
  Object.defineProperty((globalThis as any).fontFamily, "fangsong", { value: Factory.propertyValue("font-family", "fangsong") })
  Object.defineProperty((globalThis as any).fontFamily, "uiSerif", { value: Factory.propertyValue("font-family", "ui-serif") })
  Object.defineProperty((globalThis as any).fontFamily, "uiSansSerif", { value: Factory.propertyValue("font-family", "ui-sans-serif") })
  Object.defineProperty((globalThis as any).fontFamily, "uiMonospace", { value: Factory.propertyValue("font-family", "ui-monospace") })
  Object.defineProperty((globalThis as any).fontFamily, "uiRounded", { value: Factory.propertyValue("font-family", "ui-rounded") })
  Object.defineProperty(globalThis, "fontFeatureSettings", { value: Factory.property("font-feature-settings")})
  Object.defineProperty((globalThis as any).fontFeatureSettings, "normal", { value: Factory.propertyValue("font-feature-settings", "normal") })
  Object.defineProperty(globalThis, "fontKerning", { value: Factory.property("font-kerning")})
  Object.defineProperty((globalThis as any).fontKerning, "auto", { value: Factory.propertyValue("font-kerning", "auto") })
  Object.defineProperty((globalThis as any).fontKerning, "normal", { value: Factory.propertyValue("font-kerning", "normal") })
  Object.defineProperty((globalThis as any).fontKerning, "none", { value: Factory.propertyValue("font-kerning", "none") })
  Object.defineProperty(globalThis, "fontLanguageOverride", { value: Factory.property("font-language-override")})
  Object.defineProperty((globalThis as any).fontLanguageOverride, "normal", { value: Factory.propertyValue("font-language-override", "normal") })
  Object.defineProperty(globalThis, "fontOpticalSizing", { value: Factory.property("font-optical-sizing")})
  Object.defineProperty((globalThis as any).fontOpticalSizing, "auto", { value: Factory.propertyValue("font-optical-sizing", "auto") })
  Object.defineProperty((globalThis as any).fontOpticalSizing, "none", { value: Factory.propertyValue("font-optical-sizing", "none") })
  Object.defineProperty(globalThis, "fontPalette", { value: Factory.property("font-palette")})
  Object.defineProperty((globalThis as any).fontPalette, "normal", { value: Factory.propertyValue("font-palette", "normal") })
  Object.defineProperty((globalThis as any).fontPalette, "light", { value: Factory.propertyValue("font-palette", "light") })
  Object.defineProperty((globalThis as any).fontPalette, "dark", { value: Factory.propertyValue("font-palette", "dark") })
  Object.defineProperty(globalThis, "fontSize", { value: Factory.property("font-size")})
  Object.defineProperty((globalThis as any).fontSize, "math", { value: Factory.propertyValue("font-size", "math") })
  Object.defineProperty(globalThis, "fontSizeAdjust", { value: Factory.property("font-size-adjust")})
  Object.defineProperty((globalThis as any).fontSizeAdjust, "none", { value: Factory.propertyValue("font-size-adjust", "none") })
  Object.defineProperty((globalThis as any).fontSizeAdjust, "exHeight", { value: Factory.propertyValue("font-size-adjust", "ex-height") })
  Object.defineProperty((globalThis as any).fontSizeAdjust, "capHeight", { value: Factory.propertyValue("font-size-adjust", "cap-height") })
  Object.defineProperty((globalThis as any).fontSizeAdjust, "chWidth", { value: Factory.propertyValue("font-size-adjust", "ch-width") })
  Object.defineProperty((globalThis as any).fontSizeAdjust, "icWidth", { value: Factory.propertyValue("font-size-adjust", "ic-width") })
  Object.defineProperty((globalThis as any).fontSizeAdjust, "icHeight", { value: Factory.propertyValue("font-size-adjust", "ic-height") })
  Object.defineProperty((globalThis as any).fontSizeAdjust, "fromFont", { value: Factory.propertyValue("font-size-adjust", "from-font") })
  Object.defineProperty(globalThis, "fontStretch", { value: Factory.property("font-stretch")})
  Object.defineProperty((globalThis as any).fontStretch, "normal", { value: Factory.propertyValue("font-stretch", "normal") })
  Object.defineProperty((globalThis as any).fontStretch, "ultraCondensed", { value: Factory.propertyValue("font-stretch", "ultra-condensed") })
  Object.defineProperty((globalThis as any).fontStretch, "extraCondensed", { value: Factory.propertyValue("font-stretch", "extra-condensed") })
  Object.defineProperty((globalThis as any).fontStretch, "condensed", { value: Factory.propertyValue("font-stretch", "condensed") })
  Object.defineProperty((globalThis as any).fontStretch, "semiCondensed", { value: Factory.propertyValue("font-stretch", "semi-condensed") })
  Object.defineProperty((globalThis as any).fontStretch, "semiExpanded", { value: Factory.propertyValue("font-stretch", "semi-expanded") })
  Object.defineProperty((globalThis as any).fontStretch, "expanded", { value: Factory.propertyValue("font-stretch", "expanded") })
  Object.defineProperty((globalThis as any).fontStretch, "extraExpanded", { value: Factory.propertyValue("font-stretch", "extra-expanded") })
  Object.defineProperty((globalThis as any).fontStretch, "ultraExpanded", { value: Factory.propertyValue("font-stretch", "ultra-expanded") })
  Object.defineProperty(globalThis, "fontStyle", { value: Factory.property("font-style")})
  Object.defineProperty((globalThis as any).fontStyle, "normal", { value: Factory.propertyValue("font-style", "normal") })
  Object.defineProperty((globalThis as any).fontStyle, "italic", { value: Factory.propertyValue("font-style", "italic") })
  Object.defineProperty((globalThis as any).fontStyle, "oblique", { value: Factory.propertyValue("font-style", "oblique") })
  Object.defineProperty(globalThis, "fontSynthesis", { value: Factory.property("font-synthesis")})
  Object.defineProperty((globalThis as any).fontSynthesis, "none", { value: Factory.propertyValue("font-synthesis", "none") })
  Object.defineProperty((globalThis as any).fontSynthesis, "weight", { value: Factory.propertyValue("font-synthesis", "weight") })
  Object.defineProperty((globalThis as any).fontSynthesis, "style", { value: Factory.propertyValue("font-synthesis", "style") })
  Object.defineProperty((globalThis as any).fontSynthesis, "smallCaps", { value: Factory.propertyValue("font-synthesis", "small-caps") })
  Object.defineProperty(globalThis, "fontSynthesisSmallCaps", { value: Factory.property("font-synthesis-small-caps")})
  Object.defineProperty((globalThis as any).fontSynthesisSmallCaps, "auto", { value: Factory.propertyValue("font-synthesis-small-caps", "auto") })
  Object.defineProperty((globalThis as any).fontSynthesisSmallCaps, "none", { value: Factory.propertyValue("font-synthesis-small-caps", "none") })
  Object.defineProperty(globalThis, "fontSynthesisStyle", { value: Factory.property("font-synthesis-style")})
  Object.defineProperty((globalThis as any).fontSynthesisStyle, "auto", { value: Factory.propertyValue("font-synthesis-style", "auto") })
  Object.defineProperty((globalThis as any).fontSynthesisStyle, "none", { value: Factory.propertyValue("font-synthesis-style", "none") })
  Object.defineProperty(globalThis, "fontSynthesisWeight", { value: Factory.property("font-synthesis-weight")})
  Object.defineProperty((globalThis as any).fontSynthesisWeight, "auto", { value: Factory.propertyValue("font-synthesis-weight", "auto") })
  Object.defineProperty((globalThis as any).fontSynthesisWeight, "none", { value: Factory.propertyValue("font-synthesis-weight", "none") })
  Object.defineProperty(globalThis, "fontVariant", { value: Factory.property("font-variant")})
  Object.defineProperty((globalThis as any).fontVariant, "normal", { value: Factory.propertyValue("font-variant", "normal") })
  Object.defineProperty((globalThis as any).fontVariant, "none", { value: Factory.propertyValue("font-variant", "none") })
  Object.defineProperty((globalThis as any).fontVariant, "smallCaps", { value: Factory.propertyValue("font-variant", "small-caps") })
  Object.defineProperty((globalThis as any).fontVariant, "allSmallCaps", { value: Factory.propertyValue("font-variant", "all-small-caps") })
  Object.defineProperty((globalThis as any).fontVariant, "petiteCaps", { value: Factory.propertyValue("font-variant", "petite-caps") })
  Object.defineProperty((globalThis as any).fontVariant, "allPetiteCaps", { value: Factory.propertyValue("font-variant", "all-petite-caps") })
  Object.defineProperty((globalThis as any).fontVariant, "unicase", { value: Factory.propertyValue("font-variant", "unicase") })
  Object.defineProperty((globalThis as any).fontVariant, "titlingCaps", { value: Factory.propertyValue("font-variant", "titling-caps") })
  Object.defineProperty((globalThis as any).fontVariant, "historicalForms", { value: Factory.propertyValue("font-variant", "historical-forms") })
  Object.defineProperty((globalThis as any).fontVariant, "ordinal", { value: Factory.propertyValue("font-variant", "ordinal") })
  Object.defineProperty((globalThis as any).fontVariant, "slashedZero", { value: Factory.propertyValue("font-variant", "slashed-zero") })
  Object.defineProperty((globalThis as any).fontVariant, "ruby", { value: Factory.propertyValue("font-variant", "ruby") })
  Object.defineProperty((globalThis as any).fontVariant, "sub", { value: Factory.propertyValue("font-variant", "sub") })
  Object.defineProperty((globalThis as any).fontVariant, "_super", { value: Factory.propertyValue("font-variant", "super") })
  Object.defineProperty((globalThis as any).fontVariant, "text", { value: Factory.propertyValue("font-variant", "text") })
  Object.defineProperty((globalThis as any).fontVariant, "emoji", { value: Factory.propertyValue("font-variant", "emoji") })
  Object.defineProperty((globalThis as any).fontVariant, "unicode", { value: Factory.propertyValue("font-variant", "unicode") })
  Object.defineProperty(globalThis, "fontVariantAlternates", { value: Factory.property("font-variant-alternates")})
  Object.defineProperty((globalThis as any).fontVariantAlternates, "normal", { value: Factory.propertyValue("font-variant-alternates", "normal") })
  Object.defineProperty((globalThis as any).fontVariantAlternates, "historicalForms", { value: Factory.propertyValue("font-variant-alternates", "historical-forms") })
  Object.defineProperty(globalThis, "fontVariantCaps", { value: Factory.property("font-variant-caps")})
  Object.defineProperty((globalThis as any).fontVariantCaps, "normal", { value: Factory.propertyValue("font-variant-caps", "normal") })
  Object.defineProperty((globalThis as any).fontVariantCaps, "smallCaps", { value: Factory.propertyValue("font-variant-caps", "small-caps") })
  Object.defineProperty((globalThis as any).fontVariantCaps, "allSmallCaps", { value: Factory.propertyValue("font-variant-caps", "all-small-caps") })
  Object.defineProperty((globalThis as any).fontVariantCaps, "petiteCaps", { value: Factory.propertyValue("font-variant-caps", "petite-caps") })
  Object.defineProperty((globalThis as any).fontVariantCaps, "allPetiteCaps", { value: Factory.propertyValue("font-variant-caps", "all-petite-caps") })
  Object.defineProperty((globalThis as any).fontVariantCaps, "unicase", { value: Factory.propertyValue("font-variant-caps", "unicase") })
  Object.defineProperty((globalThis as any).fontVariantCaps, "titlingCaps", { value: Factory.propertyValue("font-variant-caps", "titling-caps") })
  Object.defineProperty(globalThis, "fontVariantEastAsian", { value: Factory.property("font-variant-east-asian")})
  Object.defineProperty((globalThis as any).fontVariantEastAsian, "normal", { value: Factory.propertyValue("font-variant-east-asian", "normal") })
  Object.defineProperty((globalThis as any).fontVariantEastAsian, "ruby", { value: Factory.propertyValue("font-variant-east-asian", "ruby") })
  Object.defineProperty((globalThis as any).fontVariantEastAsian, "jis78", { value: Factory.propertyValue("font-variant-east-asian", "jis78") })
  Object.defineProperty((globalThis as any).fontVariantEastAsian, "jis83", { value: Factory.propertyValue("font-variant-east-asian", "jis83") })
  Object.defineProperty((globalThis as any).fontVariantEastAsian, "jis90", { value: Factory.propertyValue("font-variant-east-asian", "jis90") })
  Object.defineProperty((globalThis as any).fontVariantEastAsian, "jis04", { value: Factory.propertyValue("font-variant-east-asian", "jis04") })
  Object.defineProperty((globalThis as any).fontVariantEastAsian, "simplified", { value: Factory.propertyValue("font-variant-east-asian", "simplified") })
  Object.defineProperty((globalThis as any).fontVariantEastAsian, "traditional", { value: Factory.propertyValue("font-variant-east-asian", "traditional") })
  Object.defineProperty((globalThis as any).fontVariantEastAsian, "fullWidth", { value: Factory.propertyValue("font-variant-east-asian", "full-width") })
  Object.defineProperty((globalThis as any).fontVariantEastAsian, "proportionalWidth", { value: Factory.propertyValue("font-variant-east-asian", "proportional-width") })
  Object.defineProperty(globalThis, "fontVariantEmoji", { value: Factory.property("font-variant-emoji")})
  Object.defineProperty((globalThis as any).fontVariantEmoji, "normal", { value: Factory.propertyValue("font-variant-emoji", "normal") })
  Object.defineProperty((globalThis as any).fontVariantEmoji, "text", { value: Factory.propertyValue("font-variant-emoji", "text") })
  Object.defineProperty((globalThis as any).fontVariantEmoji, "emoji", { value: Factory.propertyValue("font-variant-emoji", "emoji") })
  Object.defineProperty((globalThis as any).fontVariantEmoji, "unicode", { value: Factory.propertyValue("font-variant-emoji", "unicode") })
  Object.defineProperty(globalThis, "fontVariantLigatures", { value: Factory.property("font-variant-ligatures")})
  Object.defineProperty((globalThis as any).fontVariantLigatures, "normal", { value: Factory.propertyValue("font-variant-ligatures", "normal") })
  Object.defineProperty((globalThis as any).fontVariantLigatures, "none", { value: Factory.propertyValue("font-variant-ligatures", "none") })
  Object.defineProperty((globalThis as any).fontVariantLigatures, "commonLigatures", { value: Factory.propertyValue("font-variant-ligatures", "common-ligatures") })
  Object.defineProperty((globalThis as any).fontVariantLigatures, "noCommonLigatures", { value: Factory.propertyValue("font-variant-ligatures", "no-common-ligatures") })
  Object.defineProperty((globalThis as any).fontVariantLigatures, "discretionaryLigatures", { value: Factory.propertyValue("font-variant-ligatures", "discretionary-ligatures") })
  Object.defineProperty((globalThis as any).fontVariantLigatures, "noDiscretionaryLigatures", { value: Factory.propertyValue("font-variant-ligatures", "no-discretionary-ligatures") })
  Object.defineProperty((globalThis as any).fontVariantLigatures, "historicalLigatures", { value: Factory.propertyValue("font-variant-ligatures", "historical-ligatures") })
  Object.defineProperty((globalThis as any).fontVariantLigatures, "noHistoricalLigatures", { value: Factory.propertyValue("font-variant-ligatures", "no-historical-ligatures") })
  Object.defineProperty((globalThis as any).fontVariantLigatures, "contextual", { value: Factory.propertyValue("font-variant-ligatures", "contextual") })
  Object.defineProperty((globalThis as any).fontVariantLigatures, "noContextual", { value: Factory.propertyValue("font-variant-ligatures", "no-contextual") })
  Object.defineProperty(globalThis, "fontVariantNumeric", { value: Factory.property("font-variant-numeric")})
  Object.defineProperty((globalThis as any).fontVariantNumeric, "normal", { value: Factory.propertyValue("font-variant-numeric", "normal") })
  Object.defineProperty((globalThis as any).fontVariantNumeric, "ordinal", { value: Factory.propertyValue("font-variant-numeric", "ordinal") })
  Object.defineProperty((globalThis as any).fontVariantNumeric, "slashedZero", { value: Factory.propertyValue("font-variant-numeric", "slashed-zero") })
  Object.defineProperty((globalThis as any).fontVariantNumeric, "liningNums", { value: Factory.propertyValue("font-variant-numeric", "lining-nums") })
  Object.defineProperty((globalThis as any).fontVariantNumeric, "oldstyleNums", { value: Factory.propertyValue("font-variant-numeric", "oldstyle-nums") })
  Object.defineProperty((globalThis as any).fontVariantNumeric, "proportionalNums", { value: Factory.propertyValue("font-variant-numeric", "proportional-nums") })
  Object.defineProperty((globalThis as any).fontVariantNumeric, "tabularNums", { value: Factory.propertyValue("font-variant-numeric", "tabular-nums") })
  Object.defineProperty((globalThis as any).fontVariantNumeric, "diagonalFractions", { value: Factory.propertyValue("font-variant-numeric", "diagonal-fractions") })
  Object.defineProperty((globalThis as any).fontVariantNumeric, "stackedFractions", { value: Factory.propertyValue("font-variant-numeric", "stacked-fractions") })
  Object.defineProperty(globalThis, "fontVariantPosition", { value: Factory.property("font-variant-position")})
  Object.defineProperty((globalThis as any).fontVariantPosition, "normal", { value: Factory.propertyValue("font-variant-position", "normal") })
  Object.defineProperty((globalThis as any).fontVariantPosition, "sub", { value: Factory.propertyValue("font-variant-position", "sub") })
  Object.defineProperty((globalThis as any).fontVariantPosition, "_super", { value: Factory.propertyValue("font-variant-position", "super") })
  Object.defineProperty(globalThis, "fontVariationSettings", { value: Factory.property("font-variation-settings")})
  Object.defineProperty((globalThis as any).fontVariationSettings, "normal", { value: Factory.propertyValue("font-variation-settings", "normal") })
  Object.defineProperty(globalThis, "fontWeight", { value: Factory.property("font-weight")})
  Object.defineProperty((globalThis as any).fontWeight, "bolder", { value: Factory.propertyValue("font-weight", "bolder") })
  Object.defineProperty((globalThis as any).fontWeight, "lighter", { value: Factory.propertyValue("font-weight", "lighter") })
  Object.defineProperty((globalThis as any).fontWeight, "normal", { value: Factory.propertyValue("font-weight", "normal") })
  Object.defineProperty((globalThis as any).fontWeight, "bold", { value: Factory.propertyValue("font-weight", "bold") })
  Object.defineProperty(globalThis, "footnoteDisplay", { value: Factory.property("footnote-display")})
  Object.defineProperty((globalThis as any).footnoteDisplay, "block", { value: Factory.propertyValue("footnote-display", "block") })
  Object.defineProperty((globalThis as any).footnoteDisplay, "inline", { value: Factory.propertyValue("footnote-display", "inline") })
  Object.defineProperty((globalThis as any).footnoteDisplay, "compact", { value: Factory.propertyValue("footnote-display", "compact") })
  Object.defineProperty(globalThis, "footnotePolicy", { value: Factory.property("footnote-policy")})
  Object.defineProperty((globalThis as any).footnotePolicy, "auto", { value: Factory.propertyValue("footnote-policy", "auto") })
  Object.defineProperty((globalThis as any).footnotePolicy, "line", { value: Factory.propertyValue("footnote-policy", "line") })
  Object.defineProperty((globalThis as any).footnotePolicy, "block", { value: Factory.propertyValue("footnote-policy", "block") })
  Object.defineProperty(globalThis, "forcedColorAdjust", { value: Factory.property("forced-color-adjust")})
  Object.defineProperty((globalThis as any).forcedColorAdjust, "auto", { value: Factory.propertyValue("forced-color-adjust", "auto") })
  Object.defineProperty((globalThis as any).forcedColorAdjust, "none", { value: Factory.propertyValue("forced-color-adjust", "none") })
  Object.defineProperty((globalThis as any).forcedColorAdjust, "preserveParentColor", { value: Factory.propertyValue("forced-color-adjust", "preserve-parent-color") })
  Object.defineProperty(globalThis, "gap", { value: Factory.property("gap")})
  Object.defineProperty((globalThis as any).gap, "normal", { value: Factory.propertyValue("gap", "normal") })
  Object.defineProperty(globalThis, "glyphOrientationHorizontal", { value: Factory.property("glyph-orientation-horizontal")})
  Object.defineProperty(globalThis, "glyphOrientationVertical", { value: Factory.property("glyph-orientation-vertical")})
  Object.defineProperty((globalThis as any).glyphOrientationVertical, "auto", { value: Factory.propertyValue("glyph-orientation-vertical", "auto") })
  Object.defineProperty(globalThis, "grid", { value: Factory.property("grid")})
  Object.defineProperty((globalThis as any).grid, "autoFlow", { value: Factory.propertyValue("grid", "auto-flow") })
  Object.defineProperty((globalThis as any).grid, "dense", { value: Factory.propertyValue("grid", "dense") })
  Object.defineProperty(globalThis, "gridArea", { value: Factory.property("grid-area")})
  Object.defineProperty(globalThis, "gridAutoColumns", { value: Factory.property("grid-auto-columns")})
  Object.defineProperty(globalThis, "gridAutoFlow", { value: Factory.property("grid-auto-flow")})
  Object.defineProperty((globalThis as any).gridAutoFlow, "row", { value: Factory.propertyValue("grid-auto-flow", "row") })
  Object.defineProperty((globalThis as any).gridAutoFlow, "column", { value: Factory.propertyValue("grid-auto-flow", "column") })
  Object.defineProperty((globalThis as any).gridAutoFlow, "dense", { value: Factory.propertyValue("grid-auto-flow", "dense") })
  Object.defineProperty(globalThis, "gridAutoRows", { value: Factory.property("grid-auto-rows")})
  Object.defineProperty(globalThis, "gridColumn", { value: Factory.property("grid-column")})
  Object.defineProperty(globalThis, "gridColumnEnd", { value: Factory.property("grid-column-end")})
  Object.defineProperty(globalThis, "gridColumnGap", { value: Factory.property("grid-column-gap")})
  Object.defineProperty(globalThis, "gridColumnStart", { value: Factory.property("grid-column-start")})
  Object.defineProperty(globalThis, "gridGap", { value: Factory.property("grid-gap")})
  Object.defineProperty(globalThis, "gridRow", { value: Factory.property("grid-row")})
  Object.defineProperty(globalThis, "gridRowEnd", { value: Factory.property("grid-row-end")})
  Object.defineProperty(globalThis, "gridRowGap", { value: Factory.property("grid-row-gap")})
  Object.defineProperty(globalThis, "gridRowStart", { value: Factory.property("grid-row-start")})
  Object.defineProperty(globalThis, "gridTemplate", { value: Factory.property("grid-template")})
  Object.defineProperty((globalThis as any).gridTemplate, "none", { value: Factory.propertyValue("grid-template", "none") })
  Object.defineProperty(globalThis, "gridTemplateAreas", { value: Factory.property("grid-template-areas")})
  Object.defineProperty((globalThis as any).gridTemplateAreas, "none", { value: Factory.propertyValue("grid-template-areas", "none") })
  Object.defineProperty(globalThis, "gridTemplateColumns", { value: Factory.property("grid-template-columns")})
  Object.defineProperty((globalThis as any).gridTemplateColumns, "none", { value: Factory.propertyValue("grid-template-columns", "none") })
  Object.defineProperty((globalThis as any).gridTemplateColumns, "subgrid", { value: Factory.propertyValue("grid-template-columns", "subgrid") })
  Object.defineProperty((globalThis as any).gridTemplateColumns, "auto", { value: Factory.propertyValue("grid-template-columns", "auto") })
  Object.defineProperty((globalThis as any).gridTemplateColumns, "maxContent", { value: Factory.propertyValue("grid-template-columns", "max-content") })
  Object.defineProperty((globalThis as any).gridTemplateColumns, "minContent", { value: Factory.propertyValue("grid-template-columns", "min-content") })
  Object.defineProperty(globalThis, "gridTemplateRows", { value: Factory.property("grid-template-rows")})
  Object.defineProperty((globalThis as any).gridTemplateRows, "none", { value: Factory.propertyValue("grid-template-rows", "none") })
  Object.defineProperty((globalThis as any).gridTemplateRows, "subgrid", { value: Factory.propertyValue("grid-template-rows", "subgrid") })
  Object.defineProperty((globalThis as any).gridTemplateRows, "auto", { value: Factory.propertyValue("grid-template-rows", "auto") })
  Object.defineProperty((globalThis as any).gridTemplateRows, "maxContent", { value: Factory.propertyValue("grid-template-rows", "max-content") })
  Object.defineProperty((globalThis as any).gridTemplateRows, "minContent", { value: Factory.propertyValue("grid-template-rows", "min-content") })
  Object.defineProperty(globalThis, "hangingPunctuation", { value: Factory.property("hanging-punctuation")})
  Object.defineProperty((globalThis as any).hangingPunctuation, "none", { value: Factory.propertyValue("hanging-punctuation", "none") })
  Object.defineProperty((globalThis as any).hangingPunctuation, "first", { value: Factory.propertyValue("hanging-punctuation", "first") })
  Object.defineProperty((globalThis as any).hangingPunctuation, "forceEnd", { value: Factory.propertyValue("hanging-punctuation", "force-end") })
  Object.defineProperty((globalThis as any).hangingPunctuation, "allowEnd", { value: Factory.propertyValue("hanging-punctuation", "allow-end") })
  Object.defineProperty((globalThis as any).hangingPunctuation, "last", { value: Factory.propertyValue("hanging-punctuation", "last") })
  Object.defineProperty(globalThis, "height", { value: Factory.property("height")})
  Object.defineProperty((globalThis as any).height, "stretch", { value: Factory.propertyValue("height", "stretch") })
  Object.defineProperty((globalThis as any).height, "fitContent", { value: Factory.propertyValue("height", "fit-content") })
  Object.defineProperty((globalThis as any).height, "contain", { value: Factory.propertyValue("height", "contain") })
  Object.defineProperty((globalThis as any).height, "auto", { value: Factory.propertyValue("height", "auto") })
  Object.defineProperty((globalThis as any).height, "minContent", { value: Factory.propertyValue("height", "min-content") })
  Object.defineProperty((globalThis as any).height, "maxContent", { value: Factory.propertyValue("height", "max-content") })
  Object.defineProperty(globalThis, "hyphenateCharacter", { value: Factory.property("hyphenate-character")})
  Object.defineProperty((globalThis as any).hyphenateCharacter, "auto", { value: Factory.propertyValue("hyphenate-character", "auto") })
  Object.defineProperty(globalThis, "hyphenateLimitChars", { value: Factory.property("hyphenate-limit-chars")})
  Object.defineProperty((globalThis as any).hyphenateLimitChars, "auto", { value: Factory.propertyValue("hyphenate-limit-chars", "auto") })
  Object.defineProperty(globalThis, "hyphenateLimitLast", { value: Factory.property("hyphenate-limit-last")})
  Object.defineProperty((globalThis as any).hyphenateLimitLast, "none", { value: Factory.propertyValue("hyphenate-limit-last", "none") })
  Object.defineProperty((globalThis as any).hyphenateLimitLast, "always", { value: Factory.propertyValue("hyphenate-limit-last", "always") })
  Object.defineProperty((globalThis as any).hyphenateLimitLast, "column", { value: Factory.propertyValue("hyphenate-limit-last", "column") })
  Object.defineProperty((globalThis as any).hyphenateLimitLast, "page", { value: Factory.propertyValue("hyphenate-limit-last", "page") })
  Object.defineProperty((globalThis as any).hyphenateLimitLast, "spread", { value: Factory.propertyValue("hyphenate-limit-last", "spread") })
  Object.defineProperty(globalThis, "hyphenateLimitLines", { value: Factory.property("hyphenate-limit-lines")})
  Object.defineProperty((globalThis as any).hyphenateLimitLines, "noLimit", { value: Factory.propertyValue("hyphenate-limit-lines", "no-limit") })
  Object.defineProperty((globalThis as any).hyphenateLimitLines, "none", { value: Factory.propertyValue("hyphenate-limit-lines", "none") })
  Object.defineProperty((globalThis as any).hyphenateLimitLines, "always", { value: Factory.propertyValue("hyphenate-limit-lines", "always") })
  Object.defineProperty((globalThis as any).hyphenateLimitLines, "column", { value: Factory.propertyValue("hyphenate-limit-lines", "column") })
  Object.defineProperty((globalThis as any).hyphenateLimitLines, "page", { value: Factory.propertyValue("hyphenate-limit-lines", "page") })
  Object.defineProperty((globalThis as any).hyphenateLimitLines, "spread", { value: Factory.propertyValue("hyphenate-limit-lines", "spread") })
  Object.defineProperty(globalThis, "hyphenateLimitZone", { value: Factory.property("hyphenate-limit-zone")})
  Object.defineProperty(globalThis, "hyphens", { value: Factory.property("hyphens")})
  Object.defineProperty((globalThis as any).hyphens, "none", { value: Factory.propertyValue("hyphens", "none") })
  Object.defineProperty((globalThis as any).hyphens, "manual", { value: Factory.propertyValue("hyphens", "manual") })
  Object.defineProperty((globalThis as any).hyphens, "auto", { value: Factory.propertyValue("hyphens", "auto") })
  Object.defineProperty(globalThis, "imageOrientation", { value: Factory.property("image-orientation")})
  Object.defineProperty((globalThis as any).imageOrientation, "fromImage", { value: Factory.propertyValue("image-orientation", "from-image") })
  Object.defineProperty((globalThis as any).imageOrientation, "none", { value: Factory.propertyValue("image-orientation", "none") })
  Object.defineProperty((globalThis as any).imageOrientation, "flip", { value: Factory.propertyValue("image-orientation", "flip") })
  Object.defineProperty(globalThis, "imageRendering", { value: Factory.property("image-rendering")})
  Object.defineProperty((globalThis as any).imageRendering, "auto", { value: Factory.propertyValue("image-rendering", "auto") })
  Object.defineProperty((globalThis as any).imageRendering, "smooth", { value: Factory.propertyValue("image-rendering", "smooth") })
  Object.defineProperty((globalThis as any).imageRendering, "highQuality", { value: Factory.propertyValue("image-rendering", "high-quality") })
  Object.defineProperty((globalThis as any).imageRendering, "pixelated", { value: Factory.propertyValue("image-rendering", "pixelated") })
  Object.defineProperty((globalThis as any).imageRendering, "crispEdges", { value: Factory.propertyValue("image-rendering", "crisp-edges") })
  Object.defineProperty(globalThis, "imageResolution", { value: Factory.property("image-resolution")})
  Object.defineProperty((globalThis as any).imageResolution, "fromImage", { value: Factory.propertyValue("image-resolution", "from-image") })
  Object.defineProperty((globalThis as any).imageResolution, "snap", { value: Factory.propertyValue("image-resolution", "snap") })
  Object.defineProperty(globalThis, "imeMode", { value: Factory.property("ime-mode")})
  Object.defineProperty(globalThis, "inherits", { value: Factory.property("inherits")})
  Object.defineProperty(globalThis, "initialLetter", { value: Factory.property("initial-letter")})
  Object.defineProperty((globalThis as any).initialLetter, "normal", { value: Factory.propertyValue("initial-letter", "normal") })
  Object.defineProperty((globalThis as any).initialLetter, "drop", { value: Factory.propertyValue("initial-letter", "drop") })
  Object.defineProperty((globalThis as any).initialLetter, "raise", { value: Factory.propertyValue("initial-letter", "raise") })
  Object.defineProperty(globalThis, "initialLetterAlign", { value: Factory.property("initial-letter-align")})
  Object.defineProperty((globalThis as any).initialLetterAlign, "borderBox", { value: Factory.propertyValue("initial-letter-align", "border-box") })
  Object.defineProperty((globalThis as any).initialLetterAlign, "alphabetic", { value: Factory.propertyValue("initial-letter-align", "alphabetic") })
  Object.defineProperty((globalThis as any).initialLetterAlign, "ideographic", { value: Factory.propertyValue("initial-letter-align", "ideographic") })
  Object.defineProperty((globalThis as any).initialLetterAlign, "hanging", { value: Factory.propertyValue("initial-letter-align", "hanging") })
  Object.defineProperty((globalThis as any).initialLetterAlign, "leading", { value: Factory.propertyValue("initial-letter-align", "leading") })
  Object.defineProperty(globalThis, "initialLetterWrap", { value: Factory.property("initial-letter-wrap")})
  Object.defineProperty((globalThis as any).initialLetterWrap, "none", { value: Factory.propertyValue("initial-letter-wrap", "none") })
  Object.defineProperty((globalThis as any).initialLetterWrap, "first", { value: Factory.propertyValue("initial-letter-wrap", "first") })
  Object.defineProperty((globalThis as any).initialLetterWrap, "all", { value: Factory.propertyValue("initial-letter-wrap", "all") })
  Object.defineProperty((globalThis as any).initialLetterWrap, "grid", { value: Factory.propertyValue("initial-letter-wrap", "grid") })
  Object.defineProperty(globalThis, "initialValue", { value: Factory.property("initial-value")})
  Object.defineProperty(globalThis, "inlineSize", { value: Factory.property("inline-size")})
  Object.defineProperty((globalThis as any).inlineSize, "stretch", { value: Factory.propertyValue("inline-size", "stretch") })
  Object.defineProperty((globalThis as any).inlineSize, "fitContent", { value: Factory.propertyValue("inline-size", "fit-content") })
  Object.defineProperty((globalThis as any).inlineSize, "contain", { value: Factory.propertyValue("inline-size", "contain") })
  Object.defineProperty(globalThis, "inlineSizing", { value: Factory.property("inline-sizing")})
  Object.defineProperty((globalThis as any).inlineSizing, "normal", { value: Factory.propertyValue("inline-sizing", "normal") })
  Object.defineProperty((globalThis as any).inlineSizing, "stretch", { value: Factory.propertyValue("inline-sizing", "stretch") })
  Object.defineProperty(globalThis, "inputFormat", { value: Factory.property("input-format")})
  Object.defineProperty(globalThis, "inputSecurity", { value: Factory.property("input-security")})
  Object.defineProperty((globalThis as any).inputSecurity, "auto", { value: Factory.propertyValue("input-security", "auto") })
  Object.defineProperty((globalThis as any).inputSecurity, "none", { value: Factory.propertyValue("input-security", "none") })
  Object.defineProperty(globalThis, "inset", { value: Factory.property("inset")})
  Object.defineProperty((globalThis as any).inset, "auto", { value: Factory.propertyValue("inset", "auto") })
  Object.defineProperty(globalThis, "insetBlock", { value: Factory.property("inset-block")})
  Object.defineProperty((globalThis as any).insetBlock, "auto", { value: Factory.propertyValue("inset-block", "auto") })
  Object.defineProperty(globalThis, "insetBlockEnd", { value: Factory.property("inset-block-end")})
  Object.defineProperty((globalThis as any).insetBlockEnd, "auto", { value: Factory.propertyValue("inset-block-end", "auto") })
  Object.defineProperty(globalThis, "insetBlockStart", { value: Factory.property("inset-block-start")})
  Object.defineProperty((globalThis as any).insetBlockStart, "auto", { value: Factory.propertyValue("inset-block-start", "auto") })
  Object.defineProperty(globalThis, "insetInline", { value: Factory.property("inset-inline")})
  Object.defineProperty((globalThis as any).insetInline, "auto", { value: Factory.propertyValue("inset-inline", "auto") })
  Object.defineProperty(globalThis, "insetInlineEnd", { value: Factory.property("inset-inline-end")})
  Object.defineProperty((globalThis as any).insetInlineEnd, "auto", { value: Factory.propertyValue("inset-inline-end", "auto") })
  Object.defineProperty(globalThis, "insetInlineStart", { value: Factory.property("inset-inline-start")})
  Object.defineProperty((globalThis as any).insetInlineStart, "auto", { value: Factory.propertyValue("inset-inline-start", "auto") })
  Object.defineProperty(globalThis, "isolation", { value: Factory.property("isolation")})
  Object.defineProperty(globalThis, "justifyContent", { value: Factory.property("justify-content")})
  Object.defineProperty((globalThis as any).justifyContent, "normal", { value: Factory.propertyValue("justify-content", "normal") })
  Object.defineProperty((globalThis as any).justifyContent, "spaceBetween", { value: Factory.propertyValue("justify-content", "space-between") })
  Object.defineProperty((globalThis as any).justifyContent, "spaceAround", { value: Factory.propertyValue("justify-content", "space-around") })
  Object.defineProperty((globalThis as any).justifyContent, "spaceEvenly", { value: Factory.propertyValue("justify-content", "space-evenly") })
  Object.defineProperty((globalThis as any).justifyContent, "stretch", { value: Factory.propertyValue("justify-content", "stretch") })
  Object.defineProperty((globalThis as any).justifyContent, "safe", { value: Factory.propertyValue("justify-content", "safe") })
  Object.defineProperty((globalThis as any).justifyContent, "unsafe", { value: Factory.propertyValue("justify-content", "unsafe") })
  Object.defineProperty((globalThis as any).justifyContent, "center", { value: Factory.propertyValue("justify-content", "center") })
  Object.defineProperty((globalThis as any).justifyContent, "start", { value: Factory.propertyValue("justify-content", "start") })
  Object.defineProperty((globalThis as any).justifyContent, "end", { value: Factory.propertyValue("justify-content", "end") })
  Object.defineProperty((globalThis as any).justifyContent, "flexStart", { value: Factory.propertyValue("justify-content", "flex-start") })
  Object.defineProperty((globalThis as any).justifyContent, "flexEnd", { value: Factory.propertyValue("justify-content", "flex-end") })
  Object.defineProperty((globalThis as any).justifyContent, "left", { value: Factory.propertyValue("justify-content", "left") })
  Object.defineProperty((globalThis as any).justifyContent, "right", { value: Factory.propertyValue("justify-content", "right") })
  Object.defineProperty(globalThis, "justifyItems", { value: Factory.property("justify-items")})
  Object.defineProperty((globalThis as any).justifyItems, "normal", { value: Factory.propertyValue("justify-items", "normal") })
  Object.defineProperty((globalThis as any).justifyItems, "stretch", { value: Factory.propertyValue("justify-items", "stretch") })
  Object.defineProperty((globalThis as any).justifyItems, "baseline", { value: Factory.propertyValue("justify-items", "baseline") })
  Object.defineProperty((globalThis as any).justifyItems, "first_baseline", { value: Factory.propertyValue("justify-items", "first baseline") })
  Object.defineProperty((globalThis as any).justifyItems, "last_baseline", { value: Factory.propertyValue("justify-items", "last baseline") })
  Object.defineProperty((globalThis as any).justifyItems, "safe", { value: Factory.propertyValue("justify-items", "safe") })
  Object.defineProperty((globalThis as any).justifyItems, "unsafe", { value: Factory.propertyValue("justify-items", "unsafe") })
  Object.defineProperty((globalThis as any).justifyItems, "center", { value: Factory.propertyValue("justify-items", "center") })
  Object.defineProperty((globalThis as any).justifyItems, "start", { value: Factory.propertyValue("justify-items", "start") })
  Object.defineProperty((globalThis as any).justifyItems, "end", { value: Factory.propertyValue("justify-items", "end") })
  Object.defineProperty((globalThis as any).justifyItems, "selfStart", { value: Factory.propertyValue("justify-items", "self-start") })
  Object.defineProperty((globalThis as any).justifyItems, "selfEnd", { value: Factory.propertyValue("justify-items", "self-end") })
  Object.defineProperty((globalThis as any).justifyItems, "flexStart", { value: Factory.propertyValue("justify-items", "flex-start") })
  Object.defineProperty((globalThis as any).justifyItems, "flexEnd", { value: Factory.propertyValue("justify-items", "flex-end") })
  Object.defineProperty((globalThis as any).justifyItems, "left", { value: Factory.propertyValue("justify-items", "left") })
  Object.defineProperty((globalThis as any).justifyItems, "right", { value: Factory.propertyValue("justify-items", "right") })
  Object.defineProperty((globalThis as any).justifyItems, "legacy", { value: Factory.propertyValue("justify-items", "legacy") })
  Object.defineProperty(globalThis, "justifySelf", { value: Factory.property("justify-self")})
  Object.defineProperty((globalThis as any).justifySelf, "auto", { value: Factory.propertyValue("justify-self", "auto") })
  Object.defineProperty((globalThis as any).justifySelf, "normal", { value: Factory.propertyValue("justify-self", "normal") })
  Object.defineProperty((globalThis as any).justifySelf, "stretch", { value: Factory.propertyValue("justify-self", "stretch") })
  Object.defineProperty((globalThis as any).justifySelf, "baseline", { value: Factory.propertyValue("justify-self", "baseline") })
  Object.defineProperty((globalThis as any).justifySelf, "first_baseline", { value: Factory.propertyValue("justify-self", "first baseline") })
  Object.defineProperty((globalThis as any).justifySelf, "last_baseline", { value: Factory.propertyValue("justify-self", "last baseline") })
  Object.defineProperty((globalThis as any).justifySelf, "safe", { value: Factory.propertyValue("justify-self", "safe") })
  Object.defineProperty((globalThis as any).justifySelf, "unsafe", { value: Factory.propertyValue("justify-self", "unsafe") })
  Object.defineProperty((globalThis as any).justifySelf, "center", { value: Factory.propertyValue("justify-self", "center") })
  Object.defineProperty((globalThis as any).justifySelf, "start", { value: Factory.propertyValue("justify-self", "start") })
  Object.defineProperty((globalThis as any).justifySelf, "end", { value: Factory.propertyValue("justify-self", "end") })
  Object.defineProperty((globalThis as any).justifySelf, "selfStart", { value: Factory.propertyValue("justify-self", "self-start") })
  Object.defineProperty((globalThis as any).justifySelf, "selfEnd", { value: Factory.propertyValue("justify-self", "self-end") })
  Object.defineProperty((globalThis as any).justifySelf, "flexStart", { value: Factory.propertyValue("justify-self", "flex-start") })
  Object.defineProperty((globalThis as any).justifySelf, "flexEnd", { value: Factory.propertyValue("justify-self", "flex-end") })
  Object.defineProperty((globalThis as any).justifySelf, "left", { value: Factory.propertyValue("justify-self", "left") })
  Object.defineProperty((globalThis as any).justifySelf, "right", { value: Factory.propertyValue("justify-self", "right") })
  Object.defineProperty(globalThis, "justifyTracks", { value: Factory.property("justify-tracks")})
  Object.defineProperty((globalThis as any).justifyTracks, "normal", { value: Factory.propertyValue("justify-tracks", "normal") })
  Object.defineProperty((globalThis as any).justifyTracks, "spaceBetween", { value: Factory.propertyValue("justify-tracks", "space-between") })
  Object.defineProperty((globalThis as any).justifyTracks, "spaceAround", { value: Factory.propertyValue("justify-tracks", "space-around") })
  Object.defineProperty((globalThis as any).justifyTracks, "spaceEvenly", { value: Factory.propertyValue("justify-tracks", "space-evenly") })
  Object.defineProperty((globalThis as any).justifyTracks, "stretch", { value: Factory.propertyValue("justify-tracks", "stretch") })
  Object.defineProperty((globalThis as any).justifyTracks, "safe", { value: Factory.propertyValue("justify-tracks", "safe") })
  Object.defineProperty((globalThis as any).justifyTracks, "unsafe", { value: Factory.propertyValue("justify-tracks", "unsafe") })
  Object.defineProperty((globalThis as any).justifyTracks, "center", { value: Factory.propertyValue("justify-tracks", "center") })
  Object.defineProperty((globalThis as any).justifyTracks, "start", { value: Factory.propertyValue("justify-tracks", "start") })
  Object.defineProperty((globalThis as any).justifyTracks, "end", { value: Factory.propertyValue("justify-tracks", "end") })
  Object.defineProperty((globalThis as any).justifyTracks, "flexStart", { value: Factory.propertyValue("justify-tracks", "flex-start") })
  Object.defineProperty((globalThis as any).justifyTracks, "flexEnd", { value: Factory.propertyValue("justify-tracks", "flex-end") })
  Object.defineProperty((globalThis as any).justifyTracks, "left", { value: Factory.propertyValue("justify-tracks", "left") })
  Object.defineProperty((globalThis as any).justifyTracks, "right", { value: Factory.propertyValue("justify-tracks", "right") })
  Object.defineProperty(globalThis, "kerning", { value: Factory.property("kerning")})
  Object.defineProperty(globalThis, "layoutFlow", { value: Factory.property("layout-flow")})
  Object.defineProperty(globalThis, "layoutGrid", { value: Factory.property("layout-grid")})
  Object.defineProperty(globalThis, "layoutGridChar", { value: Factory.property("layout-grid-char")})
  Object.defineProperty(globalThis, "layoutGridLine", { value: Factory.property("layout-grid-line")})
  Object.defineProperty(globalThis, "layoutGridMode", { value: Factory.property("layout-grid-mode")})
  Object.defineProperty(globalThis, "layoutGridType", { value: Factory.property("layout-grid-type")})
  Object.defineProperty(globalThis, "layoutOrder", { value: Factory.property("layout-order")})
  Object.defineProperty(globalThis, "leadingTrim", { value: Factory.property("leading-trim")})
  Object.defineProperty((globalThis as any).leadingTrim, "normal", { value: Factory.propertyValue("leading-trim", "normal") })
  Object.defineProperty((globalThis as any).leadingTrim, "start", { value: Factory.propertyValue("leading-trim", "start") })
  Object.defineProperty((globalThis as any).leadingTrim, "end", { value: Factory.propertyValue("leading-trim", "end") })
  Object.defineProperty((globalThis as any).leadingTrim, "both", { value: Factory.propertyValue("leading-trim", "both") })
  Object.defineProperty(globalThis, "left", { value: Factory.property("left")})
  Object.defineProperty((globalThis as any).left, "auto", { value: Factory.propertyValue("left", "auto") })
  Object.defineProperty(globalThis, "letterSpacing", { value: Factory.property("letter-spacing")})
  Object.defineProperty((globalThis as any).letterSpacing, "normal", { value: Factory.propertyValue("letter-spacing", "normal") })
  Object.defineProperty(globalThis, "lightingColor", { value: Factory.property("lighting-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).lightingColor, color, { value: Factory.propertyValue("lighting-color", color) })
  }
  Object.defineProperty(globalThis, "lineBreak", { value: Factory.property("line-break")})
  Object.defineProperty((globalThis as any).lineBreak, "auto", { value: Factory.propertyValue("line-break", "auto") })
  Object.defineProperty((globalThis as any).lineBreak, "loose", { value: Factory.propertyValue("line-break", "loose") })
  Object.defineProperty((globalThis as any).lineBreak, "normal", { value: Factory.propertyValue("line-break", "normal") })
  Object.defineProperty((globalThis as any).lineBreak, "strict", { value: Factory.propertyValue("line-break", "strict") })
  Object.defineProperty((globalThis as any).lineBreak, "anywhere", { value: Factory.propertyValue("line-break", "anywhere") })
  Object.defineProperty(globalThis, "lineClamp", { value: Factory.property("line-clamp")})
  Object.defineProperty((globalThis as any).lineClamp, "none", { value: Factory.propertyValue("line-clamp", "none") })
  Object.defineProperty(globalThis, "lineGapOverride", { value: Factory.property("line-gap-override")})
  Object.defineProperty(globalThis, "lineGrid", { value: Factory.property("line-grid")})
  Object.defineProperty((globalThis as any).lineGrid, "matchParent", { value: Factory.propertyValue("line-grid", "match-parent") })
  Object.defineProperty((globalThis as any).lineGrid, "create", { value: Factory.propertyValue("line-grid", "create") })
  Object.defineProperty(globalThis, "lineHeight", { value: Factory.property("line-height")})
  Object.defineProperty((globalThis as any).lineHeight, "normal", { value: Factory.propertyValue("line-height", "normal") })
  Object.defineProperty(globalThis, "lineHeightStep", { value: Factory.property("line-height-step")})
  Object.defineProperty(globalThis, "lineIncrement", { value: Factory.property("line-increment")})
  Object.defineProperty(globalThis, "linePadding", { value: Factory.property("line-padding")})
  Object.defineProperty(globalThis, "lineSnap", { value: Factory.property("line-snap")})
  Object.defineProperty((globalThis as any).lineSnap, "none", { value: Factory.propertyValue("line-snap", "none") })
  Object.defineProperty((globalThis as any).lineSnap, "baseline", { value: Factory.propertyValue("line-snap", "baseline") })
  Object.defineProperty((globalThis as any).lineSnap, "contain", { value: Factory.propertyValue("line-snap", "contain") })
  Object.defineProperty(globalThis, "linkParameters", { value: Factory.property("link-parameters")})
  Object.defineProperty((globalThis as any).linkParameters, "none", { value: Factory.propertyValue("link-parameters", "none") })
  Object.defineProperty(globalThis, "listStyle", { value: Factory.property("list-style")})
  Object.defineProperty(globalThis, "listStyleImage", { value: Factory.property("list-style-image")})
  Object.defineProperty((globalThis as any).listStyleImage, "none", { value: Factory.propertyValue("list-style-image", "none") })
  Object.defineProperty(globalThis, "listStylePosition", { value: Factory.property("list-style-position")})
  Object.defineProperty((globalThis as any).listStylePosition, "inside", { value: Factory.propertyValue("list-style-position", "inside") })
  Object.defineProperty((globalThis as any).listStylePosition, "outside", { value: Factory.propertyValue("list-style-position", "outside") })
  Object.defineProperty(globalThis, "listStyleType", { value: Factory.property("list-style-type")})
  Object.defineProperty((globalThis as any).listStyleType, "japaneseInformal", { value: Factory.propertyValue("list-style-type", "japanese-informal") })
  Object.defineProperty((globalThis as any).listStyleType, "japaneseFormal", { value: Factory.propertyValue("list-style-type", "japanese-formal") })
  Object.defineProperty((globalThis as any).listStyleType, "simpChineseInformal", { value: Factory.propertyValue("list-style-type", "simp-chinese-informal") })
  Object.defineProperty((globalThis as any).listStyleType, "simpChineseFormal", { value: Factory.propertyValue("list-style-type", "simp-chinese-formal") })
  Object.defineProperty((globalThis as any).listStyleType, "tradChineseInformal", { value: Factory.propertyValue("list-style-type", "trad-chinese-informal") })
  Object.defineProperty((globalThis as any).listStyleType, "tradChineseFormal", { value: Factory.propertyValue("list-style-type", "trad-chinese-formal") })
  Object.defineProperty((globalThis as any).listStyleType, "cjkIdeographic", { value: Factory.propertyValue("list-style-type", "cjk-ideographic") })
  Object.defineProperty((globalThis as any).listStyleType, "none", { value: Factory.propertyValue("list-style-type", "none") })
  Object.defineProperty(globalThis, "margin", { value: Factory.property("margin")})
  Object.defineProperty(globalThis, "marginBlock", { value: Factory.property("margin-block")})
  Object.defineProperty(globalThis, "marginBlockEnd", { value: Factory.property("margin-block-end")})
  Object.defineProperty(globalThis, "marginBlockStart", { value: Factory.property("margin-block-start")})
  Object.defineProperty(globalThis, "marginBottom", { value: Factory.property("margin-bottom")})
  Object.defineProperty((globalThis as any).marginBottom, "auto", { value: Factory.propertyValue("margin-bottom", "auto") })
  Object.defineProperty(globalThis, "marginBreak", { value: Factory.property("margin-break")})
  Object.defineProperty((globalThis as any).marginBreak, "auto", { value: Factory.propertyValue("margin-break", "auto") })
  Object.defineProperty((globalThis as any).marginBreak, "keep", { value: Factory.propertyValue("margin-break", "keep") })
  Object.defineProperty((globalThis as any).marginBreak, "discard", { value: Factory.propertyValue("margin-break", "discard") })
  Object.defineProperty(globalThis, "marginInline", { value: Factory.property("margin-inline")})
  Object.defineProperty(globalThis, "marginInlineEnd", { value: Factory.property("margin-inline-end")})
  Object.defineProperty(globalThis, "marginInlineStart", { value: Factory.property("margin-inline-start")})
  Object.defineProperty(globalThis, "marginLeft", { value: Factory.property("margin-left")})
  Object.defineProperty((globalThis as any).marginLeft, "auto", { value: Factory.propertyValue("margin-left", "auto") })
  Object.defineProperty(globalThis, "marginRight", { value: Factory.property("margin-right")})
  Object.defineProperty((globalThis as any).marginRight, "auto", { value: Factory.propertyValue("margin-right", "auto") })
  Object.defineProperty(globalThis, "marginTop", { value: Factory.property("margin-top")})
  Object.defineProperty((globalThis as any).marginTop, "auto", { value: Factory.propertyValue("margin-top", "auto") })
  Object.defineProperty(globalThis, "marginTrim", { value: Factory.property("margin-trim")})
  Object.defineProperty((globalThis as any).marginTrim, "none", { value: Factory.propertyValue("margin-trim", "none") })
  Object.defineProperty((globalThis as any).marginTrim, "block", { value: Factory.propertyValue("margin-trim", "block") })
  Object.defineProperty((globalThis as any).marginTrim, "inline", { value: Factory.propertyValue("margin-trim", "inline") })
  Object.defineProperty((globalThis as any).marginTrim, "blockStart", { value: Factory.propertyValue("margin-trim", "block-start") })
  Object.defineProperty((globalThis as any).marginTrim, "inlineStart", { value: Factory.propertyValue("margin-trim", "inline-start") })
  Object.defineProperty((globalThis as any).marginTrim, "blockEnd", { value: Factory.propertyValue("margin-trim", "block-end") })
  Object.defineProperty((globalThis as any).marginTrim, "inlineEnd", { value: Factory.propertyValue("margin-trim", "inline-end") })
  Object.defineProperty(globalThis, "marker", { value: Factory.property("marker")})
  Object.defineProperty((globalThis as any).marker, "none", { value: Factory.propertyValue("marker", "none") })
  Object.defineProperty(globalThis, "markerEnd", { value: Factory.property("marker-end")})
  Object.defineProperty((globalThis as any).markerEnd, "none", { value: Factory.propertyValue("marker-end", "none") })
  Object.defineProperty(globalThis, "markerKnockoutLeft", { value: Factory.property("marker-knockout-left")})
  Object.defineProperty(globalThis, "markerKnockoutRight", { value: Factory.property("marker-knockout-right")})
  Object.defineProperty(globalThis, "markerMid", { value: Factory.property("marker-mid")})
  Object.defineProperty((globalThis as any).markerMid, "none", { value: Factory.propertyValue("marker-mid", "none") })
  Object.defineProperty(globalThis, "markerOffset", { value: Factory.property("marker-offset")})
  Object.defineProperty(globalThis, "markerPattern", { value: Factory.property("marker-pattern")})
  Object.defineProperty(globalThis, "markerSegment", { value: Factory.property("marker-segment")})
  Object.defineProperty(globalThis, "markerSide", { value: Factory.property("marker-side")})
  Object.defineProperty((globalThis as any).markerSide, "matchSelf", { value: Factory.propertyValue("marker-side", "match-self") })
  Object.defineProperty((globalThis as any).markerSide, "matchParent", { value: Factory.propertyValue("marker-side", "match-parent") })
  Object.defineProperty(globalThis, "markerStart", { value: Factory.property("marker-start")})
  Object.defineProperty((globalThis as any).markerStart, "none", { value: Factory.propertyValue("marker-start", "none") })
  Object.defineProperty(globalThis, "marks", { value: Factory.property("marks")})
  Object.defineProperty(globalThis, "mask", { value: Factory.property("mask")})
  Object.defineProperty(globalThis, "maskBorder", { value: Factory.property("mask-border")})
  Object.defineProperty(globalThis, "maskBorderMode", { value: Factory.property("mask-border-mode")})
  Object.defineProperty((globalThis as any).maskBorderMode, "luminance", { value: Factory.propertyValue("mask-border-mode", "luminance") })
  Object.defineProperty((globalThis as any).maskBorderMode, "alpha", { value: Factory.propertyValue("mask-border-mode", "alpha") })
  Object.defineProperty(globalThis, "maskBorderOutset", { value: Factory.property("mask-border-outset")})
  Object.defineProperty(globalThis, "maskBorderRepeat", { value: Factory.property("mask-border-repeat")})
  Object.defineProperty((globalThis as any).maskBorderRepeat, "stretch", { value: Factory.propertyValue("mask-border-repeat", "stretch") })
  Object.defineProperty((globalThis as any).maskBorderRepeat, "repeat", { value: Factory.propertyValue("mask-border-repeat", "repeat") })
  Object.defineProperty((globalThis as any).maskBorderRepeat, "round", { value: Factory.propertyValue("mask-border-repeat", "round") })
  Object.defineProperty((globalThis as any).maskBorderRepeat, "space", { value: Factory.propertyValue("mask-border-repeat", "space") })
  Object.defineProperty(globalThis, "maskBorderSlice", { value: Factory.property("mask-border-slice")})
  Object.defineProperty((globalThis as any).maskBorderSlice, "fill", { value: Factory.propertyValue("mask-border-slice", "fill") })
  Object.defineProperty(globalThis, "maskBorderSource", { value: Factory.property("mask-border-source")})
  Object.defineProperty((globalThis as any).maskBorderSource, "none", { value: Factory.propertyValue("mask-border-source", "none") })
  Object.defineProperty(globalThis, "maskBorderWidth", { value: Factory.property("mask-border-width")})
  Object.defineProperty((globalThis as any).maskBorderWidth, "auto", { value: Factory.propertyValue("mask-border-width", "auto") })
  Object.defineProperty(globalThis, "maskClip", { value: Factory.property("mask-clip")})
  Object.defineProperty((globalThis as any).maskClip, "noClip", { value: Factory.propertyValue("mask-clip", "no-clip") })
  Object.defineProperty((globalThis as any).maskClip, "contentBox", { value: Factory.propertyValue("mask-clip", "content-box") })
  Object.defineProperty((globalThis as any).maskClip, "paddingBox", { value: Factory.propertyValue("mask-clip", "padding-box") })
  Object.defineProperty((globalThis as any).maskClip, "borderBox", { value: Factory.propertyValue("mask-clip", "border-box") })
  Object.defineProperty((globalThis as any).maskClip, "fillBox", { value: Factory.propertyValue("mask-clip", "fill-box") })
  Object.defineProperty((globalThis as any).maskClip, "strokeBox", { value: Factory.propertyValue("mask-clip", "stroke-box") })
  Object.defineProperty((globalThis as any).maskClip, "viewBox", { value: Factory.propertyValue("mask-clip", "view-box") })
  Object.defineProperty(globalThis, "maskComposite", { value: Factory.property("mask-composite")})
  Object.defineProperty((globalThis as any).maskComposite, "add", { value: Factory.propertyValue("mask-composite", "add") })
  Object.defineProperty((globalThis as any).maskComposite, "subtract", { value: Factory.propertyValue("mask-composite", "subtract") })
  Object.defineProperty((globalThis as any).maskComposite, "intersect", { value: Factory.propertyValue("mask-composite", "intersect") })
  Object.defineProperty((globalThis as any).maskComposite, "exclude", { value: Factory.propertyValue("mask-composite", "exclude") })
  Object.defineProperty(globalThis, "maskImage", { value: Factory.property("mask-image")})
  Object.defineProperty(globalThis, "maskMode", { value: Factory.property("mask-mode")})
  Object.defineProperty((globalThis as any).maskMode, "alpha", { value: Factory.propertyValue("mask-mode", "alpha") })
  Object.defineProperty((globalThis as any).maskMode, "luminance", { value: Factory.propertyValue("mask-mode", "luminance") })
  Object.defineProperty((globalThis as any).maskMode, "matchSource", { value: Factory.propertyValue("mask-mode", "match-source") })
  Object.defineProperty(globalThis, "maskOrigin", { value: Factory.property("mask-origin")})
  Object.defineProperty((globalThis as any).maskOrigin, "contentBox", { value: Factory.propertyValue("mask-origin", "content-box") })
  Object.defineProperty((globalThis as any).maskOrigin, "paddingBox", { value: Factory.propertyValue("mask-origin", "padding-box") })
  Object.defineProperty((globalThis as any).maskOrigin, "borderBox", { value: Factory.propertyValue("mask-origin", "border-box") })
  Object.defineProperty((globalThis as any).maskOrigin, "fillBox", { value: Factory.propertyValue("mask-origin", "fill-box") })
  Object.defineProperty((globalThis as any).maskOrigin, "strokeBox", { value: Factory.propertyValue("mask-origin", "stroke-box") })
  Object.defineProperty((globalThis as any).maskOrigin, "viewBox", { value: Factory.propertyValue("mask-origin", "view-box") })
  Object.defineProperty(globalThis, "maskPosition", { value: Factory.property("mask-position")})
  Object.defineProperty(globalThis, "maskPositionX", { value: Factory.property("mask-position-x")})
  Object.defineProperty(globalThis, "maskPositionY", { value: Factory.property("mask-position-y")})
  Object.defineProperty(globalThis, "maskRepeat", { value: Factory.property("mask-repeat")})
  Object.defineProperty(globalThis, "maskSize", { value: Factory.property("mask-size")})
  Object.defineProperty(globalThis, "maskSourceType", { value: Factory.property("mask-source-type")})
  Object.defineProperty(globalThis, "maskType", { value: Factory.property("mask-type")})
  Object.defineProperty((globalThis as any).maskType, "luminance", { value: Factory.propertyValue("mask-type", "luminance") })
  Object.defineProperty((globalThis as any).maskType, "alpha", { value: Factory.propertyValue("mask-type", "alpha") })
  Object.defineProperty(globalThis, "masonryAutoFlow", { value: Factory.property("masonry-auto-flow")})
  Object.defineProperty((globalThis as any).masonryAutoFlow, "pack", { value: Factory.propertyValue("masonry-auto-flow", "pack") })
  Object.defineProperty((globalThis as any).masonryAutoFlow, "next", { value: Factory.propertyValue("masonry-auto-flow", "next") })
  Object.defineProperty((globalThis as any).masonryAutoFlow, "definiteFirst", { value: Factory.propertyValue("masonry-auto-flow", "definite-first") })
  Object.defineProperty((globalThis as any).masonryAutoFlow, "ordered", { value: Factory.propertyValue("masonry-auto-flow", "ordered") })
  Object.defineProperty(globalThis, "mathDepth", { value: Factory.property("math-depth")})
  Object.defineProperty((globalThis as any).mathDepth, "autoAdd", { value: Factory.propertyValue("math-depth", "auto-add") })
  Object.defineProperty(globalThis, "mathShift", { value: Factory.property("math-shift")})
  Object.defineProperty((globalThis as any).mathShift, "normal", { value: Factory.propertyValue("math-shift", "normal") })
  Object.defineProperty((globalThis as any).mathShift, "compact", { value: Factory.propertyValue("math-shift", "compact") })
  Object.defineProperty(globalThis, "mathStyle", { value: Factory.property("math-style")})
  Object.defineProperty((globalThis as any).mathStyle, "normal", { value: Factory.propertyValue("math-style", "normal") })
  Object.defineProperty((globalThis as any).mathStyle, "compact", { value: Factory.propertyValue("math-style", "compact") })
  Object.defineProperty(globalThis, "maxBlockSize", { value: Factory.property("max-block-size")})
  Object.defineProperty((globalThis as any).maxBlockSize, "stretch", { value: Factory.propertyValue("max-block-size", "stretch") })
  Object.defineProperty((globalThis as any).maxBlockSize, "fitContent", { value: Factory.propertyValue("max-block-size", "fit-content") })
  Object.defineProperty((globalThis as any).maxBlockSize, "contain", { value: Factory.propertyValue("max-block-size", "contain") })
  Object.defineProperty(globalThis, "maxHeight", { value: Factory.property("max-height")})
  Object.defineProperty((globalThis as any).maxHeight, "stretch", { value: Factory.propertyValue("max-height", "stretch") })
  Object.defineProperty((globalThis as any).maxHeight, "fitContent", { value: Factory.propertyValue("max-height", "fit-content") })
  Object.defineProperty((globalThis as any).maxHeight, "contain", { value: Factory.propertyValue("max-height", "contain") })
  Object.defineProperty((globalThis as any).maxHeight, "none", { value: Factory.propertyValue("max-height", "none") })
  Object.defineProperty((globalThis as any).maxHeight, "minContent", { value: Factory.propertyValue("max-height", "min-content") })
  Object.defineProperty((globalThis as any).maxHeight, "maxContent", { value: Factory.propertyValue("max-height", "max-content") })
  Object.defineProperty(globalThis, "maxInlineSize", { value: Factory.property("max-inline-size")})
  Object.defineProperty((globalThis as any).maxInlineSize, "stretch", { value: Factory.propertyValue("max-inline-size", "stretch") })
  Object.defineProperty((globalThis as any).maxInlineSize, "fitContent", { value: Factory.propertyValue("max-inline-size", "fit-content") })
  Object.defineProperty((globalThis as any).maxInlineSize, "contain", { value: Factory.propertyValue("max-inline-size", "contain") })
  Object.defineProperty(globalThis, "maxLines", { value: Factory.property("max-lines")})
  Object.defineProperty((globalThis as any).maxLines, "none", { value: Factory.propertyValue("max-lines", "none") })
  Object.defineProperty(globalThis, "maxWidth", { value: Factory.property("max-width")})
  Object.defineProperty((globalThis as any).maxWidth, "stretch", { value: Factory.propertyValue("max-width", "stretch") })
  Object.defineProperty((globalThis as any).maxWidth, "fitContent", { value: Factory.propertyValue("max-width", "fit-content") })
  Object.defineProperty((globalThis as any).maxWidth, "contain", { value: Factory.propertyValue("max-width", "contain") })
  Object.defineProperty((globalThis as any).maxWidth, "none", { value: Factory.propertyValue("max-width", "none") })
  Object.defineProperty((globalThis as any).maxWidth, "minContent", { value: Factory.propertyValue("max-width", "min-content") })
  Object.defineProperty((globalThis as any).maxWidth, "maxContent", { value: Factory.propertyValue("max-width", "max-content") })
  Object.defineProperty(globalThis, "maxZoom", { value: Factory.property("max-zoom")})
  Object.defineProperty(globalThis, "minBlockSize", { value: Factory.property("min-block-size")})
  Object.defineProperty((globalThis as any).minBlockSize, "stretch", { value: Factory.propertyValue("min-block-size", "stretch") })
  Object.defineProperty((globalThis as any).minBlockSize, "fitContent", { value: Factory.propertyValue("min-block-size", "fit-content") })
  Object.defineProperty((globalThis as any).minBlockSize, "contain", { value: Factory.propertyValue("min-block-size", "contain") })
  Object.defineProperty(globalThis, "minHeight", { value: Factory.property("min-height")})
  Object.defineProperty((globalThis as any).minHeight, "stretch", { value: Factory.propertyValue("min-height", "stretch") })
  Object.defineProperty((globalThis as any).minHeight, "fitContent", { value: Factory.propertyValue("min-height", "fit-content") })
  Object.defineProperty((globalThis as any).minHeight, "contain", { value: Factory.propertyValue("min-height", "contain") })
  Object.defineProperty((globalThis as any).minHeight, "auto", { value: Factory.propertyValue("min-height", "auto") })
  Object.defineProperty((globalThis as any).minHeight, "minContent", { value: Factory.propertyValue("min-height", "min-content") })
  Object.defineProperty((globalThis as any).minHeight, "maxContent", { value: Factory.propertyValue("min-height", "max-content") })
  Object.defineProperty(globalThis, "minInlineSize", { value: Factory.property("min-inline-size")})
  Object.defineProperty((globalThis as any).minInlineSize, "stretch", { value: Factory.propertyValue("min-inline-size", "stretch") })
  Object.defineProperty((globalThis as any).minInlineSize, "fitContent", { value: Factory.propertyValue("min-inline-size", "fit-content") })
  Object.defineProperty((globalThis as any).minInlineSize, "contain", { value: Factory.propertyValue("min-inline-size", "contain") })
  Object.defineProperty(globalThis, "minIntrinsicSizing", { value: Factory.property("min-intrinsic-sizing")})
  Object.defineProperty((globalThis as any).minIntrinsicSizing, "legacy", { value: Factory.propertyValue("min-intrinsic-sizing", "legacy") })
  Object.defineProperty((globalThis as any).minIntrinsicSizing, "zeroIfScroll", { value: Factory.propertyValue("min-intrinsic-sizing", "zero-if-scroll") })
  Object.defineProperty((globalThis as any).minIntrinsicSizing, "zeroIfExtrinsic", { value: Factory.propertyValue("min-intrinsic-sizing", "zero-if-extrinsic") })
  Object.defineProperty(globalThis, "minWidth", { value: Factory.property("min-width")})
  Object.defineProperty((globalThis as any).minWidth, "stretch", { value: Factory.propertyValue("min-width", "stretch") })
  Object.defineProperty((globalThis as any).minWidth, "fitContent", { value: Factory.propertyValue("min-width", "fit-content") })
  Object.defineProperty((globalThis as any).minWidth, "contain", { value: Factory.propertyValue("min-width", "contain") })
  Object.defineProperty((globalThis as any).minWidth, "auto", { value: Factory.propertyValue("min-width", "auto") })
  Object.defineProperty((globalThis as any).minWidth, "minContent", { value: Factory.propertyValue("min-width", "min-content") })
  Object.defineProperty((globalThis as any).minWidth, "maxContent", { value: Factory.propertyValue("min-width", "max-content") })
  Object.defineProperty(globalThis, "minZoom", { value: Factory.property("min-zoom")})
  Object.defineProperty(globalThis, "mixBlendMode", { value: Factory.property("mix-blend-mode")})
  Object.defineProperty((globalThis as any).mixBlendMode, "normal", { value: Factory.propertyValue("mix-blend-mode", "normal") })
  Object.defineProperty((globalThis as any).mixBlendMode, "multiply", { value: Factory.propertyValue("mix-blend-mode", "multiply") })
  Object.defineProperty((globalThis as any).mixBlendMode, "screen", { value: Factory.propertyValue("mix-blend-mode", "screen") })
  Object.defineProperty((globalThis as any).mixBlendMode, "overlay", { value: Factory.propertyValue("mix-blend-mode", "overlay") })
  Object.defineProperty((globalThis as any).mixBlendMode, "darken", { value: Factory.propertyValue("mix-blend-mode", "darken") })
  Object.defineProperty((globalThis as any).mixBlendMode, "lighten", { value: Factory.propertyValue("mix-blend-mode", "lighten") })
  Object.defineProperty((globalThis as any).mixBlendMode, "colorDodge", { value: Factory.propertyValue("mix-blend-mode", "color-dodge") })
  Object.defineProperty((globalThis as any).mixBlendMode, "colorBurn", { value: Factory.propertyValue("mix-blend-mode", "color-burn") })
  Object.defineProperty((globalThis as any).mixBlendMode, "hardLight", { value: Factory.propertyValue("mix-blend-mode", "hard-light") })
  Object.defineProperty((globalThis as any).mixBlendMode, "softLight", { value: Factory.propertyValue("mix-blend-mode", "soft-light") })
  Object.defineProperty((globalThis as any).mixBlendMode, "difference", { value: Factory.propertyValue("mix-blend-mode", "difference") })
  Object.defineProperty((globalThis as any).mixBlendMode, "exclusion", { value: Factory.propertyValue("mix-blend-mode", "exclusion") })
  Object.defineProperty((globalThis as any).mixBlendMode, "hue", { value: Factory.propertyValue("mix-blend-mode", "hue") })
  Object.defineProperty((globalThis as any).mixBlendMode, "saturation", { value: Factory.propertyValue("mix-blend-mode", "saturation") })
  Object.defineProperty((globalThis as any).mixBlendMode, "luminosity", { value: Factory.propertyValue("mix-blend-mode", "luminosity") })
  Object.defineProperty((globalThis as any).mixBlendMode, "plusDarker", { value: Factory.propertyValue("mix-blend-mode", "plus-darker") })
  Object.defineProperty((globalThis as any).mixBlendMode, "plusLighter", { value: Factory.propertyValue("mix-blend-mode", "plus-lighter") })
  Object.defineProperty(globalThis, "motion", { value: Factory.property("motion")})
  Object.defineProperty(globalThis, "motionOffset", { value: Factory.property("motion-offset")})
  Object.defineProperty(globalThis, "motionPath", { value: Factory.property("motion-path")})
  Object.defineProperty(globalThis, "motionRotation", { value: Factory.property("motion-rotation")})
  Object.defineProperty(globalThis, "navDown", { value: Factory.property("nav-down")})
  Object.defineProperty((globalThis as any).navDown, "auto", { value: Factory.propertyValue("nav-down", "auto") })
  Object.defineProperty((globalThis as any).navDown, "current", { value: Factory.propertyValue("nav-down", "current") })
  Object.defineProperty((globalThis as any).navDown, "root", { value: Factory.propertyValue("nav-down", "root") })
  Object.defineProperty(globalThis, "navIndex", { value: Factory.property("nav-index")})
  Object.defineProperty(globalThis, "navLeft", { value: Factory.property("nav-left")})
  Object.defineProperty((globalThis as any).navLeft, "auto", { value: Factory.propertyValue("nav-left", "auto") })
  Object.defineProperty((globalThis as any).navLeft, "current", { value: Factory.propertyValue("nav-left", "current") })
  Object.defineProperty((globalThis as any).navLeft, "root", { value: Factory.propertyValue("nav-left", "root") })
  Object.defineProperty(globalThis, "navRight", { value: Factory.property("nav-right")})
  Object.defineProperty((globalThis as any).navRight, "auto", { value: Factory.propertyValue("nav-right", "auto") })
  Object.defineProperty((globalThis as any).navRight, "current", { value: Factory.propertyValue("nav-right", "current") })
  Object.defineProperty((globalThis as any).navRight, "root", { value: Factory.propertyValue("nav-right", "root") })
  Object.defineProperty(globalThis, "navUp", { value: Factory.property("nav-up")})
  Object.defineProperty((globalThis as any).navUp, "auto", { value: Factory.propertyValue("nav-up", "auto") })
  Object.defineProperty((globalThis as any).navUp, "current", { value: Factory.propertyValue("nav-up", "current") })
  Object.defineProperty((globalThis as any).navUp, "root", { value: Factory.propertyValue("nav-up", "root") })
  Object.defineProperty(globalThis, "negative", { value: Factory.property("negative")})
  Object.defineProperty(globalThis, "objectFit", { value: Factory.property("object-fit")})
  Object.defineProperty((globalThis as any).objectFit, "fill", { value: Factory.propertyValue("object-fit", "fill") })
  Object.defineProperty((globalThis as any).objectFit, "contain", { value: Factory.propertyValue("object-fit", "contain") })
  Object.defineProperty((globalThis as any).objectFit, "cover", { value: Factory.propertyValue("object-fit", "cover") })
  Object.defineProperty((globalThis as any).objectFit, "none", { value: Factory.propertyValue("object-fit", "none") })
  Object.defineProperty((globalThis as any).objectFit, "scaleDown", { value: Factory.propertyValue("object-fit", "scale-down") })
  Object.defineProperty(globalThis, "objectPosition", { value: Factory.property("object-position")})
  Object.defineProperty(globalThis, "objectViewBox", { value: Factory.property("object-view-box")})
  Object.defineProperty((globalThis as any).objectViewBox, "none", { value: Factory.propertyValue("object-view-box", "none") })
  Object.defineProperty(globalThis, "offset", { value: Factory.property("offset")})
  Object.defineProperty(globalThis, "offsetAnchor", { value: Factory.property("offset-anchor")})
  Object.defineProperty((globalThis as any).offsetAnchor, "auto", { value: Factory.propertyValue("offset-anchor", "auto") })
  Object.defineProperty(globalThis, "offsetBlockEnd", { value: Factory.property("offset-block-end")})
  Object.defineProperty(globalThis, "offsetBlockStart", { value: Factory.property("offset-block-start")})
  Object.defineProperty(globalThis, "offsetDistance", { value: Factory.property("offset-distance")})
  Object.defineProperty(globalThis, "offsetInlineEnd", { value: Factory.property("offset-inline-end")})
  Object.defineProperty(globalThis, "offsetInlineStart", { value: Factory.property("offset-inline-start")})
  Object.defineProperty(globalThis, "offsetPath", { value: Factory.property("offset-path")})
  Object.defineProperty((globalThis as any).offsetPath, "none", { value: Factory.propertyValue("offset-path", "none") })
  Object.defineProperty(globalThis, "offsetPosition", { value: Factory.property("offset-position")})
  Object.defineProperty((globalThis as any).offsetPosition, "auto", { value: Factory.propertyValue("offset-position", "auto") })
  Object.defineProperty(globalThis, "offsetRotate", { value: Factory.property("offset-rotate")})
  Object.defineProperty((globalThis as any).offsetRotate, "auto", { value: Factory.propertyValue("offset-rotate", "auto") })
  Object.defineProperty((globalThis as any).offsetRotate, "reverse", { value: Factory.propertyValue("offset-rotate", "reverse") })
  Object.defineProperty(globalThis, "offsetRotation", { value: Factory.property("offset-rotation")})
  Object.defineProperty(globalThis, "opacity", { value: Factory.property("opacity")})
  Object.defineProperty(globalThis, "order", { value: Factory.property("order")})
  Object.defineProperty((globalThis as any).order, "reading", { value: Factory.propertyValue("order", "reading") })
  Object.defineProperty((globalThis as any).order, "layout", { value: Factory.propertyValue("order", "layout") })
  Object.defineProperty(globalThis, "orientation", { value: Factory.property("orientation")})
  Object.defineProperty(globalThis, "orphans", { value: Factory.property("orphans")})
  Object.defineProperty(globalThis, "outline", { value: Factory.property("outline")})
  Object.defineProperty(globalThis, "outlineColor", { value: Factory.property("outline-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).outlineColor, color, { value: Factory.propertyValue("outline-color", color) })
  }
  Object.defineProperty((globalThis as any).outlineColor, "invert", { value: Factory.propertyValue("outline-color", "invert") })
  Object.defineProperty(globalThis, "outlineOffset", { value: Factory.property("outline-offset")})
  Object.defineProperty(globalThis, "outlineStyle", { value: Factory.property("outline-style")})
  Object.defineProperty((globalThis as any).outlineStyle, "auto", { value: Factory.propertyValue("outline-style", "auto") })
  Object.defineProperty(globalThis, "outlineWidth", { value: Factory.property("outline-width")})
  Object.defineProperty((globalThis as any).outlineWidth, "thin", { value: Factory.propertyValue("outline-width", "thin") })
  Object.defineProperty((globalThis as any).outlineWidth, "medium", { value: Factory.propertyValue("outline-width", "medium") })
  Object.defineProperty((globalThis as any).outlineWidth, "thick", { value: Factory.propertyValue("outline-width", "thick") })
  Object.defineProperty(globalThis, "overflow", { value: Factory.property("overflow")})
  Object.defineProperty((globalThis as any).overflow, "visible", { value: Factory.propertyValue("overflow", "visible") })
  Object.defineProperty((globalThis as any).overflow, "hidden", { value: Factory.propertyValue("overflow", "hidden") })
  Object.defineProperty((globalThis as any).overflow, "clip", { value: Factory.propertyValue("overflow", "clip") })
  Object.defineProperty((globalThis as any).overflow, "scroll", { value: Factory.propertyValue("overflow", "scroll") })
  Object.defineProperty((globalThis as any).overflow, "auto", { value: Factory.propertyValue("overflow", "auto") })
  Object.defineProperty(globalThis, "overflowAnchor", { value: Factory.property("overflow-anchor")})
  Object.defineProperty((globalThis as any).overflowAnchor, "auto", { value: Factory.propertyValue("overflow-anchor", "auto") })
  Object.defineProperty((globalThis as any).overflowAnchor, "none", { value: Factory.propertyValue("overflow-anchor", "none") })
  Object.defineProperty(globalThis, "overflowBlock", { value: Factory.property("overflow-block")})
  Object.defineProperty((globalThis as any).overflowBlock, "visible", { value: Factory.propertyValue("overflow-block", "visible") })
  Object.defineProperty((globalThis as any).overflowBlock, "hidden", { value: Factory.propertyValue("overflow-block", "hidden") })
  Object.defineProperty((globalThis as any).overflowBlock, "clip", { value: Factory.propertyValue("overflow-block", "clip") })
  Object.defineProperty((globalThis as any).overflowBlock, "scroll", { value: Factory.propertyValue("overflow-block", "scroll") })
  Object.defineProperty((globalThis as any).overflowBlock, "auto", { value: Factory.propertyValue("overflow-block", "auto") })
  Object.defineProperty(globalThis, "overflowClipMargin", { value: Factory.property("overflow-clip-margin")})
  Object.defineProperty(globalThis, "overflowClipMarginBlock", { value: Factory.property("overflow-clip-margin-block")})
  Object.defineProperty(globalThis, "overflowClipMarginBlockEnd", { value: Factory.property("overflow-clip-margin-block-end")})
  Object.defineProperty(globalThis, "overflowClipMarginBlockStart", { value: Factory.property("overflow-clip-margin-block-start")})
  Object.defineProperty(globalThis, "overflowClipMarginBottom", { value: Factory.property("overflow-clip-margin-bottom")})
  Object.defineProperty(globalThis, "overflowClipMarginInline", { value: Factory.property("overflow-clip-margin-inline")})
  Object.defineProperty(globalThis, "overflowClipMarginInlineEnd", { value: Factory.property("overflow-clip-margin-inline-end")})
  Object.defineProperty(globalThis, "overflowClipMarginInlineStart", { value: Factory.property("overflow-clip-margin-inline-start")})
  Object.defineProperty(globalThis, "overflowClipMarginLeft", { value: Factory.property("overflow-clip-margin-left")})
  Object.defineProperty(globalThis, "overflowClipMarginRight", { value: Factory.property("overflow-clip-margin-right")})
  Object.defineProperty(globalThis, "overflowClipMarginTop", { value: Factory.property("overflow-clip-margin-top")})
  Object.defineProperty(globalThis, "overflowInline", { value: Factory.property("overflow-inline")})
  Object.defineProperty((globalThis as any).overflowInline, "visible", { value: Factory.propertyValue("overflow-inline", "visible") })
  Object.defineProperty((globalThis as any).overflowInline, "hidden", { value: Factory.propertyValue("overflow-inline", "hidden") })
  Object.defineProperty((globalThis as any).overflowInline, "clip", { value: Factory.propertyValue("overflow-inline", "clip") })
  Object.defineProperty((globalThis as any).overflowInline, "scroll", { value: Factory.propertyValue("overflow-inline", "scroll") })
  Object.defineProperty((globalThis as any).overflowInline, "auto", { value: Factory.propertyValue("overflow-inline", "auto") })
  Object.defineProperty(globalThis, "overflowWrap", { value: Factory.property("overflow-wrap")})
  Object.defineProperty((globalThis as any).overflowWrap, "normal", { value: Factory.propertyValue("overflow-wrap", "normal") })
  Object.defineProperty((globalThis as any).overflowWrap, "breakWord", { value: Factory.propertyValue("overflow-wrap", "break-word") })
  Object.defineProperty((globalThis as any).overflowWrap, "anywhere", { value: Factory.propertyValue("overflow-wrap", "anywhere") })
  Object.defineProperty(globalThis, "overflowX", { value: Factory.property("overflow-x")})
  Object.defineProperty((globalThis as any).overflowX, "visible", { value: Factory.propertyValue("overflow-x", "visible") })
  Object.defineProperty((globalThis as any).overflowX, "hidden", { value: Factory.propertyValue("overflow-x", "hidden") })
  Object.defineProperty((globalThis as any).overflowX, "clip", { value: Factory.propertyValue("overflow-x", "clip") })
  Object.defineProperty((globalThis as any).overflowX, "scroll", { value: Factory.propertyValue("overflow-x", "scroll") })
  Object.defineProperty((globalThis as any).overflowX, "auto", { value: Factory.propertyValue("overflow-x", "auto") })
  Object.defineProperty(globalThis, "overflowY", { value: Factory.property("overflow-y")})
  Object.defineProperty((globalThis as any).overflowY, "visible", { value: Factory.propertyValue("overflow-y", "visible") })
  Object.defineProperty((globalThis as any).overflowY, "hidden", { value: Factory.propertyValue("overflow-y", "hidden") })
  Object.defineProperty((globalThis as any).overflowY, "clip", { value: Factory.propertyValue("overflow-y", "clip") })
  Object.defineProperty((globalThis as any).overflowY, "scroll", { value: Factory.propertyValue("overflow-y", "scroll") })
  Object.defineProperty((globalThis as any).overflowY, "auto", { value: Factory.propertyValue("overflow-y", "auto") })
  Object.defineProperty(globalThis, "overrideColors", { value: Factory.property("override-colors")})
  Object.defineProperty(globalThis, "overscrollBehavior", { value: Factory.property("overscroll-behavior")})
  Object.defineProperty((globalThis as any).overscrollBehavior, "contain", { value: Factory.propertyValue("overscroll-behavior", "contain") })
  Object.defineProperty((globalThis as any).overscrollBehavior, "none", { value: Factory.propertyValue("overscroll-behavior", "none") })
  Object.defineProperty((globalThis as any).overscrollBehavior, "auto", { value: Factory.propertyValue("overscroll-behavior", "auto") })
  Object.defineProperty(globalThis, "overscrollBehaviorBlock", { value: Factory.property("overscroll-behavior-block")})
  Object.defineProperty((globalThis as any).overscrollBehaviorBlock, "contain", { value: Factory.propertyValue("overscroll-behavior-block", "contain") })
  Object.defineProperty((globalThis as any).overscrollBehaviorBlock, "none", { value: Factory.propertyValue("overscroll-behavior-block", "none") })
  Object.defineProperty((globalThis as any).overscrollBehaviorBlock, "auto", { value: Factory.propertyValue("overscroll-behavior-block", "auto") })
  Object.defineProperty(globalThis, "overscrollBehaviorInline", { value: Factory.property("overscroll-behavior-inline")})
  Object.defineProperty((globalThis as any).overscrollBehaviorInline, "contain", { value: Factory.propertyValue("overscroll-behavior-inline", "contain") })
  Object.defineProperty((globalThis as any).overscrollBehaviorInline, "none", { value: Factory.propertyValue("overscroll-behavior-inline", "none") })
  Object.defineProperty((globalThis as any).overscrollBehaviorInline, "auto", { value: Factory.propertyValue("overscroll-behavior-inline", "auto") })
  Object.defineProperty(globalThis, "overscrollBehaviorX", { value: Factory.property("overscroll-behavior-x")})
  Object.defineProperty((globalThis as any).overscrollBehaviorX, "contain", { value: Factory.propertyValue("overscroll-behavior-x", "contain") })
  Object.defineProperty((globalThis as any).overscrollBehaviorX, "none", { value: Factory.propertyValue("overscroll-behavior-x", "none") })
  Object.defineProperty((globalThis as any).overscrollBehaviorX, "auto", { value: Factory.propertyValue("overscroll-behavior-x", "auto") })
  Object.defineProperty(globalThis, "overscrollBehaviorY", { value: Factory.property("overscroll-behavior-y")})
  Object.defineProperty((globalThis as any).overscrollBehaviorY, "contain", { value: Factory.propertyValue("overscroll-behavior-y", "contain") })
  Object.defineProperty((globalThis as any).overscrollBehaviorY, "none", { value: Factory.propertyValue("overscroll-behavior-y", "none") })
  Object.defineProperty((globalThis as any).overscrollBehaviorY, "auto", { value: Factory.propertyValue("overscroll-behavior-y", "auto") })
  Object.defineProperty(globalThis, "pad", { value: Factory.property("pad")})
  Object.defineProperty(globalThis, "padding", { value: Factory.property("padding")})
  Object.defineProperty(globalThis, "paddingBlock", { value: Factory.property("padding-block")})
  Object.defineProperty(globalThis, "paddingBlockEnd", { value: Factory.property("padding-block-end")})
  Object.defineProperty(globalThis, "paddingBlockStart", { value: Factory.property("padding-block-start")})
  Object.defineProperty(globalThis, "paddingBottom", { value: Factory.property("padding-bottom")})
  Object.defineProperty(globalThis, "paddingInline", { value: Factory.property("padding-inline")})
  Object.defineProperty(globalThis, "paddingInlineEnd", { value: Factory.property("padding-inline-end")})
  Object.defineProperty(globalThis, "paddingInlineStart", { value: Factory.property("padding-inline-start")})
  Object.defineProperty(globalThis, "paddingLeft", { value: Factory.property("padding-left")})
  Object.defineProperty(globalThis, "paddingRight", { value: Factory.property("padding-right")})
  Object.defineProperty(globalThis, "paddingTop", { value: Factory.property("padding-top")})
  Object.defineProperty(globalThis, "page", { value: Factory.property("page")})
  Object.defineProperty((globalThis as any).page, "auto", { value: Factory.propertyValue("page", "auto") })
  Object.defineProperty(globalThis, "pageBreakAfter", { value: Factory.property("page-break-after")})
  Object.defineProperty((globalThis as any).pageBreakAfter, "auto", { value: Factory.propertyValue("page-break-after", "auto") })
  Object.defineProperty((globalThis as any).pageBreakAfter, "always", { value: Factory.propertyValue("page-break-after", "always") })
  Object.defineProperty((globalThis as any).pageBreakAfter, "avoid", { value: Factory.propertyValue("page-break-after", "avoid") })
  Object.defineProperty((globalThis as any).pageBreakAfter, "left", { value: Factory.propertyValue("page-break-after", "left") })
  Object.defineProperty((globalThis as any).pageBreakAfter, "right", { value: Factory.propertyValue("page-break-after", "right") })
  Object.defineProperty((globalThis as any).pageBreakAfter, "inherit", { value: Factory.propertyValue("page-break-after", "inherit") })
  Object.defineProperty(globalThis, "pageBreakBefore", { value: Factory.property("page-break-before")})
  Object.defineProperty((globalThis as any).pageBreakBefore, "auto", { value: Factory.propertyValue("page-break-before", "auto") })
  Object.defineProperty((globalThis as any).pageBreakBefore, "always", { value: Factory.propertyValue("page-break-before", "always") })
  Object.defineProperty((globalThis as any).pageBreakBefore, "avoid", { value: Factory.propertyValue("page-break-before", "avoid") })
  Object.defineProperty((globalThis as any).pageBreakBefore, "left", { value: Factory.propertyValue("page-break-before", "left") })
  Object.defineProperty((globalThis as any).pageBreakBefore, "right", { value: Factory.propertyValue("page-break-before", "right") })
  Object.defineProperty((globalThis as any).pageBreakBefore, "inherit", { value: Factory.propertyValue("page-break-before", "inherit") })
  Object.defineProperty(globalThis, "pageBreakInside", { value: Factory.property("page-break-inside")})
  Object.defineProperty((globalThis as any).pageBreakInside, "avoid", { value: Factory.propertyValue("page-break-inside", "avoid") })
  Object.defineProperty((globalThis as any).pageBreakInside, "auto", { value: Factory.propertyValue("page-break-inside", "auto") })
  Object.defineProperty((globalThis as any).pageBreakInside, "inherit", { value: Factory.propertyValue("page-break-inside", "inherit") })
  Object.defineProperty((globalThis as any).pageBreakInside, "always", { value: Factory.propertyValue("page-break-inside", "always") })
  Object.defineProperty((globalThis as any).pageBreakInside, "left", { value: Factory.propertyValue("page-break-inside", "left") })
  Object.defineProperty((globalThis as any).pageBreakInside, "right", { value: Factory.propertyValue("page-break-inside", "right") })
  Object.defineProperty(globalThis, "pageOrientation", { value: Factory.property("page-orientation")})
  Object.defineProperty(globalThis, "pageTransitionTag", { value: Factory.property("page-transition-tag")})
  Object.defineProperty(globalThis, "paintOrder", { value: Factory.property("paint-order")})
  Object.defineProperty((globalThis as any).paintOrder, "normal", { value: Factory.propertyValue("paint-order", "normal") })
  Object.defineProperty((globalThis as any).paintOrder, "fill", { value: Factory.propertyValue("paint-order", "fill") })
  Object.defineProperty((globalThis as any).paintOrder, "stroke", { value: Factory.propertyValue("paint-order", "stroke") })
  Object.defineProperty((globalThis as any).paintOrder, "markers", { value: Factory.propertyValue("paint-order", "markers") })
  Object.defineProperty(globalThis, "pause", { value: Factory.property("pause")})
  Object.defineProperty(globalThis, "pauseAfter", { value: Factory.property("pause-after")})
  Object.defineProperty((globalThis as any).pauseAfter, "none", { value: Factory.propertyValue("pause-after", "none") })
  Object.defineProperty((globalThis as any).pauseAfter, "xWeak", { value: Factory.propertyValue("pause-after", "x-weak") })
  Object.defineProperty((globalThis as any).pauseAfter, "weak", { value: Factory.propertyValue("pause-after", "weak") })
  Object.defineProperty((globalThis as any).pauseAfter, "medium", { value: Factory.propertyValue("pause-after", "medium") })
  Object.defineProperty((globalThis as any).pauseAfter, "strong", { value: Factory.propertyValue("pause-after", "strong") })
  Object.defineProperty((globalThis as any).pauseAfter, "xStrong", { value: Factory.propertyValue("pause-after", "x-strong") })
  Object.defineProperty(globalThis, "pauseBefore", { value: Factory.property("pause-before")})
  Object.defineProperty((globalThis as any).pauseBefore, "none", { value: Factory.propertyValue("pause-before", "none") })
  Object.defineProperty((globalThis as any).pauseBefore, "xWeak", { value: Factory.propertyValue("pause-before", "x-weak") })
  Object.defineProperty((globalThis as any).pauseBefore, "weak", { value: Factory.propertyValue("pause-before", "weak") })
  Object.defineProperty((globalThis as any).pauseBefore, "medium", { value: Factory.propertyValue("pause-before", "medium") })
  Object.defineProperty((globalThis as any).pauseBefore, "strong", { value: Factory.propertyValue("pause-before", "strong") })
  Object.defineProperty((globalThis as any).pauseBefore, "xStrong", { value: Factory.propertyValue("pause-before", "x-strong") })
  Object.defineProperty(globalThis, "penAction", { value: Factory.property("pen-action")})
  Object.defineProperty(globalThis, "perspective", { value: Factory.property("perspective")})
  Object.defineProperty((globalThis as any).perspective, "none", { value: Factory.propertyValue("perspective", "none") })
  Object.defineProperty(globalThis, "perspectiveOrigin", { value: Factory.property("perspective-origin")})
  Object.defineProperty((globalThis as any).perspectiveOrigin, "top", { value: Factory.propertyValue("perspective-origin", "top") })
  Object.defineProperty((globalThis as any).perspectiveOrigin, "right", { value: Factory.propertyValue("perspective-origin", "right") })
  Object.defineProperty((globalThis as any).perspectiveOrigin, "bottom", { value: Factory.propertyValue("perspective-origin", "bottom") })
  Object.defineProperty((globalThis as any).perspectiveOrigin, "left", { value: Factory.propertyValue("perspective-origin", "left") })
  Object.defineProperty((globalThis as any).perspectiveOrigin, "center", { value: Factory.propertyValue("perspective-origin", "center") })
  Object.defineProperty(globalThis, "perspectiveOriginX", { value: Factory.property("perspective-origin-x")})
  Object.defineProperty(globalThis, "perspectiveOriginY", { value: Factory.property("perspective-origin-y")})
  Object.defineProperty(globalThis, "pitch", { value: Factory.property("pitch")})
  Object.defineProperty(globalThis, "pitchRange", { value: Factory.property("pitch-range")})
  Object.defineProperty(globalThis, "placeContent", { value: Factory.property("place-content")})
  Object.defineProperty(globalThis, "placeItems", { value: Factory.property("place-items")})
  Object.defineProperty(globalThis, "placeSelf", { value: Factory.property("place-self")})
  Object.defineProperty(globalThis, "playDuring", { value: Factory.property("play-during")})
  Object.defineProperty(globalThis, "pointerEvents", { value: Factory.property("pointer-events")})
  Object.defineProperty((globalThis as any).pointerEvents, "auto", { value: Factory.propertyValue("pointer-events", "auto") })
  Object.defineProperty((globalThis as any).pointerEvents, "boundingBox", { value: Factory.propertyValue("pointer-events", "bounding-box") })
  Object.defineProperty((globalThis as any).pointerEvents, "visiblePainted", { value: Factory.propertyValue("pointer-events", "visiblePainted") })
  Object.defineProperty((globalThis as any).pointerEvents, "visibleFill", { value: Factory.propertyValue("pointer-events", "visibleFill") })
  Object.defineProperty((globalThis as any).pointerEvents, "visibleStroke", { value: Factory.propertyValue("pointer-events", "visibleStroke") })
  Object.defineProperty((globalThis as any).pointerEvents, "visible", { value: Factory.propertyValue("pointer-events", "visible") })
  Object.defineProperty((globalThis as any).pointerEvents, "painted", { value: Factory.propertyValue("pointer-events", "painted") })
  Object.defineProperty((globalThis as any).pointerEvents, "fill", { value: Factory.propertyValue("pointer-events", "fill") })
  Object.defineProperty((globalThis as any).pointerEvents, "stroke", { value: Factory.propertyValue("pointer-events", "stroke") })
  Object.defineProperty((globalThis as any).pointerEvents, "all", { value: Factory.propertyValue("pointer-events", "all") })
  Object.defineProperty((globalThis as any).pointerEvents, "none", { value: Factory.propertyValue("pointer-events", "none") })
  Object.defineProperty(globalThis, "position", { value: Factory.property("position")})
  Object.defineProperty((globalThis as any).position, "static", { value: Factory.propertyValue("position", "static") })
  Object.defineProperty((globalThis as any).position, "relative", { value: Factory.propertyValue("position", "relative") })
  Object.defineProperty((globalThis as any).position, "absolute", { value: Factory.propertyValue("position", "absolute") })
  Object.defineProperty((globalThis as any).position, "sticky", { value: Factory.propertyValue("position", "sticky") })
  Object.defineProperty((globalThis as any).position, "fixed", { value: Factory.propertyValue("position", "fixed") })
  Object.defineProperty(globalThis, "positionFallback", { value: Factory.property("position-fallback")})
  Object.defineProperty((globalThis as any).positionFallback, "none", { value: Factory.propertyValue("position-fallback", "none") })
  Object.defineProperty(globalThis, "prefix", { value: Factory.property("prefix")})
  Object.defineProperty(globalThis, "printColorAdjust", { value: Factory.property("print-color-adjust")})
  Object.defineProperty((globalThis as any).printColorAdjust, "economy", { value: Factory.propertyValue("print-color-adjust", "economy") })
  Object.defineProperty((globalThis as any).printColorAdjust, "exact", { value: Factory.propertyValue("print-color-adjust", "exact") })
  Object.defineProperty(globalThis, "propertyName", { value: Factory.property("property-name")})
  Object.defineProperty(globalThis, "quotes", { value: Factory.property("quotes")})
  Object.defineProperty((globalThis as any).quotes, "auto", { value: Factory.propertyValue("quotes", "auto") })
  Object.defineProperty((globalThis as any).quotes, "none", { value: Factory.propertyValue("quotes", "none") })
  Object.defineProperty(globalThis, "r", { value: Factory.property("r")})
  Object.defineProperty(globalThis, "range", { value: Factory.property("range")})
  Object.defineProperty(globalThis, "readingOrder", { value: Factory.property("reading-order")})
  Object.defineProperty(globalThis, "regionFragment", { value: Factory.property("region-fragment")})
  Object.defineProperty((globalThis as any).regionFragment, "auto", { value: Factory.propertyValue("region-fragment", "auto") })
  Object.defineProperty((globalThis as any).regionFragment, "_break", { value: Factory.propertyValue("region-fragment", "break") })
  Object.defineProperty(globalThis, "resize", { value: Factory.property("resize")})
  Object.defineProperty((globalThis as any).resize, "none", { value: Factory.propertyValue("resize", "none") })
  Object.defineProperty((globalThis as any).resize, "both", { value: Factory.propertyValue("resize", "both") })
  Object.defineProperty((globalThis as any).resize, "horizontal", { value: Factory.propertyValue("resize", "horizontal") })
  Object.defineProperty((globalThis as any).resize, "vertical", { value: Factory.propertyValue("resize", "vertical") })
  Object.defineProperty((globalThis as any).resize, "block", { value: Factory.propertyValue("resize", "block") })
  Object.defineProperty((globalThis as any).resize, "inline", { value: Factory.propertyValue("resize", "inline") })
  Object.defineProperty(globalThis, "rest", { value: Factory.property("rest")})
  Object.defineProperty(globalThis, "restAfter", { value: Factory.property("rest-after")})
  Object.defineProperty((globalThis as any).restAfter, "none", { value: Factory.propertyValue("rest-after", "none") })
  Object.defineProperty((globalThis as any).restAfter, "xWeak", { value: Factory.propertyValue("rest-after", "x-weak") })
  Object.defineProperty((globalThis as any).restAfter, "weak", { value: Factory.propertyValue("rest-after", "weak") })
  Object.defineProperty((globalThis as any).restAfter, "medium", { value: Factory.propertyValue("rest-after", "medium") })
  Object.defineProperty((globalThis as any).restAfter, "strong", { value: Factory.propertyValue("rest-after", "strong") })
  Object.defineProperty((globalThis as any).restAfter, "xStrong", { value: Factory.propertyValue("rest-after", "x-strong") })
  Object.defineProperty(globalThis, "restBefore", { value: Factory.property("rest-before")})
  Object.defineProperty((globalThis as any).restBefore, "none", { value: Factory.propertyValue("rest-before", "none") })
  Object.defineProperty((globalThis as any).restBefore, "xWeak", { value: Factory.propertyValue("rest-before", "x-weak") })
  Object.defineProperty((globalThis as any).restBefore, "weak", { value: Factory.propertyValue("rest-before", "weak") })
  Object.defineProperty((globalThis as any).restBefore, "medium", { value: Factory.propertyValue("rest-before", "medium") })
  Object.defineProperty((globalThis as any).restBefore, "strong", { value: Factory.propertyValue("rest-before", "strong") })
  Object.defineProperty((globalThis as any).restBefore, "xStrong", { value: Factory.propertyValue("rest-before", "x-strong") })
  Object.defineProperty(globalThis, "richness", { value: Factory.property("richness")})
  Object.defineProperty(globalThis, "right", { value: Factory.property("right")})
  Object.defineProperty((globalThis as any).right, "auto", { value: Factory.propertyValue("right", "auto") })
  Object.defineProperty(globalThis, "rotate", { value: Factory.property("rotate")})
  Object.defineProperty((globalThis as any).rotate, "none", { value: Factory.propertyValue("rotate", "none") })
  Object.defineProperty((globalThis as any).rotate, "x", { value: Factory.propertyValue("rotate", "x") })
  Object.defineProperty((globalThis as any).rotate, "y", { value: Factory.propertyValue("rotate", "y") })
  Object.defineProperty((globalThis as any).rotate, "z", { value: Factory.propertyValue("rotate", "z") })
  Object.defineProperty(globalThis, "rowGap", { value: Factory.property("row-gap")})
  Object.defineProperty((globalThis as any).rowGap, "normal", { value: Factory.propertyValue("row-gap", "normal") })
  Object.defineProperty(globalThis, "rubyAlign", { value: Factory.property("ruby-align")})
  Object.defineProperty((globalThis as any).rubyAlign, "start", { value: Factory.propertyValue("ruby-align", "start") })
  Object.defineProperty((globalThis as any).rubyAlign, "center", { value: Factory.propertyValue("ruby-align", "center") })
  Object.defineProperty((globalThis as any).rubyAlign, "spaceBetween", { value: Factory.propertyValue("ruby-align", "space-between") })
  Object.defineProperty((globalThis as any).rubyAlign, "spaceAround", { value: Factory.propertyValue("ruby-align", "space-around") })
  Object.defineProperty(globalThis, "rubyMerge", { value: Factory.property("ruby-merge")})
  Object.defineProperty((globalThis as any).rubyMerge, "separate", { value: Factory.propertyValue("ruby-merge", "separate") })
  Object.defineProperty((globalThis as any).rubyMerge, "merge", { value: Factory.propertyValue("ruby-merge", "merge") })
  Object.defineProperty((globalThis as any).rubyMerge, "auto", { value: Factory.propertyValue("ruby-merge", "auto") })
  Object.defineProperty(globalThis, "rubyOverhang", { value: Factory.property("ruby-overhang")})
  Object.defineProperty((globalThis as any).rubyOverhang, "auto", { value: Factory.propertyValue("ruby-overhang", "auto") })
  Object.defineProperty((globalThis as any).rubyOverhang, "none", { value: Factory.propertyValue("ruby-overhang", "none") })
  Object.defineProperty(globalThis, "rubyPosition", { value: Factory.property("ruby-position")})
  Object.defineProperty((globalThis as any).rubyPosition, "alternate", { value: Factory.propertyValue("ruby-position", "alternate") })
  Object.defineProperty((globalThis as any).rubyPosition, "over", { value: Factory.propertyValue("ruby-position", "over") })
  Object.defineProperty((globalThis as any).rubyPosition, "under", { value: Factory.propertyValue("ruby-position", "under") })
  Object.defineProperty((globalThis as any).rubyPosition, "interCharacter", { value: Factory.propertyValue("ruby-position", "inter-character") })
  Object.defineProperty(globalThis, "running", { value: Factory.property("running")})
  Object.defineProperty(globalThis, "rx", { value: Factory.property("rx")})
  Object.defineProperty((globalThis as any).rx, "auto", { value: Factory.propertyValue("rx", "auto") })
  Object.defineProperty(globalThis, "ry", { value: Factory.property("ry")})
  Object.defineProperty((globalThis as any).ry, "auto", { value: Factory.propertyValue("ry", "auto") })
  Object.defineProperty(globalThis, "scale", { value: Factory.property("scale")})
  Object.defineProperty((globalThis as any).scale, "none", { value: Factory.propertyValue("scale", "none") })
  Object.defineProperty(globalThis, "scrollBehavior", { value: Factory.property("scroll-behavior")})
  Object.defineProperty((globalThis as any).scrollBehavior, "auto", { value: Factory.propertyValue("scroll-behavior", "auto") })
  Object.defineProperty((globalThis as any).scrollBehavior, "smooth", { value: Factory.propertyValue("scroll-behavior", "smooth") })
  Object.defineProperty(globalThis, "scrollMargin", { value: Factory.property("scroll-margin")})
  Object.defineProperty(globalThis, "scrollMarginBlock", { value: Factory.property("scroll-margin-block")})
  Object.defineProperty(globalThis, "scrollMarginBlockEnd", { value: Factory.property("scroll-margin-block-end")})
  Object.defineProperty(globalThis, "scrollMarginBlockStart", { value: Factory.property("scroll-margin-block-start")})
  Object.defineProperty(globalThis, "scrollMarginBottom", { value: Factory.property("scroll-margin-bottom")})
  Object.defineProperty(globalThis, "scrollMarginInline", { value: Factory.property("scroll-margin-inline")})
  Object.defineProperty(globalThis, "scrollMarginInlineEnd", { value: Factory.property("scroll-margin-inline-end")})
  Object.defineProperty(globalThis, "scrollMarginInlineStart", { value: Factory.property("scroll-margin-inline-start")})
  Object.defineProperty(globalThis, "scrollMarginLeft", { value: Factory.property("scroll-margin-left")})
  Object.defineProperty(globalThis, "scrollMarginRight", { value: Factory.property("scroll-margin-right")})
  Object.defineProperty(globalThis, "scrollMarginTop", { value: Factory.property("scroll-margin-top")})
  Object.defineProperty(globalThis, "scrollPadding", { value: Factory.property("scroll-padding")})
  Object.defineProperty((globalThis as any).scrollPadding, "auto", { value: Factory.propertyValue("scroll-padding", "auto") })
  Object.defineProperty(globalThis, "scrollPaddingBlock", { value: Factory.property("scroll-padding-block")})
  Object.defineProperty((globalThis as any).scrollPaddingBlock, "auto", { value: Factory.propertyValue("scroll-padding-block", "auto") })
  Object.defineProperty(globalThis, "scrollPaddingBlockEnd", { value: Factory.property("scroll-padding-block-end")})
  Object.defineProperty((globalThis as any).scrollPaddingBlockEnd, "auto", { value: Factory.propertyValue("scroll-padding-block-end", "auto") })
  Object.defineProperty(globalThis, "scrollPaddingBlockStart", { value: Factory.property("scroll-padding-block-start")})
  Object.defineProperty((globalThis as any).scrollPaddingBlockStart, "auto", { value: Factory.propertyValue("scroll-padding-block-start", "auto") })
  Object.defineProperty(globalThis, "scrollPaddingBottom", { value: Factory.property("scroll-padding-bottom")})
  Object.defineProperty((globalThis as any).scrollPaddingBottom, "auto", { value: Factory.propertyValue("scroll-padding-bottom", "auto") })
  Object.defineProperty(globalThis, "scrollPaddingInline", { value: Factory.property("scroll-padding-inline")})
  Object.defineProperty((globalThis as any).scrollPaddingInline, "auto", { value: Factory.propertyValue("scroll-padding-inline", "auto") })
  Object.defineProperty(globalThis, "scrollPaddingInlineEnd", { value: Factory.property("scroll-padding-inline-end")})
  Object.defineProperty((globalThis as any).scrollPaddingInlineEnd, "auto", { value: Factory.propertyValue("scroll-padding-inline-end", "auto") })
  Object.defineProperty(globalThis, "scrollPaddingInlineStart", { value: Factory.property("scroll-padding-inline-start")})
  Object.defineProperty((globalThis as any).scrollPaddingInlineStart, "auto", { value: Factory.propertyValue("scroll-padding-inline-start", "auto") })
  Object.defineProperty(globalThis, "scrollPaddingLeft", { value: Factory.property("scroll-padding-left")})
  Object.defineProperty((globalThis as any).scrollPaddingLeft, "auto", { value: Factory.propertyValue("scroll-padding-left", "auto") })
  Object.defineProperty(globalThis, "scrollPaddingRight", { value: Factory.property("scroll-padding-right")})
  Object.defineProperty((globalThis as any).scrollPaddingRight, "auto", { value: Factory.propertyValue("scroll-padding-right", "auto") })
  Object.defineProperty(globalThis, "scrollPaddingTop", { value: Factory.property("scroll-padding-top")})
  Object.defineProperty((globalThis as any).scrollPaddingTop, "auto", { value: Factory.propertyValue("scroll-padding-top", "auto") })
  Object.defineProperty(globalThis, "scrollSnapAlign", { value: Factory.property("scroll-snap-align")})
  Object.defineProperty((globalThis as any).scrollSnapAlign, "none", { value: Factory.propertyValue("scroll-snap-align", "none") })
  Object.defineProperty((globalThis as any).scrollSnapAlign, "start", { value: Factory.propertyValue("scroll-snap-align", "start") })
  Object.defineProperty((globalThis as any).scrollSnapAlign, "end", { value: Factory.propertyValue("scroll-snap-align", "end") })
  Object.defineProperty((globalThis as any).scrollSnapAlign, "center", { value: Factory.propertyValue("scroll-snap-align", "center") })
  Object.defineProperty(globalThis, "scrollSnapCoordinate", { value: Factory.property("scroll-snap-coordinate")})
  Object.defineProperty(globalThis, "scrollSnapDestination", { value: Factory.property("scroll-snap-destination")})
  Object.defineProperty(globalThis, "scrollSnapMargin", { value: Factory.property("scroll-snap-margin")})
  Object.defineProperty(globalThis, "scrollSnapMarginBottom", { value: Factory.property("scroll-snap-margin-bottom")})
  Object.defineProperty(globalThis, "scrollSnapMarginLeft", { value: Factory.property("scroll-snap-margin-left")})
  Object.defineProperty(globalThis, "scrollSnapMarginRight", { value: Factory.property("scroll-snap-margin-right")})
  Object.defineProperty(globalThis, "scrollSnapMarginTop", { value: Factory.property("scroll-snap-margin-top")})
  Object.defineProperty(globalThis, "scrollSnapPointsX", { value: Factory.property("scroll-snap-points-x")})
  Object.defineProperty(globalThis, "scrollSnapPointsY", { value: Factory.property("scroll-snap-points-y")})
  Object.defineProperty(globalThis, "scrollSnapStop", { value: Factory.property("scroll-snap-stop")})
  Object.defineProperty((globalThis as any).scrollSnapStop, "normal", { value: Factory.propertyValue("scroll-snap-stop", "normal") })
  Object.defineProperty((globalThis as any).scrollSnapStop, "always", { value: Factory.propertyValue("scroll-snap-stop", "always") })
  Object.defineProperty(globalThis, "scrollSnapType", { value: Factory.property("scroll-snap-type")})
  Object.defineProperty((globalThis as any).scrollSnapType, "none", { value: Factory.propertyValue("scroll-snap-type", "none") })
  Object.defineProperty((globalThis as any).scrollSnapType, "x", { value: Factory.propertyValue("scroll-snap-type", "x") })
  Object.defineProperty((globalThis as any).scrollSnapType, "y", { value: Factory.propertyValue("scroll-snap-type", "y") })
  Object.defineProperty((globalThis as any).scrollSnapType, "block", { value: Factory.propertyValue("scroll-snap-type", "block") })
  Object.defineProperty((globalThis as any).scrollSnapType, "inline", { value: Factory.propertyValue("scroll-snap-type", "inline") })
  Object.defineProperty((globalThis as any).scrollSnapType, "both", { value: Factory.propertyValue("scroll-snap-type", "both") })
  Object.defineProperty((globalThis as any).scrollSnapType, "mandatory", { value: Factory.propertyValue("scroll-snap-type", "mandatory") })
  Object.defineProperty((globalThis as any).scrollSnapType, "proximity", { value: Factory.propertyValue("scroll-snap-type", "proximity") })
  Object.defineProperty(globalThis, "scrollSnapTypeX", { value: Factory.property("scroll-snap-type-x")})
  Object.defineProperty(globalThis, "scrollSnapTypeY", { value: Factory.property("scroll-snap-type-y")})
  Object.defineProperty(globalThis, "scrollStart", { value: Factory.property("scroll-start")})
  Object.defineProperty((globalThis as any).scrollStart, "auto", { value: Factory.propertyValue("scroll-start", "auto") })
  Object.defineProperty((globalThis as any).scrollStart, "start", { value: Factory.propertyValue("scroll-start", "start") })
  Object.defineProperty((globalThis as any).scrollStart, "end", { value: Factory.propertyValue("scroll-start", "end") })
  Object.defineProperty((globalThis as any).scrollStart, "center", { value: Factory.propertyValue("scroll-start", "center") })
  Object.defineProperty((globalThis as any).scrollStart, "left", { value: Factory.propertyValue("scroll-start", "left") })
  Object.defineProperty((globalThis as any).scrollStart, "right", { value: Factory.propertyValue("scroll-start", "right") })
  Object.defineProperty((globalThis as any).scrollStart, "top", { value: Factory.propertyValue("scroll-start", "top") })
  Object.defineProperty((globalThis as any).scrollStart, "bottom", { value: Factory.propertyValue("scroll-start", "bottom") })
  Object.defineProperty(globalThis, "scrollStartBlock", { value: Factory.property("scroll-start-block")})
  Object.defineProperty((globalThis as any).scrollStartBlock, "auto", { value: Factory.propertyValue("scroll-start-block", "auto") })
  Object.defineProperty((globalThis as any).scrollStartBlock, "start", { value: Factory.propertyValue("scroll-start-block", "start") })
  Object.defineProperty((globalThis as any).scrollStartBlock, "end", { value: Factory.propertyValue("scroll-start-block", "end") })
  Object.defineProperty((globalThis as any).scrollStartBlock, "center", { value: Factory.propertyValue("scroll-start-block", "center") })
  Object.defineProperty(globalThis, "scrollStartInline", { value: Factory.property("scroll-start-inline")})
  Object.defineProperty((globalThis as any).scrollStartInline, "auto", { value: Factory.propertyValue("scroll-start-inline", "auto") })
  Object.defineProperty((globalThis as any).scrollStartInline, "start", { value: Factory.propertyValue("scroll-start-inline", "start") })
  Object.defineProperty((globalThis as any).scrollStartInline, "end", { value: Factory.propertyValue("scroll-start-inline", "end") })
  Object.defineProperty((globalThis as any).scrollStartInline, "center", { value: Factory.propertyValue("scroll-start-inline", "center") })
  Object.defineProperty(globalThis, "scrollStartTarget", { value: Factory.property("scroll-start-target")})
  Object.defineProperty((globalThis as any).scrollStartTarget, "none", { value: Factory.propertyValue("scroll-start-target", "none") })
  Object.defineProperty((globalThis as any).scrollStartTarget, "auto", { value: Factory.propertyValue("scroll-start-target", "auto") })
  Object.defineProperty(globalThis, "scrollStartX", { value: Factory.property("scroll-start-x")})
  Object.defineProperty((globalThis as any).scrollStartX, "auto", { value: Factory.propertyValue("scroll-start-x", "auto") })
  Object.defineProperty((globalThis as any).scrollStartX, "start", { value: Factory.propertyValue("scroll-start-x", "start") })
  Object.defineProperty((globalThis as any).scrollStartX, "end", { value: Factory.propertyValue("scroll-start-x", "end") })
  Object.defineProperty((globalThis as any).scrollStartX, "center", { value: Factory.propertyValue("scroll-start-x", "center") })
  Object.defineProperty(globalThis, "scrollStartY", { value: Factory.property("scroll-start-y")})
  Object.defineProperty((globalThis as any).scrollStartY, "auto", { value: Factory.propertyValue("scroll-start-y", "auto") })
  Object.defineProperty((globalThis as any).scrollStartY, "start", { value: Factory.propertyValue("scroll-start-y", "start") })
  Object.defineProperty((globalThis as any).scrollStartY, "end", { value: Factory.propertyValue("scroll-start-y", "end") })
  Object.defineProperty((globalThis as any).scrollStartY, "center", { value: Factory.propertyValue("scroll-start-y", "center") })
  Object.defineProperty(globalThis, "scrollTimeline", { value: Factory.property("scroll-timeline")})
  Object.defineProperty(globalThis, "scrollTimelineAxis", { value: Factory.property("scroll-timeline-axis")})
  Object.defineProperty((globalThis as any).scrollTimelineAxis, "block", { value: Factory.propertyValue("scroll-timeline-axis", "block") })
  Object.defineProperty((globalThis as any).scrollTimelineAxis, "inline", { value: Factory.propertyValue("scroll-timeline-axis", "inline") })
  Object.defineProperty((globalThis as any).scrollTimelineAxis, "vertical", { value: Factory.propertyValue("scroll-timeline-axis", "vertical") })
  Object.defineProperty((globalThis as any).scrollTimelineAxis, "horizontal", { value: Factory.propertyValue("scroll-timeline-axis", "horizontal") })
  Object.defineProperty((globalThis as any).scrollTimelineAxis, "nearest", { value: Factory.propertyValue("scroll-timeline-axis", "nearest") })
  Object.defineProperty((globalThis as any).scrollTimelineAxis, "root", { value: Factory.propertyValue("scroll-timeline-axis", "root") })
  Object.defineProperty(globalThis, "scrollTimelineName", { value: Factory.property("scroll-timeline-name")})
  Object.defineProperty((globalThis as any).scrollTimelineName, "none", { value: Factory.propertyValue("scroll-timeline-name", "none") })
  Object.defineProperty(globalThis, "scrollbarArrowColor", { value: Factory.property("scrollbar-arrow-color")})
  Object.defineProperty(globalThis, "scrollbarBaseColor", { value: Factory.property("scrollbar-base-color")})
  Object.defineProperty(globalThis, "scrollbarColor", { value: Factory.property("scrollbar-color")})
  Object.defineProperty((globalThis as any).scrollbarColor, "auto", { value: Factory.propertyValue("scrollbar-color", "auto") })
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).scrollbarColor, color, { value: Factory.propertyValue("scrollbar-color", color) })
  }
  Object.defineProperty(globalThis, "scrollbarDarkShadowColor", { value: Factory.property("scrollbar-dark-shadow-color")})
  Object.defineProperty(globalThis, "scrollbarDarkshadowColor", { value: Factory.property("scrollbar-darkshadow-color")})
  Object.defineProperty(globalThis, "scrollbarFaceColor", { value: Factory.property("scrollbar-face-color")})
  Object.defineProperty(globalThis, "scrollbarGutter", { value: Factory.property("scrollbar-gutter")})
  Object.defineProperty((globalThis as any).scrollbarGutter, "auto", { value: Factory.propertyValue("scrollbar-gutter", "auto") })
  Object.defineProperty((globalThis as any).scrollbarGutter, "stable", { value: Factory.propertyValue("scrollbar-gutter", "stable") })
  Object.defineProperty((globalThis as any).scrollbarGutter, "bothEdges", { value: Factory.propertyValue("scrollbar-gutter", "both-edges") })
  Object.defineProperty(globalThis, "scrollbarHighlightColor", { value: Factory.property("scrollbar-highlight-color")})
  Object.defineProperty(globalThis, "scrollbarShadowColor", { value: Factory.property("scrollbar-shadow-color")})
  Object.defineProperty(globalThis, "scrollbarTrackColor", { value: Factory.property("scrollbar-track-color")})
  Object.defineProperty(globalThis, "scrollbarWidth", { value: Factory.property("scrollbar-width")})
  Object.defineProperty((globalThis as any).scrollbarWidth, "auto", { value: Factory.propertyValue("scrollbar-width", "auto") })
  Object.defineProperty((globalThis as any).scrollbarWidth, "thin", { value: Factory.propertyValue("scrollbar-width", "thin") })
  Object.defineProperty((globalThis as any).scrollbarWidth, "none", { value: Factory.propertyValue("scrollbar-width", "none") })
  Object.defineProperty(globalThis, "scrollbar3dLightColor", { value: Factory.property("scrollbar3d-light-color")})
  Object.defineProperty(globalThis, "scrollbar3dlightColor", { value: Factory.property("scrollbar3dlight-color")})
  Object.defineProperty(globalThis, "shapeImageThreshold", { value: Factory.property("shape-image-threshold")})
  Object.defineProperty(globalThis, "shapeInside", { value: Factory.property("shape-inside")})
  Object.defineProperty((globalThis as any).shapeInside, "auto", { value: Factory.propertyValue("shape-inside", "auto") })
  Object.defineProperty((globalThis as any).shapeInside, "outsideShape", { value: Factory.propertyValue("shape-inside", "outside-shape") })
  Object.defineProperty((globalThis as any).shapeInside, "shapeBox", { value: Factory.propertyValue("shape-inside", "shape-box") })
  Object.defineProperty((globalThis as any).shapeInside, "display", { value: Factory.propertyValue("shape-inside", "display") })
  Object.defineProperty(globalThis, "shapeMargin", { value: Factory.property("shape-margin")})
  Object.defineProperty(globalThis, "shapeOutside", { value: Factory.property("shape-outside")})
  Object.defineProperty((globalThis as any).shapeOutside, "none", { value: Factory.propertyValue("shape-outside", "none") })
  Object.defineProperty((globalThis as any).shapeOutside, "marginBox", { value: Factory.propertyValue("shape-outside", "margin-box") })
  Object.defineProperty((globalThis as any).shapeOutside, "borderBox", { value: Factory.propertyValue("shape-outside", "border-box") })
  Object.defineProperty((globalThis as any).shapeOutside, "paddingBox", { value: Factory.propertyValue("shape-outside", "padding-box") })
  Object.defineProperty((globalThis as any).shapeOutside, "contentBox", { value: Factory.propertyValue("shape-outside", "content-box") })
  Object.defineProperty(globalThis, "shapePadding", { value: Factory.property("shape-padding")})
  Object.defineProperty(globalThis, "shapeRendering", { value: Factory.property("shape-rendering")})
  Object.defineProperty((globalThis as any).shapeRendering, "auto", { value: Factory.propertyValue("shape-rendering", "auto") })
  Object.defineProperty((globalThis as any).shapeRendering, "optimizeSpeed", { value: Factory.propertyValue("shape-rendering", "optimizeSpeed") })
  Object.defineProperty((globalThis as any).shapeRendering, "crispEdges", { value: Factory.propertyValue("shape-rendering", "crispEdges") })
  Object.defineProperty((globalThis as any).shapeRendering, "geometricPrecision", { value: Factory.propertyValue("shape-rendering", "geometricPrecision") })
  Object.defineProperty(globalThis, "shapeSubtract", { value: Factory.property("shape-subtract")})
  Object.defineProperty((globalThis as any).shapeSubtract, "none", { value: Factory.propertyValue("shape-subtract", "none") })
  Object.defineProperty(globalThis, "size", { value: Factory.property("size")})
  Object.defineProperty(globalThis, "sizeAdjust", { value: Factory.property("size-adjust")})
  Object.defineProperty(globalThis, "snapHeight", { value: Factory.property("snap-height")})
  Object.defineProperty(globalThis, "solidColor", { value: Factory.property("solid-color")})
  Object.defineProperty(globalThis, "solidOpacity", { value: Factory.property("solid-opacity")})
  Object.defineProperty(globalThis, "spatialNavigationAction", { value: Factory.property("spatial-navigation-action")})
  Object.defineProperty((globalThis as any).spatialNavigationAction, "auto", { value: Factory.propertyValue("spatial-navigation-action", "auto") })
  Object.defineProperty((globalThis as any).spatialNavigationAction, "focus", { value: Factory.propertyValue("spatial-navigation-action", "focus") })
  Object.defineProperty((globalThis as any).spatialNavigationAction, "scroll", { value: Factory.propertyValue("spatial-navigation-action", "scroll") })
  Object.defineProperty(globalThis, "spatialNavigationContain", { value: Factory.property("spatial-navigation-contain")})
  Object.defineProperty((globalThis as any).spatialNavigationContain, "auto", { value: Factory.propertyValue("spatial-navigation-contain", "auto") })
  Object.defineProperty((globalThis as any).spatialNavigationContain, "contain", { value: Factory.propertyValue("spatial-navigation-contain", "contain") })
  Object.defineProperty(globalThis, "spatialNavigationFunction", { value: Factory.property("spatial-navigation-function")})
  Object.defineProperty((globalThis as any).spatialNavigationFunction, "normal", { value: Factory.propertyValue("spatial-navigation-function", "normal") })
  Object.defineProperty((globalThis as any).spatialNavigationFunction, "grid", { value: Factory.propertyValue("spatial-navigation-function", "grid") })
  Object.defineProperty(globalThis, "speak", { value: Factory.property("speak")})
  Object.defineProperty((globalThis as any).speak, "auto", { value: Factory.propertyValue("speak", "auto") })
  Object.defineProperty((globalThis as any).speak, "never", { value: Factory.propertyValue("speak", "never") })
  Object.defineProperty((globalThis as any).speak, "always", { value: Factory.propertyValue("speak", "always") })
  Object.defineProperty(globalThis, "speakAs", { value: Factory.property("speak-as")})
  Object.defineProperty((globalThis as any).speakAs, "normal", { value: Factory.propertyValue("speak-as", "normal") })
  Object.defineProperty((globalThis as any).speakAs, "spellOut", { value: Factory.propertyValue("speak-as", "spell-out") })
  Object.defineProperty((globalThis as any).speakAs, "digits", { value: Factory.propertyValue("speak-as", "digits") })
  Object.defineProperty((globalThis as any).speakAs, "literalPunctuation", { value: Factory.propertyValue("speak-as", "literal-punctuation") })
  Object.defineProperty((globalThis as any).speakAs, "noPunctuation", { value: Factory.propertyValue("speak-as", "no-punctuation") })
  Object.defineProperty(globalThis, "speakHeader", { value: Factory.property("speak-header")})
  Object.defineProperty(globalThis, "speakNumeral", { value: Factory.property("speak-numeral")})
  Object.defineProperty(globalThis, "speakPunctuation", { value: Factory.property("speak-punctuation")})
  Object.defineProperty(globalThis, "speechRate", { value: Factory.property("speech-rate")})
  Object.defineProperty(globalThis, "src", { value: Factory.property("src")})
  Object.defineProperty(globalThis, "stopColor", { value: Factory.property("stop-color")})
  Object.defineProperty(globalThis, "stopOpacity", { value: Factory.property("stop-opacity")})
  Object.defineProperty(globalThis, "stress", { value: Factory.property("stress")})
  Object.defineProperty(globalThis, "stringSet", { value: Factory.property("string-set")})
  Object.defineProperty((globalThis as any).stringSet, "none", { value: Factory.propertyValue("string-set", "none") })
  Object.defineProperty(globalThis, "stroke", { value: Factory.property("stroke")})
  Object.defineProperty((globalThis as any).stroke, "none", { value: Factory.propertyValue("stroke", "none") })
  Object.defineProperty(globalThis, "strokeAlign", { value: Factory.property("stroke-align")})
  Object.defineProperty((globalThis as any).strokeAlign, "center", { value: Factory.propertyValue("stroke-align", "center") })
  Object.defineProperty((globalThis as any).strokeAlign, "inset", { value: Factory.propertyValue("stroke-align", "inset") })
  Object.defineProperty((globalThis as any).strokeAlign, "outset", { value: Factory.propertyValue("stroke-align", "outset") })
  Object.defineProperty(globalThis, "strokeAlignment", { value: Factory.property("stroke-alignment")})
  Object.defineProperty((globalThis as any).strokeAlignment, "center", { value: Factory.propertyValue("stroke-alignment", "center") })
  Object.defineProperty((globalThis as any).strokeAlignment, "inner", { value: Factory.propertyValue("stroke-alignment", "inner") })
  Object.defineProperty((globalThis as any).strokeAlignment, "outer", { value: Factory.propertyValue("stroke-alignment", "outer") })
  Object.defineProperty(globalThis, "strokeBreak", { value: Factory.property("stroke-break")})
  Object.defineProperty((globalThis as any).strokeBreak, "boundingBox", { value: Factory.propertyValue("stroke-break", "bounding-box") })
  Object.defineProperty((globalThis as any).strokeBreak, "slice", { value: Factory.propertyValue("stroke-break", "slice") })
  Object.defineProperty((globalThis as any).strokeBreak, "clone", { value: Factory.propertyValue("stroke-break", "clone") })
  Object.defineProperty(globalThis, "strokeColor", { value: Factory.property("stroke-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).strokeColor, color, { value: Factory.propertyValue("stroke-color", color) })
  }
  Object.defineProperty(globalThis, "strokeDashCorner", { value: Factory.property("stroke-dash-corner")})
  Object.defineProperty((globalThis as any).strokeDashCorner, "none", { value: Factory.propertyValue("stroke-dash-corner", "none") })
  Object.defineProperty(globalThis, "strokeDashJustify", { value: Factory.property("stroke-dash-justify")})
  Object.defineProperty((globalThis as any).strokeDashJustify, "none", { value: Factory.propertyValue("stroke-dash-justify", "none") })
  Object.defineProperty((globalThis as any).strokeDashJustify, "stretch", { value: Factory.propertyValue("stroke-dash-justify", "stretch") })
  Object.defineProperty((globalThis as any).strokeDashJustify, "compress", { value: Factory.propertyValue("stroke-dash-justify", "compress") })
  Object.defineProperty((globalThis as any).strokeDashJustify, "dashes", { value: Factory.propertyValue("stroke-dash-justify", "dashes") })
  Object.defineProperty((globalThis as any).strokeDashJustify, "gaps", { value: Factory.propertyValue("stroke-dash-justify", "gaps") })
  Object.defineProperty(globalThis, "strokeDashadjust", { value: Factory.property("stroke-dashadjust")})
  Object.defineProperty((globalThis as any).strokeDashadjust, "none", { value: Factory.propertyValue("stroke-dashadjust", "none") })
  Object.defineProperty((globalThis as any).strokeDashadjust, "stretch", { value: Factory.propertyValue("stroke-dashadjust", "stretch") })
  Object.defineProperty((globalThis as any).strokeDashadjust, "compress", { value: Factory.propertyValue("stroke-dashadjust", "compress") })
  Object.defineProperty((globalThis as any).strokeDashadjust, "dashes", { value: Factory.propertyValue("stroke-dashadjust", "dashes") })
  Object.defineProperty((globalThis as any).strokeDashadjust, "gaps", { value: Factory.propertyValue("stroke-dashadjust", "gaps") })
  Object.defineProperty(globalThis, "strokeDasharray", { value: Factory.property("stroke-dasharray")})
  Object.defineProperty((globalThis as any).strokeDasharray, "none", { value: Factory.propertyValue("stroke-dasharray", "none") })
  Object.defineProperty(globalThis, "strokeDashcorner", { value: Factory.property("stroke-dashcorner")})
  Object.defineProperty((globalThis as any).strokeDashcorner, "none", { value: Factory.propertyValue("stroke-dashcorner", "none") })
  Object.defineProperty(globalThis, "strokeDashoffset", { value: Factory.property("stroke-dashoffset")})
  Object.defineProperty(globalThis, "strokeImage", { value: Factory.property("stroke-image")})
  Object.defineProperty((globalThis as any).strokeImage, "none", { value: Factory.propertyValue("stroke-image", "none") })
  Object.defineProperty(globalThis, "strokeLinecap", { value: Factory.property("stroke-linecap")})
  Object.defineProperty((globalThis as any).strokeLinecap, "butt", { value: Factory.propertyValue("stroke-linecap", "butt") })
  Object.defineProperty((globalThis as any).strokeLinecap, "round", { value: Factory.propertyValue("stroke-linecap", "round") })
  Object.defineProperty((globalThis as any).strokeLinecap, "square", { value: Factory.propertyValue("stroke-linecap", "square") })
  Object.defineProperty(globalThis, "strokeLinejoin", { value: Factory.property("stroke-linejoin")})
  Object.defineProperty((globalThis as any).strokeLinejoin, "crop", { value: Factory.propertyValue("stroke-linejoin", "crop") })
  Object.defineProperty((globalThis as any).strokeLinejoin, "arcs", { value: Factory.propertyValue("stroke-linejoin", "arcs") })
  Object.defineProperty((globalThis as any).strokeLinejoin, "miter", { value: Factory.propertyValue("stroke-linejoin", "miter") })
  Object.defineProperty((globalThis as any).strokeLinejoin, "bevel", { value: Factory.propertyValue("stroke-linejoin", "bevel") })
  Object.defineProperty((globalThis as any).strokeLinejoin, "round", { value: Factory.propertyValue("stroke-linejoin", "round") })
  Object.defineProperty((globalThis as any).strokeLinejoin, "fallback", { value: Factory.propertyValue("stroke-linejoin", "fallback") })
  Object.defineProperty(globalThis, "strokeMiterlimit", { value: Factory.property("stroke-miterlimit")})
  Object.defineProperty(globalThis, "strokeOpacity", { value: Factory.property("stroke-opacity")})
  Object.defineProperty(globalThis, "strokeOrigin", { value: Factory.property("stroke-origin")})
  Object.defineProperty((globalThis as any).strokeOrigin, "matchParent", { value: Factory.propertyValue("stroke-origin", "match-parent") })
  Object.defineProperty((globalThis as any).strokeOrigin, "fillBox", { value: Factory.propertyValue("stroke-origin", "fill-box") })
  Object.defineProperty((globalThis as any).strokeOrigin, "strokeBox", { value: Factory.propertyValue("stroke-origin", "stroke-box") })
  Object.defineProperty((globalThis as any).strokeOrigin, "contentBox", { value: Factory.propertyValue("stroke-origin", "content-box") })
  Object.defineProperty((globalThis as any).strokeOrigin, "paddingBox", { value: Factory.propertyValue("stroke-origin", "padding-box") })
  Object.defineProperty((globalThis as any).strokeOrigin, "borderBox", { value: Factory.propertyValue("stroke-origin", "border-box") })
  Object.defineProperty(globalThis, "strokePosition", { value: Factory.property("stroke-position")})
  Object.defineProperty(globalThis, "strokeRepeat", { value: Factory.property("stroke-repeat")})
  Object.defineProperty(globalThis, "strokeSize", { value: Factory.property("stroke-size")})
  Object.defineProperty(globalThis, "strokeWidth", { value: Factory.property("stroke-width")})
  Object.defineProperty(globalThis, "suffix", { value: Factory.property("suffix")})
  Object.defineProperty(globalThis, "supportedColorSchemes", { value: Factory.property("supported-color-schemes")})
  Object.defineProperty(globalThis, "symbols", { value: Factory.property("symbols")})
  Object.defineProperty(globalThis, "syntax", { value: Factory.property("syntax")})
  Object.defineProperty(globalThis, "system", { value: Factory.property("system")})
  Object.defineProperty(globalThis, "tabSize", { value: Factory.property("tab-size")})
  Object.defineProperty(globalThis, "tableLayout", { value: Factory.property("table-layout")})
  Object.defineProperty((globalThis as any).tableLayout, "auto", { value: Factory.propertyValue("table-layout", "auto") })
  Object.defineProperty((globalThis as any).tableLayout, "fixed", { value: Factory.propertyValue("table-layout", "fixed") })
  Object.defineProperty(globalThis, "textAlign", { value: Factory.property("text-align")})
  Object.defineProperty((globalThis as any).textAlign, "start", { value: Factory.propertyValue("text-align", "start") })
  Object.defineProperty((globalThis as any).textAlign, "end", { value: Factory.propertyValue("text-align", "end") })
  Object.defineProperty((globalThis as any).textAlign, "left", { value: Factory.propertyValue("text-align", "left") })
  Object.defineProperty((globalThis as any).textAlign, "right", { value: Factory.propertyValue("text-align", "right") })
  Object.defineProperty((globalThis as any).textAlign, "center", { value: Factory.propertyValue("text-align", "center") })
  Object.defineProperty((globalThis as any).textAlign, "justify", { value: Factory.propertyValue("text-align", "justify") })
  Object.defineProperty((globalThis as any).textAlign, "matchParent", { value: Factory.propertyValue("text-align", "match-parent") })
  Object.defineProperty((globalThis as any).textAlign, "justifyAll", { value: Factory.propertyValue("text-align", "justify-all") })
  Object.defineProperty((globalThis as any).textAlign, "alignment_character", { value: Factory.propertyValue("text-align", "alignment character") })
  Object.defineProperty(globalThis, "textAlignAll", { value: Factory.property("text-align-all")})
  Object.defineProperty((globalThis as any).textAlignAll, "start", { value: Factory.propertyValue("text-align-all", "start") })
  Object.defineProperty((globalThis as any).textAlignAll, "end", { value: Factory.propertyValue("text-align-all", "end") })
  Object.defineProperty((globalThis as any).textAlignAll, "left", { value: Factory.propertyValue("text-align-all", "left") })
  Object.defineProperty((globalThis as any).textAlignAll, "right", { value: Factory.propertyValue("text-align-all", "right") })
  Object.defineProperty((globalThis as any).textAlignAll, "center", { value: Factory.propertyValue("text-align-all", "center") })
  Object.defineProperty((globalThis as any).textAlignAll, "justify", { value: Factory.propertyValue("text-align-all", "justify") })
  Object.defineProperty((globalThis as any).textAlignAll, "matchParent", { value: Factory.propertyValue("text-align-all", "match-parent") })
  Object.defineProperty(globalThis, "textAlignLast", { value: Factory.property("text-align-last")})
  Object.defineProperty((globalThis as any).textAlignLast, "auto", { value: Factory.propertyValue("text-align-last", "auto") })
  Object.defineProperty((globalThis as any).textAlignLast, "start", { value: Factory.propertyValue("text-align-last", "start") })
  Object.defineProperty((globalThis as any).textAlignLast, "end", { value: Factory.propertyValue("text-align-last", "end") })
  Object.defineProperty((globalThis as any).textAlignLast, "left", { value: Factory.propertyValue("text-align-last", "left") })
  Object.defineProperty((globalThis as any).textAlignLast, "right", { value: Factory.propertyValue("text-align-last", "right") })
  Object.defineProperty((globalThis as any).textAlignLast, "center", { value: Factory.propertyValue("text-align-last", "center") })
  Object.defineProperty((globalThis as any).textAlignLast, "justify", { value: Factory.propertyValue("text-align-last", "justify") })
  Object.defineProperty((globalThis as any).textAlignLast, "matchParent", { value: Factory.propertyValue("text-align-last", "match-parent") })
  Object.defineProperty(globalThis, "textAnchor", { value: Factory.property("text-anchor")})
  Object.defineProperty((globalThis as any).textAnchor, "start", { value: Factory.propertyValue("text-anchor", "start") })
  Object.defineProperty((globalThis as any).textAnchor, "middle", { value: Factory.propertyValue("text-anchor", "middle") })
  Object.defineProperty((globalThis as any).textAnchor, "end", { value: Factory.propertyValue("text-anchor", "end") })
  Object.defineProperty(globalThis, "textAutospace", { value: Factory.property("text-autospace")})
  Object.defineProperty((globalThis as any).textAutospace, "normal", { value: Factory.propertyValue("text-autospace", "normal") })
  Object.defineProperty((globalThis as any).textAutospace, "noAutospace", { value: Factory.propertyValue("text-autospace", "no-autospace") })
  Object.defineProperty((globalThis as any).textAutospace, "insert", { value: Factory.propertyValue("text-autospace", "insert") })
  Object.defineProperty((globalThis as any).textAutospace, "replace", { value: Factory.propertyValue("text-autospace", "replace") })
  Object.defineProperty((globalThis as any).textAutospace, "ideographAlpha", { value: Factory.propertyValue("text-autospace", "ideograph-alpha") })
  Object.defineProperty((globalThis as any).textAutospace, "ideographNumeric", { value: Factory.propertyValue("text-autospace", "ideograph-numeric") })
  Object.defineProperty((globalThis as any).textAutospace, "punctuation", { value: Factory.propertyValue("text-autospace", "punctuation") })
  Object.defineProperty(globalThis, "textCombineUpright", { value: Factory.property("text-combine-upright")})
  Object.defineProperty((globalThis as any).textCombineUpright, "none", { value: Factory.propertyValue("text-combine-upright", "none") })
  Object.defineProperty((globalThis as any).textCombineUpright, "all", { value: Factory.propertyValue("text-combine-upright", "all") })
  Object.defineProperty((globalThis as any).textCombineUpright, "digits", { value: Factory.propertyValue("text-combine-upright", "digits") })
  Object.defineProperty(globalThis, "textDecoration", { value: Factory.property("text-decoration")})
  Object.defineProperty(globalThis, "textDecorationBlink", { value: Factory.property("text-decoration-blink")})
  Object.defineProperty(globalThis, "textDecorationColor", { value: Factory.property("text-decoration-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).textDecorationColor, color, { value: Factory.propertyValue("text-decoration-color", color) })
  }
  Object.defineProperty(globalThis, "textDecorationLine", { value: Factory.property("text-decoration-line")})
  Object.defineProperty((globalThis as any).textDecorationLine, "none", { value: Factory.propertyValue("text-decoration-line", "none") })
  Object.defineProperty((globalThis as any).textDecorationLine, "underline", { value: Factory.propertyValue("text-decoration-line", "underline") })
  Object.defineProperty((globalThis as any).textDecorationLine, "overline", { value: Factory.propertyValue("text-decoration-line", "overline") })
  Object.defineProperty((globalThis as any).textDecorationLine, "lineThrough", { value: Factory.propertyValue("text-decoration-line", "line-through") })
  Object.defineProperty((globalThis as any).textDecorationLine, "blink", { value: Factory.propertyValue("text-decoration-line", "blink") })
  Object.defineProperty((globalThis as any).textDecorationLine, "spellingError", { value: Factory.propertyValue("text-decoration-line", "spelling-error") })
  Object.defineProperty((globalThis as any).textDecorationLine, "grammarError", { value: Factory.propertyValue("text-decoration-line", "grammar-error") })
  Object.defineProperty(globalThis, "textDecorationLineThrough", { value: Factory.property("text-decoration-line-through")})
  Object.defineProperty(globalThis, "textDecorationNone", { value: Factory.property("text-decoration-none")})
  Object.defineProperty(globalThis, "textDecorationOverline", { value: Factory.property("text-decoration-overline")})
  Object.defineProperty(globalThis, "textDecorationSkip", { value: Factory.property("text-decoration-skip")})
  Object.defineProperty((globalThis as any).textDecorationSkip, "none", { value: Factory.propertyValue("text-decoration-skip", "none") })
  Object.defineProperty((globalThis as any).textDecorationSkip, "auto", { value: Factory.propertyValue("text-decoration-skip", "auto") })
  Object.defineProperty(globalThis, "textDecorationSkipBox", { value: Factory.property("text-decoration-skip-box")})
  Object.defineProperty((globalThis as any).textDecorationSkipBox, "none", { value: Factory.propertyValue("text-decoration-skip-box", "none") })
  Object.defineProperty((globalThis as any).textDecorationSkipBox, "all", { value: Factory.propertyValue("text-decoration-skip-box", "all") })
  Object.defineProperty(globalThis, "textDecorationSkipInk", { value: Factory.property("text-decoration-skip-ink")})
  Object.defineProperty((globalThis as any).textDecorationSkipInk, "auto", { value: Factory.propertyValue("text-decoration-skip-ink", "auto") })
  Object.defineProperty((globalThis as any).textDecorationSkipInk, "none", { value: Factory.propertyValue("text-decoration-skip-ink", "none") })
  Object.defineProperty((globalThis as any).textDecorationSkipInk, "all", { value: Factory.propertyValue("text-decoration-skip-ink", "all") })
  Object.defineProperty(globalThis, "textDecorationSkipInset", { value: Factory.property("text-decoration-skip-inset")})
  Object.defineProperty(globalThis, "textDecorationSkipSelf", { value: Factory.property("text-decoration-skip-self")})
  Object.defineProperty((globalThis as any).textDecorationSkipSelf, "auto", { value: Factory.propertyValue("text-decoration-skip-self", "auto") })
  Object.defineProperty((globalThis as any).textDecorationSkipSelf, "skipAll", { value: Factory.propertyValue("text-decoration-skip-self", "skip-all") })
  Object.defineProperty((globalThis as any).textDecorationSkipSelf, "skipUnderline", { value: Factory.propertyValue("text-decoration-skip-self", "skip-underline") })
  Object.defineProperty((globalThis as any).textDecorationSkipSelf, "skipOverline", { value: Factory.propertyValue("text-decoration-skip-self", "skip-overline") })
  Object.defineProperty((globalThis as any).textDecorationSkipSelf, "skipLineThrough", { value: Factory.propertyValue("text-decoration-skip-self", "skip-line-through") })
  Object.defineProperty((globalThis as any).textDecorationSkipSelf, "noSkip", { value: Factory.propertyValue("text-decoration-skip-self", "no-skip") })
  Object.defineProperty(globalThis, "textDecorationSkipSpaces", { value: Factory.property("text-decoration-skip-spaces")})
  Object.defineProperty((globalThis as any).textDecorationSkipSpaces, "none", { value: Factory.propertyValue("text-decoration-skip-spaces", "none") })
  Object.defineProperty((globalThis as any).textDecorationSkipSpaces, "all", { value: Factory.propertyValue("text-decoration-skip-spaces", "all") })
  Object.defineProperty((globalThis as any).textDecorationSkipSpaces, "start", { value: Factory.propertyValue("text-decoration-skip-spaces", "start") })
  Object.defineProperty((globalThis as any).textDecorationSkipSpaces, "end", { value: Factory.propertyValue("text-decoration-skip-spaces", "end") })
  Object.defineProperty(globalThis, "textDecorationStyle", { value: Factory.property("text-decoration-style")})
  Object.defineProperty((globalThis as any).textDecorationStyle, "solid", { value: Factory.propertyValue("text-decoration-style", "solid") })
  Object.defineProperty((globalThis as any).textDecorationStyle, "double", { value: Factory.propertyValue("text-decoration-style", "double") })
  Object.defineProperty((globalThis as any).textDecorationStyle, "dotted", { value: Factory.propertyValue("text-decoration-style", "dotted") })
  Object.defineProperty((globalThis as any).textDecorationStyle, "dashed", { value: Factory.propertyValue("text-decoration-style", "dashed") })
  Object.defineProperty((globalThis as any).textDecorationStyle, "wavy", { value: Factory.propertyValue("text-decoration-style", "wavy") })
  Object.defineProperty(globalThis, "textDecorationThickness", { value: Factory.property("text-decoration-thickness")})
  Object.defineProperty((globalThis as any).textDecorationThickness, "auto", { value: Factory.propertyValue("text-decoration-thickness", "auto") })
  Object.defineProperty((globalThis as any).textDecorationThickness, "fromFont", { value: Factory.propertyValue("text-decoration-thickness", "from-font") })
  Object.defineProperty(globalThis, "textDecorationTrim", { value: Factory.property("text-decoration-trim")})
  Object.defineProperty((globalThis as any).textDecorationTrim, "auto", { value: Factory.propertyValue("text-decoration-trim", "auto") })
  Object.defineProperty(globalThis, "textDecorationUnderline", { value: Factory.property("text-decoration-underline")})
  Object.defineProperty(globalThis, "textEdge", { value: Factory.property("text-edge")})
  Object.defineProperty((globalThis as any).textEdge, "leading", { value: Factory.propertyValue("text-edge", "leading") })
  Object.defineProperty((globalThis as any).textEdge, "text", { value: Factory.propertyValue("text-edge", "text") })
  Object.defineProperty((globalThis as any).textEdge, "cap", { value: Factory.propertyValue("text-edge", "cap") })
  Object.defineProperty((globalThis as any).textEdge, "ex", { value: Factory.propertyValue("text-edge", "ex") })
  Object.defineProperty((globalThis as any).textEdge, "ideographic", { value: Factory.propertyValue("text-edge", "ideographic") })
  Object.defineProperty((globalThis as any).textEdge, "ideographicInk", { value: Factory.propertyValue("text-edge", "ideographic-ink") })
  Object.defineProperty((globalThis as any).textEdge, "alphabetic", { value: Factory.propertyValue("text-edge", "alphabetic") })
  Object.defineProperty(globalThis, "textEmphasis", { value: Factory.property("text-emphasis")})
  Object.defineProperty(globalThis, "textEmphasisColor", { value: Factory.property("text-emphasis-color")})
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).textEmphasisColor, color, { value: Factory.propertyValue("text-emphasis-color", color) })
  }
  Object.defineProperty(globalThis, "textEmphasisPosition", { value: Factory.property("text-emphasis-position")})
  Object.defineProperty((globalThis as any).textEmphasisPosition, "over", { value: Factory.propertyValue("text-emphasis-position", "over") })
  Object.defineProperty((globalThis as any).textEmphasisPosition, "under", { value: Factory.propertyValue("text-emphasis-position", "under") })
  Object.defineProperty((globalThis as any).textEmphasisPosition, "right", { value: Factory.propertyValue("text-emphasis-position", "right") })
  Object.defineProperty((globalThis as any).textEmphasisPosition, "left", { value: Factory.propertyValue("text-emphasis-position", "left") })
  Object.defineProperty(globalThis, "textEmphasisSkip", { value: Factory.property("text-emphasis-skip")})
  Object.defineProperty((globalThis as any).textEmphasisSkip, "spaces", { value: Factory.propertyValue("text-emphasis-skip", "spaces") })
  Object.defineProperty((globalThis as any).textEmphasisSkip, "punctuation", { value: Factory.propertyValue("text-emphasis-skip", "punctuation") })
  Object.defineProperty((globalThis as any).textEmphasisSkip, "symbols", { value: Factory.propertyValue("text-emphasis-skip", "symbols") })
  Object.defineProperty((globalThis as any).textEmphasisSkip, "narrow", { value: Factory.propertyValue("text-emphasis-skip", "narrow") })
  Object.defineProperty(globalThis, "textEmphasisStyle", { value: Factory.property("text-emphasis-style")})
  Object.defineProperty((globalThis as any).textEmphasisStyle, "none", { value: Factory.propertyValue("text-emphasis-style", "none") })
  Object.defineProperty((globalThis as any).textEmphasisStyle, "filled", { value: Factory.propertyValue("text-emphasis-style", "filled") })
  Object.defineProperty((globalThis as any).textEmphasisStyle, "open", { value: Factory.propertyValue("text-emphasis-style", "open") })
  Object.defineProperty((globalThis as any).textEmphasisStyle, "dot", { value: Factory.propertyValue("text-emphasis-style", "dot") })
  Object.defineProperty((globalThis as any).textEmphasisStyle, "circle", { value: Factory.propertyValue("text-emphasis-style", "circle") })
  Object.defineProperty((globalThis as any).textEmphasisStyle, "doubleCircle", { value: Factory.propertyValue("text-emphasis-style", "double-circle") })
  Object.defineProperty((globalThis as any).textEmphasisStyle, "triangle", { value: Factory.propertyValue("text-emphasis-style", "triangle") })
  Object.defineProperty((globalThis as any).textEmphasisStyle, "sesame", { value: Factory.propertyValue("text-emphasis-style", "sesame") })
  Object.defineProperty(globalThis, "textGroupAlign", { value: Factory.property("text-group-align")})
  Object.defineProperty((globalThis as any).textGroupAlign, "none", { value: Factory.propertyValue("text-group-align", "none") })
  Object.defineProperty((globalThis as any).textGroupAlign, "start", { value: Factory.propertyValue("text-group-align", "start") })
  Object.defineProperty((globalThis as any).textGroupAlign, "end", { value: Factory.propertyValue("text-group-align", "end") })
  Object.defineProperty((globalThis as any).textGroupAlign, "left", { value: Factory.propertyValue("text-group-align", "left") })
  Object.defineProperty((globalThis as any).textGroupAlign, "right", { value: Factory.propertyValue("text-group-align", "right") })
  Object.defineProperty((globalThis as any).textGroupAlign, "center", { value: Factory.propertyValue("text-group-align", "center") })
  Object.defineProperty(globalThis, "textIndent", { value: Factory.property("text-indent")})
  Object.defineProperty((globalThis as any).textIndent, "hanging", { value: Factory.propertyValue("text-indent", "hanging") })
  Object.defineProperty((globalThis as any).textIndent, "eachLine", { value: Factory.propertyValue("text-indent", "each-line") })
  Object.defineProperty(globalThis, "textJustify", { value: Factory.property("text-justify")})
  Object.defineProperty((globalThis as any).textJustify, "auto", { value: Factory.propertyValue("text-justify", "auto") })
  Object.defineProperty((globalThis as any).textJustify, "none", { value: Factory.propertyValue("text-justify", "none") })
  Object.defineProperty((globalThis as any).textJustify, "interWord", { value: Factory.propertyValue("text-justify", "inter-word") })
  Object.defineProperty((globalThis as any).textJustify, "interCharacter", { value: Factory.propertyValue("text-justify", "inter-character") })
  Object.defineProperty((globalThis as any).textJustify, "noCompress", { value: Factory.propertyValue("text-justify", "no-compress") })
  Object.defineProperty((globalThis as any).textJustify, "distribute", { value: Factory.propertyValue("text-justify", "distribute") })
  Object.defineProperty((globalThis as any).textJustify, "ruby", { value: Factory.propertyValue("text-justify", "ruby") })
  Object.defineProperty(globalThis, "textJustifyTrim", { value: Factory.property("text-justify-trim")})
  Object.defineProperty(globalThis, "textKashida", { value: Factory.property("text-kashida")})
  Object.defineProperty(globalThis, "textKashidaSpace", { value: Factory.property("text-kashida-space")})
  Object.defineProperty(globalThis, "textLineThrough", { value: Factory.property("text-line-through")})
  Object.defineProperty(globalThis, "textLineThroughColor", { value: Factory.property("text-line-through-color")})
  Object.defineProperty(globalThis, "textLineThroughMode", { value: Factory.property("text-line-through-mode")})
  Object.defineProperty(globalThis, "textLineThroughStyle", { value: Factory.property("text-line-through-style")})
  Object.defineProperty(globalThis, "textLineThroughWidth", { value: Factory.property("text-line-through-width")})
  Object.defineProperty(globalThis, "textOrientation", { value: Factory.property("text-orientation")})
  Object.defineProperty((globalThis as any).textOrientation, "mixed", { value: Factory.propertyValue("text-orientation", "mixed") })
  Object.defineProperty((globalThis as any).textOrientation, "upright", { value: Factory.propertyValue("text-orientation", "upright") })
  Object.defineProperty((globalThis as any).textOrientation, "sideways", { value: Factory.propertyValue("text-orientation", "sideways") })
  Object.defineProperty((globalThis as any).textOrientation, "sidewaysRight", { value: Factory.propertyValue("text-orientation", "sideways-right") })
  Object.defineProperty(globalThis, "textOverflow", { value: Factory.property("text-overflow")})
  Object.defineProperty((globalThis as any).textOverflow, "clip", { value: Factory.propertyValue("text-overflow", "clip") })
  Object.defineProperty((globalThis as any).textOverflow, "ellipsis", { value: Factory.propertyValue("text-overflow", "ellipsis") })
  Object.defineProperty((globalThis as any).textOverflow, "fade", { value: Factory.propertyValue("text-overflow", "fade") })
  Object.defineProperty(globalThis, "textOverline", { value: Factory.property("text-overline")})
  Object.defineProperty(globalThis, "textOverlineColor", { value: Factory.property("text-overline-color")})
  Object.defineProperty(globalThis, "textOverlineMode", { value: Factory.property("text-overline-mode")})
  Object.defineProperty(globalThis, "textOverlineStyle", { value: Factory.property("text-overline-style")})
  Object.defineProperty(globalThis, "textOverlineWidth", { value: Factory.property("text-overline-width")})
  Object.defineProperty(globalThis, "textRendering", { value: Factory.property("text-rendering")})
  Object.defineProperty((globalThis as any).textRendering, "auto", { value: Factory.propertyValue("text-rendering", "auto") })
  Object.defineProperty((globalThis as any).textRendering, "optimizeSpeed", { value: Factory.propertyValue("text-rendering", "optimizeSpeed") })
  Object.defineProperty((globalThis as any).textRendering, "optimizeLegibility", { value: Factory.propertyValue("text-rendering", "optimizeLegibility") })
  Object.defineProperty((globalThis as any).textRendering, "geometricPrecision", { value: Factory.propertyValue("text-rendering", "geometricPrecision") })
  Object.defineProperty(globalThis, "textShadow", { value: Factory.property("text-shadow")})
  Object.defineProperty((globalThis as any).textShadow, "none", { value: Factory.propertyValue("text-shadow", "none") })
  for (const color of colorNames) {
    Object.defineProperty((globalThis as any).textShadow, color, { value: Factory.propertyValue("text-shadow", color) })
  }
  Object.defineProperty(globalThis, "textSizeAdjust", { value: Factory.property("text-size-adjust")})
  Object.defineProperty((globalThis as any).textSizeAdjust, "auto", { value: Factory.propertyValue("text-size-adjust", "auto") })
  Object.defineProperty((globalThis as any).textSizeAdjust, "none", { value: Factory.propertyValue("text-size-adjust", "none") })
  Object.defineProperty(globalThis, "textSpaceCollapse", { value: Factory.property("text-space-collapse")})
  Object.defineProperty((globalThis as any).textSpaceCollapse, "collapse", { value: Factory.propertyValue("text-space-collapse", "collapse") })
  Object.defineProperty((globalThis as any).textSpaceCollapse, "discard", { value: Factory.propertyValue("text-space-collapse", "discard") })
  Object.defineProperty((globalThis as any).textSpaceCollapse, "preserve", { value: Factory.propertyValue("text-space-collapse", "preserve") })
  Object.defineProperty((globalThis as any).textSpaceCollapse, "preserveBreaks", { value: Factory.propertyValue("text-space-collapse", "preserve-breaks") })
  Object.defineProperty((globalThis as any).textSpaceCollapse, "preserveSpaces", { value: Factory.propertyValue("text-space-collapse", "preserve-spaces") })
  Object.defineProperty(globalThis, "textSpaceTrim", { value: Factory.property("text-space-trim")})
  Object.defineProperty((globalThis as any).textSpaceTrim, "none", { value: Factory.propertyValue("text-space-trim", "none") })
  Object.defineProperty((globalThis as any).textSpaceTrim, "discardInner", { value: Factory.propertyValue("text-space-trim", "discard-inner") })
  Object.defineProperty((globalThis as any).textSpaceTrim, "discardBefore", { value: Factory.propertyValue("text-space-trim", "discard-before") })
  Object.defineProperty((globalThis as any).textSpaceTrim, "discardAfter", { value: Factory.propertyValue("text-space-trim", "discard-after") })
  Object.defineProperty(globalThis, "textSpacing", { value: Factory.property("text-spacing")})
  Object.defineProperty((globalThis as any).textSpacing, "normal", { value: Factory.propertyValue("text-spacing", "normal") })
  Object.defineProperty((globalThis as any).textSpacing, "none", { value: Factory.propertyValue("text-spacing", "none") })
  Object.defineProperty((globalThis as any).textSpacing, "auto", { value: Factory.propertyValue("text-spacing", "auto") })
  Object.defineProperty(globalThis, "textSpacingTrim", { value: Factory.property("text-spacing-trim")})
  Object.defineProperty((globalThis as any).textSpacingTrim, "auto", { value: Factory.propertyValue("text-spacing-trim", "auto") })
  Object.defineProperty((globalThis as any).textSpacingTrim, "spaceAll", { value: Factory.propertyValue("text-spacing-trim", "space-all") })
  Object.defineProperty((globalThis as any).textSpacingTrim, "trimAuto", { value: Factory.propertyValue("text-spacing-trim", "trim-auto") })
  Object.defineProperty((globalThis as any).textSpacingTrim, "spaceFirst", { value: Factory.propertyValue("text-spacing-trim", "space-first") })
  Object.defineProperty((globalThis as any).textSpacingTrim, "allowEnd", { value: Factory.propertyValue("text-spacing-trim", "allow-end") })
  Object.defineProperty(globalThis, "textTransform", { value: Factory.property("text-transform")})
  Object.defineProperty((globalThis as any).textTransform, "none", { value: Factory.propertyValue("text-transform", "none") })
  Object.defineProperty((globalThis as any).textTransform, "capitalize", { value: Factory.propertyValue("text-transform", "capitalize") })
  Object.defineProperty((globalThis as any).textTransform, "uppercase", { value: Factory.propertyValue("text-transform", "uppercase") })
  Object.defineProperty((globalThis as any).textTransform, "lowercase", { value: Factory.propertyValue("text-transform", "lowercase") })
  Object.defineProperty((globalThis as any).textTransform, "fullWidth", { value: Factory.propertyValue("text-transform", "full-width") })
  Object.defineProperty((globalThis as any).textTransform, "fullSizeKana", { value: Factory.propertyValue("text-transform", "full-size-kana") })
  Object.defineProperty(globalThis, "textUnderline", { value: Factory.property("text-underline")})
  Object.defineProperty(globalThis, "textUnderlineColor", { value: Factory.property("text-underline-color")})
  Object.defineProperty(globalThis, "textUnderlineMode", { value: Factory.property("text-underline-mode")})
  Object.defineProperty(globalThis, "textUnderlineOffset", { value: Factory.property("text-underline-offset")})
  Object.defineProperty((globalThis as any).textUnderlineOffset, "auto", { value: Factory.propertyValue("text-underline-offset", "auto") })
  Object.defineProperty(globalThis, "textUnderlinePosition", { value: Factory.property("text-underline-position")})
  Object.defineProperty((globalThis as any).textUnderlinePosition, "auto", { value: Factory.propertyValue("text-underline-position", "auto") })
  Object.defineProperty((globalThis as any).textUnderlinePosition, "fromFont", { value: Factory.propertyValue("text-underline-position", "from-font") })
  Object.defineProperty((globalThis as any).textUnderlinePosition, "under", { value: Factory.propertyValue("text-underline-position", "under") })
  Object.defineProperty((globalThis as any).textUnderlinePosition, "left", { value: Factory.propertyValue("text-underline-position", "left") })
  Object.defineProperty((globalThis as any).textUnderlinePosition, "right", { value: Factory.propertyValue("text-underline-position", "right") })
  Object.defineProperty(globalThis, "textUnderlineStyle", { value: Factory.property("text-underline-style")})
  Object.defineProperty(globalThis, "textUnderlineWidth", { value: Factory.property("text-underline-width")})
  Object.defineProperty(globalThis, "textWrap", { value: Factory.property("text-wrap")})
  Object.defineProperty((globalThis as any).textWrap, "wrap", { value: Factory.propertyValue("text-wrap", "wrap") })
  Object.defineProperty((globalThis as any).textWrap, "nowrap", { value: Factory.propertyValue("text-wrap", "nowrap") })
  Object.defineProperty((globalThis as any).textWrap, "balance", { value: Factory.propertyValue("text-wrap", "balance") })
  Object.defineProperty((globalThis as any).textWrap, "stable", { value: Factory.propertyValue("text-wrap", "stable") })
  Object.defineProperty((globalThis as any).textWrap, "pretty", { value: Factory.propertyValue("text-wrap", "pretty") })
  Object.defineProperty(globalThis, "top", { value: Factory.property("top")})
  Object.defineProperty((globalThis as any).top, "auto", { value: Factory.propertyValue("top", "auto") })
  Object.defineProperty(globalThis, "touchAction", { value: Factory.property("touch-action")})
  Object.defineProperty((globalThis as any).touchAction, "auto", { value: Factory.propertyValue("touch-action", "auto") })
  Object.defineProperty((globalThis as any).touchAction, "none", { value: Factory.propertyValue("touch-action", "none") })
  Object.defineProperty((globalThis as any).touchAction, "panX", { value: Factory.propertyValue("touch-action", "pan-x") })
  Object.defineProperty((globalThis as any).touchAction, "panLeft", { value: Factory.propertyValue("touch-action", "pan-left") })
  Object.defineProperty((globalThis as any).touchAction, "panRight", { value: Factory.propertyValue("touch-action", "pan-right") })
  Object.defineProperty((globalThis as any).touchAction, "panY", { value: Factory.propertyValue("touch-action", "pan-y") })
  Object.defineProperty((globalThis as any).touchAction, "panUp", { value: Factory.propertyValue("touch-action", "pan-up") })
  Object.defineProperty((globalThis as any).touchAction, "panDown", { value: Factory.propertyValue("touch-action", "pan-down") })
  Object.defineProperty((globalThis as any).touchAction, "pinchZoom", { value: Factory.propertyValue("touch-action", "pinch-zoom") })
  Object.defineProperty((globalThis as any).touchAction, "manipulation", { value: Factory.propertyValue("touch-action", "manipulation") })
  Object.defineProperty(globalThis, "touchActionDelay", { value: Factory.property("touch-action-delay")})
  Object.defineProperty(globalThis, "transform", { value: Factory.property("transform")})
  Object.defineProperty((globalThis as any).transform, "none", { value: Factory.propertyValue("transform", "none") })
  Object.defineProperty(globalThis, "transformBox", { value: Factory.property("transform-box")})
  Object.defineProperty((globalThis as any).transformBox, "contentBox", { value: Factory.propertyValue("transform-box", "content-box") })
  Object.defineProperty((globalThis as any).transformBox, "borderBox", { value: Factory.propertyValue("transform-box", "border-box") })
  Object.defineProperty((globalThis as any).transformBox, "fillBox", { value: Factory.propertyValue("transform-box", "fill-box") })
  Object.defineProperty((globalThis as any).transformBox, "strokeBox", { value: Factory.propertyValue("transform-box", "stroke-box") })
  Object.defineProperty((globalThis as any).transformBox, "viewBox", { value: Factory.propertyValue("transform-box", "view-box") })
  Object.defineProperty(globalThis, "transformOrigin", { value: Factory.property("transform-origin")})
  Object.defineProperty((globalThis as any).transformOrigin, "left", { value: Factory.propertyValue("transform-origin", "left") })
  Object.defineProperty((globalThis as any).transformOrigin, "center", { value: Factory.propertyValue("transform-origin", "center") })
  Object.defineProperty((globalThis as any).transformOrigin, "right", { value: Factory.propertyValue("transform-origin", "right") })
  Object.defineProperty((globalThis as any).transformOrigin, "top", { value: Factory.propertyValue("transform-origin", "top") })
  Object.defineProperty((globalThis as any).transformOrigin, "bottom", { value: Factory.propertyValue("transform-origin", "bottom") })
  Object.defineProperty(globalThis, "transformOriginX", { value: Factory.property("transform-origin-x")})
  Object.defineProperty(globalThis, "transformOriginY", { value: Factory.property("transform-origin-y")})
  Object.defineProperty(globalThis, "transformOriginZ", { value: Factory.property("transform-origin-z")})
  Object.defineProperty(globalThis, "transformStyle", { value: Factory.property("transform-style")})
  Object.defineProperty((globalThis as any).transformStyle, "flat", { value: Factory.propertyValue("transform-style", "flat") })
  Object.defineProperty((globalThis as any).transformStyle, "preserve3d", { value: Factory.propertyValue("transform-style", "preserve-3d") })
  Object.defineProperty(globalThis, "transition", { value: Factory.property("transition")})
  Object.defineProperty(globalThis, "transitionDelay", { value: Factory.property("transition-delay")})
  Object.defineProperty(globalThis, "transitionDuration", { value: Factory.property("transition-duration")})
  Object.defineProperty(globalThis, "transitionProperty", { value: Factory.property("transition-property")})
  Object.defineProperty((globalThis as any).transitionProperty, "none", { value: Factory.propertyValue("transition-property", "none") })
  Object.defineProperty((globalThis as any).transitionProperty, "all", { value: Factory.propertyValue("transition-property", "all") })
  Object.defineProperty(globalThis, "transitionTimingFunction", { value: Factory.property("transition-timing-function")})
  Object.defineProperty((globalThis as any).transitionTimingFunction, "linear", { value: Factory.propertyValue("transition-timing-function", "linear") })
  Object.defineProperty(globalThis, "translate", { value: Factory.property("translate")})
  Object.defineProperty((globalThis as any).translate, "none", { value: Factory.propertyValue("translate", "none") })
  Object.defineProperty(globalThis, "ucAltSkin", { value: Factory.property("uc-alt-skin")})
  Object.defineProperty(globalThis, "ucSkin", { value: Factory.property("uc-skin")})
  Object.defineProperty(globalThis, "unicodeBidi", { value: Factory.property("unicode-bidi")})
  Object.defineProperty((globalThis as any).unicodeBidi, "normal", { value: Factory.propertyValue("unicode-bidi", "normal") })
  Object.defineProperty((globalThis as any).unicodeBidi, "embed", { value: Factory.propertyValue("unicode-bidi", "embed") })
  Object.defineProperty((globalThis as any).unicodeBidi, "isolate", { value: Factory.propertyValue("unicode-bidi", "isolate") })
  Object.defineProperty((globalThis as any).unicodeBidi, "bidiOverride", { value: Factory.propertyValue("unicode-bidi", "bidi-override") })
  Object.defineProperty((globalThis as any).unicodeBidi, "isolateOverride", { value: Factory.propertyValue("unicode-bidi", "isolate-override") })
  Object.defineProperty((globalThis as any).unicodeBidi, "plaintext", { value: Factory.propertyValue("unicode-bidi", "plaintext") })
  Object.defineProperty(globalThis, "unicodeRange", { value: Factory.property("unicode-range")})
  Object.defineProperty(globalThis, "userSelect", { value: Factory.property("user-select")})
  Object.defineProperty((globalThis as any).userSelect, "auto", { value: Factory.propertyValue("user-select", "auto") })
  Object.defineProperty((globalThis as any).userSelect, "text", { value: Factory.propertyValue("user-select", "text") })
  Object.defineProperty((globalThis as any).userSelect, "none", { value: Factory.propertyValue("user-select", "none") })
  Object.defineProperty((globalThis as any).userSelect, "contain", { value: Factory.propertyValue("user-select", "contain") })
  Object.defineProperty((globalThis as any).userSelect, "all", { value: Factory.propertyValue("user-select", "all") })
  Object.defineProperty(globalThis, "userZoom", { value: Factory.property("user-zoom")})
  Object.defineProperty(globalThis, "vectorEffect", { value: Factory.property("vector-effect")})
  Object.defineProperty((globalThis as any).vectorEffect, "none", { value: Factory.propertyValue("vector-effect", "none") })
  Object.defineProperty((globalThis as any).vectorEffect, "nonScalingStroke", { value: Factory.propertyValue("vector-effect", "non-scaling-stroke") })
  Object.defineProperty((globalThis as any).vectorEffect, "nonScalingSize", { value: Factory.propertyValue("vector-effect", "non-scaling-size") })
  Object.defineProperty((globalThis as any).vectorEffect, "nonRotation", { value: Factory.propertyValue("vector-effect", "non-rotation") })
  Object.defineProperty((globalThis as any).vectorEffect, "fixedPosition", { value: Factory.propertyValue("vector-effect", "fixed-position") })
  Object.defineProperty(globalThis, "verticalAlign", { value: Factory.property("vertical-align")})
  Object.defineProperty((globalThis as any).verticalAlign, "first", { value: Factory.propertyValue("vertical-align", "first") })
  Object.defineProperty((globalThis as any).verticalAlign, "last", { value: Factory.propertyValue("vertical-align", "last") })
  Object.defineProperty((globalThis as any).verticalAlign, "auto", { value: Factory.propertyValue("vertical-align", "auto") })
  Object.defineProperty((globalThis as any).verticalAlign, "baseline", { value: Factory.propertyValue("vertical-align", "baseline") })
  Object.defineProperty((globalThis as any).verticalAlign, "textBottom", { value: Factory.propertyValue("vertical-align", "text-bottom") })
  Object.defineProperty((globalThis as any).verticalAlign, "alphabetic", { value: Factory.propertyValue("vertical-align", "alphabetic") })
  Object.defineProperty((globalThis as any).verticalAlign, "ideographic", { value: Factory.propertyValue("vertical-align", "ideographic") })
  Object.defineProperty((globalThis as any).verticalAlign, "middle", { value: Factory.propertyValue("vertical-align", "middle") })
  Object.defineProperty((globalThis as any).verticalAlign, "central", { value: Factory.propertyValue("vertical-align", "central") })
  Object.defineProperty((globalThis as any).verticalAlign, "mathematical", { value: Factory.propertyValue("vertical-align", "mathematical") })
  Object.defineProperty((globalThis as any).verticalAlign, "textTop", { value: Factory.propertyValue("vertical-align", "text-top") })
  Object.defineProperty((globalThis as any).verticalAlign, "sub", { value: Factory.propertyValue("vertical-align", "sub") })
  Object.defineProperty((globalThis as any).verticalAlign, "_super", { value: Factory.propertyValue("vertical-align", "super") })
  Object.defineProperty((globalThis as any).verticalAlign, "top", { value: Factory.propertyValue("vertical-align", "top") })
  Object.defineProperty((globalThis as any).verticalAlign, "center", { value: Factory.propertyValue("vertical-align", "center") })
  Object.defineProperty((globalThis as any).verticalAlign, "bottom", { value: Factory.propertyValue("vertical-align", "bottom") })
  Object.defineProperty(globalThis, "viewTimeline", { value: Factory.property("view-timeline")})
  Object.defineProperty(globalThis, "viewTimelineAxis", { value: Factory.property("view-timeline-axis")})
  Object.defineProperty((globalThis as any).viewTimelineAxis, "block", { value: Factory.propertyValue("view-timeline-axis", "block") })
  Object.defineProperty((globalThis as any).viewTimelineAxis, "inline", { value: Factory.propertyValue("view-timeline-axis", "inline") })
  Object.defineProperty((globalThis as any).viewTimelineAxis, "vertical", { value: Factory.propertyValue("view-timeline-axis", "vertical") })
  Object.defineProperty((globalThis as any).viewTimelineAxis, "horizontal", { value: Factory.propertyValue("view-timeline-axis", "horizontal") })
  Object.defineProperty((globalThis as any).viewTimelineAxis, "nearest", { value: Factory.propertyValue("view-timeline-axis", "nearest") })
  Object.defineProperty((globalThis as any).viewTimelineAxis, "root", { value: Factory.propertyValue("view-timeline-axis", "root") })
  Object.defineProperty(globalThis, "viewTimelineInset", { value: Factory.property("view-timeline-inset")})
  Object.defineProperty((globalThis as any).viewTimelineInset, "auto", { value: Factory.propertyValue("view-timeline-inset", "auto") })
  Object.defineProperty(globalThis, "viewTimelineName", { value: Factory.property("view-timeline-name")})
  Object.defineProperty((globalThis as any).viewTimelineName, "none", { value: Factory.propertyValue("view-timeline-name", "none") })
  Object.defineProperty(globalThis, "viewTransitionName", { value: Factory.property("view-transition-name")})
  Object.defineProperty((globalThis as any).viewTransitionName, "none", { value: Factory.propertyValue("view-transition-name", "none") })
  Object.defineProperty(globalThis, "viewportFill", { value: Factory.property("viewport-fill")})
  Object.defineProperty(globalThis, "viewportFillOpacity", { value: Factory.property("viewport-fill-opacity")})
  Object.defineProperty(globalThis, "viewportFit", { value: Factory.property("viewport-fit")})
  Object.defineProperty(globalThis, "visibility", { value: Factory.property("visibility")})
  Object.defineProperty((globalThis as any).visibility, "visible", { value: Factory.propertyValue("visibility", "visible") })
  Object.defineProperty((globalThis as any).visibility, "hidden", { value: Factory.propertyValue("visibility", "hidden") })
  Object.defineProperty((globalThis as any).visibility, "collapse", { value: Factory.propertyValue("visibility", "collapse") })
  Object.defineProperty(globalThis, "voiceBalance", { value: Factory.property("voice-balance")})
  Object.defineProperty((globalThis as any).voiceBalance, "left", { value: Factory.propertyValue("voice-balance", "left") })
  Object.defineProperty((globalThis as any).voiceBalance, "center", { value: Factory.propertyValue("voice-balance", "center") })
  Object.defineProperty((globalThis as any).voiceBalance, "right", { value: Factory.propertyValue("voice-balance", "right") })
  Object.defineProperty((globalThis as any).voiceBalance, "leftwards", { value: Factory.propertyValue("voice-balance", "leftwards") })
  Object.defineProperty((globalThis as any).voiceBalance, "rightwards", { value: Factory.propertyValue("voice-balance", "rightwards") })
  Object.defineProperty(globalThis, "voiceDuration", { value: Factory.property("voice-duration")})
  Object.defineProperty((globalThis as any).voiceDuration, "auto", { value: Factory.propertyValue("voice-duration", "auto") })
  Object.defineProperty(globalThis, "voiceFamily", { value: Factory.property("voice-family")})
  Object.defineProperty((globalThis as any).voiceFamily, "preserve", { value: Factory.propertyValue("voice-family", "preserve") })
  Object.defineProperty((globalThis as any).voiceFamily, "child", { value: Factory.propertyValue("voice-family", "child") })
  Object.defineProperty((globalThis as any).voiceFamily, "young", { value: Factory.propertyValue("voice-family", "young") })
  Object.defineProperty((globalThis as any).voiceFamily, "old", { value: Factory.propertyValue("voice-family", "old") })
  Object.defineProperty((globalThis as any).voiceFamily, "male", { value: Factory.propertyValue("voice-family", "male") })
  Object.defineProperty((globalThis as any).voiceFamily, "female", { value: Factory.propertyValue("voice-family", "female") })
  Object.defineProperty((globalThis as any).voiceFamily, "neutral", { value: Factory.propertyValue("voice-family", "neutral") })
  Object.defineProperty(globalThis, "voicePitch", { value: Factory.property("voice-pitch")})
  Object.defineProperty((globalThis as any).voicePitch, "absolute", { value: Factory.propertyValue("voice-pitch", "absolute") })
  Object.defineProperty((globalThis as any).voicePitch, "xLow", { value: Factory.propertyValue("voice-pitch", "x-low") })
  Object.defineProperty((globalThis as any).voicePitch, "low", { value: Factory.propertyValue("voice-pitch", "low") })
  Object.defineProperty((globalThis as any).voicePitch, "medium", { value: Factory.propertyValue("voice-pitch", "medium") })
  Object.defineProperty((globalThis as any).voicePitch, "high", { value: Factory.propertyValue("voice-pitch", "high") })
  Object.defineProperty((globalThis as any).voicePitch, "xHigh", { value: Factory.propertyValue("voice-pitch", "x-high") })
  Object.defineProperty(globalThis, "voiceRange", { value: Factory.property("voice-range")})
  Object.defineProperty((globalThis as any).voiceRange, "absolute", { value: Factory.propertyValue("voice-range", "absolute") })
  Object.defineProperty((globalThis as any).voiceRange, "xLow", { value: Factory.propertyValue("voice-range", "x-low") })
  Object.defineProperty((globalThis as any).voiceRange, "low", { value: Factory.propertyValue("voice-range", "low") })
  Object.defineProperty((globalThis as any).voiceRange, "medium", { value: Factory.propertyValue("voice-range", "medium") })
  Object.defineProperty((globalThis as any).voiceRange, "high", { value: Factory.propertyValue("voice-range", "high") })
  Object.defineProperty((globalThis as any).voiceRange, "xHigh", { value: Factory.propertyValue("voice-range", "x-high") })
  Object.defineProperty(globalThis, "voiceRate", { value: Factory.property("voice-rate")})
  Object.defineProperty((globalThis as any).voiceRate, "normal", { value: Factory.propertyValue("voice-rate", "normal") })
  Object.defineProperty((globalThis as any).voiceRate, "xSlow", { value: Factory.propertyValue("voice-rate", "x-slow") })
  Object.defineProperty((globalThis as any).voiceRate, "slow", { value: Factory.propertyValue("voice-rate", "slow") })
  Object.defineProperty((globalThis as any).voiceRate, "medium", { value: Factory.propertyValue("voice-rate", "medium") })
  Object.defineProperty((globalThis as any).voiceRate, "fast", { value: Factory.propertyValue("voice-rate", "fast") })
  Object.defineProperty((globalThis as any).voiceRate, "xFast", { value: Factory.propertyValue("voice-rate", "x-fast") })
  Object.defineProperty(globalThis, "voiceStress", { value: Factory.property("voice-stress")})
  Object.defineProperty((globalThis as any).voiceStress, "normal", { value: Factory.propertyValue("voice-stress", "normal") })
  Object.defineProperty((globalThis as any).voiceStress, "strong", { value: Factory.propertyValue("voice-stress", "strong") })
  Object.defineProperty((globalThis as any).voiceStress, "moderate", { value: Factory.propertyValue("voice-stress", "moderate") })
  Object.defineProperty((globalThis as any).voiceStress, "none", { value: Factory.propertyValue("voice-stress", "none") })
  Object.defineProperty((globalThis as any).voiceStress, "reduced", { value: Factory.propertyValue("voice-stress", "reduced") })
  Object.defineProperty(globalThis, "voiceVolume", { value: Factory.property("voice-volume")})
  Object.defineProperty((globalThis as any).voiceVolume, "silent", { value: Factory.propertyValue("voice-volume", "silent") })
  Object.defineProperty((globalThis as any).voiceVolume, "xSoft", { value: Factory.propertyValue("voice-volume", "x-soft") })
  Object.defineProperty((globalThis as any).voiceVolume, "soft", { value: Factory.propertyValue("voice-volume", "soft") })
  Object.defineProperty((globalThis as any).voiceVolume, "medium", { value: Factory.propertyValue("voice-volume", "medium") })
  Object.defineProperty((globalThis as any).voiceVolume, "loud", { value: Factory.propertyValue("voice-volume", "loud") })
  Object.defineProperty((globalThis as any).voiceVolume, "xLoud", { value: Factory.propertyValue("voice-volume", "x-loud") })
  Object.defineProperty(globalThis, "volume", { value: Factory.property("volume")})
  Object.defineProperty(globalThis, "whiteSpace", { value: Factory.property("white-space")})
  Object.defineProperty((globalThis as any).whiteSpace, "normal", { value: Factory.propertyValue("white-space", "normal") })
  Object.defineProperty((globalThis as any).whiteSpace, "pre", { value: Factory.propertyValue("white-space", "pre") })
  Object.defineProperty((globalThis as any).whiteSpace, "nowrap", { value: Factory.propertyValue("white-space", "nowrap") })
  Object.defineProperty((globalThis as any).whiteSpace, "preWrap", { value: Factory.propertyValue("white-space", "pre-wrap") })
  Object.defineProperty((globalThis as any).whiteSpace, "breakSpaces", { value: Factory.propertyValue("white-space", "break-spaces") })
  Object.defineProperty((globalThis as any).whiteSpace, "preLine", { value: Factory.propertyValue("white-space", "pre-line") })
  Object.defineProperty(globalThis, "widows", { value: Factory.property("widows")})
  Object.defineProperty(globalThis, "width", { value: Factory.property("width")})
  Object.defineProperty((globalThis as any).width, "stretch", { value: Factory.propertyValue("width", "stretch") })
  Object.defineProperty((globalThis as any).width, "fitContent", { value: Factory.propertyValue("width", "fit-content") })
  Object.defineProperty((globalThis as any).width, "contain", { value: Factory.propertyValue("width", "contain") })
  Object.defineProperty((globalThis as any).width, "auto", { value: Factory.propertyValue("width", "auto") })
  Object.defineProperty((globalThis as any).width, "minContent", { value: Factory.propertyValue("width", "min-content") })
  Object.defineProperty((globalThis as any).width, "maxContent", { value: Factory.propertyValue("width", "max-content") })
  Object.defineProperty(globalThis, "willChange", { value: Factory.property("will-change")})
  Object.defineProperty((globalThis as any).willChange, "auto", { value: Factory.propertyValue("will-change", "auto") })
  Object.defineProperty((globalThis as any).willChange, "scrollPosition", { value: Factory.propertyValue("will-change", "scroll-position") })
  Object.defineProperty((globalThis as any).willChange, "contents", { value: Factory.propertyValue("will-change", "contents") })
  Object.defineProperty(globalThis, "wordBoundaryDetection", { value: Factory.property("word-boundary-detection")})
  Object.defineProperty((globalThis as any).wordBoundaryDetection, "normal", { value: Factory.propertyValue("word-boundary-detection", "normal") })
  Object.defineProperty((globalThis as any).wordBoundaryDetection, "manual", { value: Factory.propertyValue("word-boundary-detection", "manual") })
  Object.defineProperty(globalThis, "wordBoundaryExpansion", { value: Factory.property("word-boundary-expansion")})
  Object.defineProperty((globalThis as any).wordBoundaryExpansion, "none", { value: Factory.propertyValue("word-boundary-expansion", "none") })
  Object.defineProperty((globalThis as any).wordBoundaryExpansion, "space", { value: Factory.propertyValue("word-boundary-expansion", "space") })
  Object.defineProperty((globalThis as any).wordBoundaryExpansion, "ideographicSpace", { value: Factory.propertyValue("word-boundary-expansion", "ideographic-space") })
  Object.defineProperty(globalThis, "wordBreak", { value: Factory.property("word-break")})
  Object.defineProperty((globalThis as any).wordBreak, "normal", { value: Factory.propertyValue("word-break", "normal") })
  Object.defineProperty((globalThis as any).wordBreak, "keepAll", { value: Factory.propertyValue("word-break", "keep-all") })
  Object.defineProperty((globalThis as any).wordBreak, "breakAll", { value: Factory.propertyValue("word-break", "break-all") })
  Object.defineProperty((globalThis as any).wordBreak, "breakWord", { value: Factory.propertyValue("word-break", "break-word") })
  Object.defineProperty(globalThis, "wordSpacing", { value: Factory.property("word-spacing")})
  Object.defineProperty((globalThis as any).wordSpacing, "normal", { value: Factory.propertyValue("word-spacing", "normal") })
  Object.defineProperty(globalThis, "wordWrap", { value: Factory.property("word-wrap")})
  Object.defineProperty((globalThis as any).wordWrap, "normal", { value: Factory.propertyValue("word-wrap", "normal") })
  Object.defineProperty((globalThis as any).wordWrap, "breakWord", { value: Factory.propertyValue("word-wrap", "break-word") })
  Object.defineProperty((globalThis as any).wordWrap, "anywhere", { value: Factory.propertyValue("word-wrap", "anywhere") })
  Object.defineProperty(globalThis, "wrapAfter", { value: Factory.property("wrap-after")})
  Object.defineProperty((globalThis as any).wrapAfter, "auto", { value: Factory.propertyValue("wrap-after", "auto") })
  Object.defineProperty((globalThis as any).wrapAfter, "avoid", { value: Factory.propertyValue("wrap-after", "avoid") })
  Object.defineProperty((globalThis as any).wrapAfter, "avoidLine", { value: Factory.propertyValue("wrap-after", "avoid-line") })
  Object.defineProperty((globalThis as any).wrapAfter, "avoidFlex", { value: Factory.propertyValue("wrap-after", "avoid-flex") })
  Object.defineProperty((globalThis as any).wrapAfter, "line", { value: Factory.propertyValue("wrap-after", "line") })
  Object.defineProperty((globalThis as any).wrapAfter, "flex", { value: Factory.propertyValue("wrap-after", "flex") })
  Object.defineProperty(globalThis, "wrapBefore", { value: Factory.property("wrap-before")})
  Object.defineProperty((globalThis as any).wrapBefore, "auto", { value: Factory.propertyValue("wrap-before", "auto") })
  Object.defineProperty((globalThis as any).wrapBefore, "avoid", { value: Factory.propertyValue("wrap-before", "avoid") })
  Object.defineProperty((globalThis as any).wrapBefore, "avoidLine", { value: Factory.propertyValue("wrap-before", "avoid-line") })
  Object.defineProperty((globalThis as any).wrapBefore, "avoidFlex", { value: Factory.propertyValue("wrap-before", "avoid-flex") })
  Object.defineProperty((globalThis as any).wrapBefore, "line", { value: Factory.propertyValue("wrap-before", "line") })
  Object.defineProperty((globalThis as any).wrapBefore, "flex", { value: Factory.propertyValue("wrap-before", "flex") })
  Object.defineProperty(globalThis, "wrapFlow", { value: Factory.property("wrap-flow")})
  Object.defineProperty((globalThis as any).wrapFlow, "auto", { value: Factory.propertyValue("wrap-flow", "auto") })
  Object.defineProperty((globalThis as any).wrapFlow, "both", { value: Factory.propertyValue("wrap-flow", "both") })
  Object.defineProperty((globalThis as any).wrapFlow, "start", { value: Factory.propertyValue("wrap-flow", "start") })
  Object.defineProperty((globalThis as any).wrapFlow, "end", { value: Factory.propertyValue("wrap-flow", "end") })
  Object.defineProperty((globalThis as any).wrapFlow, "minimum", { value: Factory.propertyValue("wrap-flow", "minimum") })
  Object.defineProperty((globalThis as any).wrapFlow, "maximum", { value: Factory.propertyValue("wrap-flow", "maximum") })
  Object.defineProperty((globalThis as any).wrapFlow, "clear", { value: Factory.propertyValue("wrap-flow", "clear") })
  Object.defineProperty(globalThis, "wrapInside", { value: Factory.property("wrap-inside")})
  Object.defineProperty((globalThis as any).wrapInside, "auto", { value: Factory.propertyValue("wrap-inside", "auto") })
  Object.defineProperty((globalThis as any).wrapInside, "avoid", { value: Factory.propertyValue("wrap-inside", "avoid") })
  Object.defineProperty(globalThis, "wrapThrough", { value: Factory.property("wrap-through")})
  Object.defineProperty((globalThis as any).wrapThrough, "wrap", { value: Factory.propertyValue("wrap-through", "wrap") })
  Object.defineProperty((globalThis as any).wrapThrough, "none", { value: Factory.propertyValue("wrap-through", "none") })
  Object.defineProperty(globalThis, "writingMode", { value: Factory.property("writing-mode")})
  Object.defineProperty((globalThis as any).writingMode, "horizontalTb", { value: Factory.propertyValue("writing-mode", "horizontal-tb") })
  Object.defineProperty((globalThis as any).writingMode, "verticalRl", { value: Factory.propertyValue("writing-mode", "vertical-rl") })
  Object.defineProperty((globalThis as any).writingMode, "verticalLr", { value: Factory.propertyValue("writing-mode", "vertical-lr") })
  Object.defineProperty((globalThis as any).writingMode, "sidewaysRl", { value: Factory.propertyValue("writing-mode", "sideways-rl") })
  Object.defineProperty((globalThis as any).writingMode, "sidewaysLr", { value: Factory.propertyValue("writing-mode", "sideways-lr") })
  Object.defineProperty(globalThis, "x", { value: Factory.property("x")})
  Object.defineProperty(globalThis, "y", { value: Factory.property("y")})
  Object.defineProperty(globalThis, "zIndex", { value: Factory.property("z-index")})
  Object.defineProperty((globalThis as any).zIndex, "auto", { value: Factory.propertyValue("z-index", "auto") })
  Object.defineProperty((globalThis as any).zIndex, "inherit", { value: Factory.propertyValue("z-index", "inherit") })
  Object.defineProperty(globalThis, "zoom", { value: Factory.property("zoom")})
}
