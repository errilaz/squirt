import { writeFile } from "fs/promises"
import tags from "html-tags"
import voids from "html-tags/void"
import { all as properties } from "known-css-properties"
import atRules from "./atRules"

const keywords = ["var", "continue"]
const { globals, definitions } = generate()

await Promise.all([
  writeFile("src/generated/globals.ts", globals, "utf8"),
  writeFile("src/generated/definitions.d.ts", definitions, "utf8"),
])

function generate() {
  let globals = "// GENERATED BY @squirt/generator\n"
  let definitions = "// GENERATED by @squirt/generator\n"

  globals += `import { Factory } from "../factory"\n\n`
  definitions += `import { ElementBuilder, Property, AtRule } from "../dom"\n\n`

  globals += "export default function defineGeneratedGlobals() {\n\n"
  definitions += "declare global {\n\n"

  globals += "  // HTML Elements\n\n"
  definitions += "  // HTML Elements\n\n"
  
  for (const tag of tags) {
    const isVoid = (voids as string[]).includes(tag)
    const name = keywords.includes(tag) ? `_${tag}` : tag
    globals += `  Object.defineProperty(globalThis, "${name}", { value: Factory.element("${tag}", ${isVoid}) })\n`
    definitions += `  /** Create a virtual \`${tag}\` HTML element. */\n`
    definitions += `  const ${name}: ElementBuilder\n`
  }

  globals += "\n  // CSS Properties\n\n"
  definitions += "\n  // CSS Properties\n\n"

  for (const property of properties.filter(p => !p.startsWith("-epub"))) {
    const name = camelize(propertyName(property))
    globals += `  Object.defineProperty(globalThis, "${name}", { value: Factory.property("${property}") })\n`
    definitions += `  /** Create a virtual \`${property}\` CSS property. */\n`
    definitions += `  function ${name}(value: any): Property\n`
  }

  globals += "\n  // CSS At-Rules\n\n"
  definitions += "\n  // CSS At-Rules\n\n"

  for (const atRule of atRules) {
    const name = camelize(atRule)
    globals += `  Object.defineProperty(globalThis, "$${name}", { value: Factory.atRule("${atRule}") })\n`
    definitions += `  /** Create a virtual \`@${atRule}\` CSS at-rule. */\n`
    definitions += `  function $${name}(...contents: any[]): AtRule\n`
  }

  globals += "}\n"
  definitions += "}\n"

  return { globals, definitions }
}

/** Formats a property variable name. */
function propertyName(property: string) {
  switch (true) {
    case keywords.includes(property):
      return `_${property}`
    case property.startsWith("-"):
      return property.substring(1)
  }
  return property
}

/** Turn a kebab-case name into camelCase. */
function camelize(kebab: string) {
  return kebab.replace(/-[a-z]/g, ([, c]) => c.toUpperCase());
}
