import getCssSymbols, { SpecProperty } from "./css"

await Promise.all([
  writeCss(),
])

async function writeCss() {
  const { types, define } = await generateCss()
  return Promise.all([
    Bun.write("src/generated/types.css.d.ts", types),
    Bun.write("src/generated/define.css.ts", define),
  ])
}

async function generateCss() {
  const { properties } = await getCssSymbols()

  // Header
  let types = "// GENERATED by @squirt/generator\n"
  let define = "// GENERATED BY @squirt/generator\n"

  // Imports
  types += `import type { ElementBuilder, Property, AtRule } from "../dom"\n\n`
  define += `import { Factory } from "../factory"\n\n`

  // Module
  types += "declare global {\n\n"
  define += "export default function defineCssGlobals() {\n\n"

  // Properties
  for (const property of properties) {
    types += `  /** Create a \`${property.name}\` property. \`${printSpecs(property)}\` */\n`
    types += `  function ${property.jsName}(value: any): Property\n`
    if (property.values.length > 0) {
      types += `  module ${property.jsName} {\n`
      for (const value of property.values) {
        types += `    /** ${value.help ?? "`" + value.name + "` keyword"}. \`${value.spec.shortName}\` */\n`
        types += `    const ${value.jsName}: string\n`
      }
      types += `  }\n`
    }
    types += `\n`
  }

  // Close Module
  define += "}\n"
  types += "}\n"

  return { types, define }
}

function printSpecs(property: SpecProperty) {
  return property.specs.map(s => s.shortName).join(", ")
}